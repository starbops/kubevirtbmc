// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/resourcemanager/resource_manager.go
//
// Generated by this command:
//
//	mockgen -source=pkg/resourcemanager/resource_manager.go -destination=pkg/resourcemanager/mock_resource_manager.go -package=resourcemanager
//

// Package resourcemanager is a generated GoMock package.
package resourcemanager

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResourceManager is a mock of ResourceManager interface.
type MockResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockResourceManagerMockRecorder
	isgomock struct{}
}

// MockResourceManagerMockRecorder is the mock recorder for MockResourceManager.
type MockResourceManagerMockRecorder struct {
	mock *MockResourceManager
}

// NewMockResourceManager creates a new mock instance.
func NewMockResourceManager(ctrl *gomock.Controller) *MockResourceManager {
	mock := &MockResourceManager{ctrl: ctrl}
	mock.recorder = &MockResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceManager) EXPECT() *MockResourceManagerMockRecorder {
	return m.recorder
}

// GetComputerSystem mocks base method.
func (m *MockResourceManager) GetComputerSystem() (ComputerSystemInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComputerSystem")
	ret0, _ := ret[0].(ComputerSystemInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComputerSystem indicates an expected call of GetComputerSystem.
func (mr *MockResourceManagerMockRecorder) GetComputerSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComputerSystem", reflect.TypeOf((*MockResourceManager)(nil).GetComputerSystem))
}

// GetManager mocks base method.
func (m *MockResourceManager) GetManager() (ManagerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManager")
	ret0, _ := ret[0].(ManagerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManager indicates an expected call of GetManager.
func (mr *MockResourceManagerMockRecorder) GetManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManager", reflect.TypeOf((*MockResourceManager)(nil).GetManager))
}

// GetPowerStatus mocks base method.
func (m *MockResourceManager) GetPowerStatus() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerStatus")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPowerStatus indicates an expected call of GetPowerStatus.
func (mr *MockResourceManagerMockRecorder) GetPowerStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerStatus", reflect.TypeOf((*MockResourceManager)(nil).GetPowerStatus))
}

// PowerCycle mocks base method.
func (m *MockResourceManager) PowerCycle() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerCycle")
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerCycle indicates an expected call of PowerCycle.
func (mr *MockResourceManagerMockRecorder) PowerCycle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerCycle", reflect.TypeOf((*MockResourceManager)(nil).PowerCycle))
}

// PowerOff mocks base method.
func (m *MockResourceManager) PowerOff() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOff")
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerOff indicates an expected call of PowerOff.
func (mr *MockResourceManagerMockRecorder) PowerOff() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOff", reflect.TypeOf((*MockResourceManager)(nil).PowerOff))
}

// PowerOn mocks base method.
func (m *MockResourceManager) PowerOn() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOn")
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerOn indicates an expected call of PowerOn.
func (mr *MockResourceManagerMockRecorder) PowerOn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOn", reflect.TypeOf((*MockResourceManager)(nil).PowerOn))
}

// SetBootDevice mocks base method.
func (m *MockResourceManager) SetBootDevice(arg0 BootDevice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBootDevice", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBootDevice indicates an expected call of SetBootDevice.
func (mr *MockResourceManagerMockRecorder) SetBootDevice(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBootDevice", reflect.TypeOf((*MockResourceManager)(nil).SetBootDevice), arg0)
}
