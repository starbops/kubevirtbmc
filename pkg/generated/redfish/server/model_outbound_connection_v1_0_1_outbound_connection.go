// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// OutboundConnectionV101OutboundConnection - The OutboundConnection schema defines how the Redfish service connects to a remote client over a WebSocket connection.  This allows a service behind a firewall to establish a connection to a remote client outside of the firewall.
type OutboundConnectionV101OutboundConnection struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions OutboundConnectionV101Actions `json:"Actions,omitempty"`

	Authentication OutboundConnectionV101AuthenticationType `json:"Authentication,omitempty"`

	Certificates OdataV4IdRef `json:"Certificates,omitempty"`

	ClientCertificates OdataV4IdRef `json:"ClientCertificates,omitempty"`

	// Indicates if the outbound connection is enabled.
	ConnectionEnabled *bool `json:"ConnectionEnabled,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The URI of the WebSocket connection to the remote client.
	EndpointURI string `json:"EndpointURI,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links OutboundConnectionV101Links `json:"Links,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The HTTP header value is the property value.  The header name is the property name.
	PreUpgradeHTTPHeaders map[string]interface{} `json:"PreUpgradeHTTPHeaders,omitempty"`

	RetryPolicy OutboundConnectionV101RetryPolicyType `json:"RetryPolicy,omitempty"`

	// The Redfish roles that contain the privileges of the remote client for the outbound connection.
	Roles []*string `json:"Roles,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// Interval for sending the WebSocket ping opcode in minutes.  The value `0` indicates the ping opcode is not sent.
	WebSocketPingIntervalMinutes *int64 `json:"WebSocketPingIntervalMinutes,omitempty"`
}

// AssertOutboundConnectionV101OutboundConnectionRequired checks if the required fields are not zero-ed
func AssertOutboundConnectionV101OutboundConnectionRequired(obj OutboundConnectionV101OutboundConnection) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertOutboundConnectionV101ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Certificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.ClientCertificates); err != nil {
		return err
	}
	if err := AssertOutboundConnectionV101LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertOutboundConnectionV101RetryPolicyTypeRequired(obj.RetryPolicy); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertOutboundConnectionV101OutboundConnectionConstraints checks if the values respects the defined constraints
func AssertOutboundConnectionV101OutboundConnectionConstraints(obj OutboundConnectionV101OutboundConnection) error {
	if err := AssertOutboundConnectionV101ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Certificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.ClientCertificates); err != nil {
		return err
	}
	if err := AssertOutboundConnectionV101LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertOutboundConnectionV101RetryPolicyTypeConstraints(obj.RetryPolicy); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if obj.WebSocketPingIntervalMinutes != nil && *obj.WebSocketPingIntervalMinutes < 0 {
		return &ParsingError{Param: "WebSocketPingIntervalMinutes", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.WebSocketPingIntervalMinutes != nil && *obj.WebSocketPingIntervalMinutes > 65535 {
		return &ParsingError{Param: "WebSocketPingIntervalMinutes", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
