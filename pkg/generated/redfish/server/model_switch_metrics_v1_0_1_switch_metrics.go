// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// SwitchMetricsV101SwitchMetrics - The SwitchMetrics schema contains usage and health statistics for a switch device.
type SwitchMetricsV101SwitchMetrics struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions SwitchMetricsV101Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	InternalMemoryMetrics SwitchMetricsV101InternalMemoryMetrics `json:"InternalMemoryMetrics,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PCIeErrors PcieDevicePcieErrors `json:"PCIeErrors,omitempty"`
}

// AssertSwitchMetricsV101SwitchMetricsRequired checks if the required fields are not zero-ed
func AssertSwitchMetricsV101SwitchMetricsRequired(obj SwitchMetricsV101SwitchMetrics) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSwitchMetricsV101ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertSwitchMetricsV101InternalMemoryMetricsRequired(obj.InternalMemoryMetrics); err != nil {
		return err
	}
	if err := AssertPcieDevicePcieErrorsRequired(obj.PCIeErrors); err != nil {
		return err
	}
	return nil
}

// AssertSwitchMetricsV101SwitchMetricsConstraints checks if the values respects the defined constraints
func AssertSwitchMetricsV101SwitchMetricsConstraints(obj SwitchMetricsV101SwitchMetrics) error {
	if err := AssertSwitchMetricsV101ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertSwitchMetricsV101InternalMemoryMetricsConstraints(obj.InternalMemoryMetrics); err != nil {
		return err
	}
	if err := AssertPcieDevicePcieErrorsConstraints(obj.PCIeErrors); err != nil {
		return err
	}
	return nil
}
