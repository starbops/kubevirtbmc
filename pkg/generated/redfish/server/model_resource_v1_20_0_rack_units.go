// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// ResourceV1200RackUnits : The type of rack unit in use.
type ResourceV1200RackUnits string

// List of ResourceV1200RackUnits
const (
	RESOURCEV1200RACKUNITS_OPEN_U  ResourceV1200RackUnits = "OpenU"
	RESOURCEV1200RACKUNITS_EIA_310 ResourceV1200RackUnits = "EIA_310"
)

// AllowedResourceV1200RackUnitsEnumValues is all the allowed values of ResourceV1200RackUnits enum
var AllowedResourceV1200RackUnitsEnumValues = []ResourceV1200RackUnits{
	"OpenU",
	"EIA_310",
}

// validResourceV1200RackUnitsEnumValue provides a map of ResourceV1200RackUnitss for fast verification of use input
var validResourceV1200RackUnitsEnumValues = map[ResourceV1200RackUnits]struct{}{
	"OpenU":   {},
	"EIA_310": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceV1200RackUnits) IsValid() bool {
	_, ok := validResourceV1200RackUnitsEnumValues[v]
	return ok
}

// NewResourceV1200RackUnitsFromValue returns a pointer to a valid ResourceV1200RackUnits
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceV1200RackUnitsFromValue(v string) (ResourceV1200RackUnits, error) {
	ev := ResourceV1200RackUnits(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ResourceV1200RackUnits: valid values are %v", v, AllowedResourceV1200RackUnitsEnumValues)
}

// AssertResourceV1200RackUnitsRequired checks if the required fields are not zero-ed
func AssertResourceV1200RackUnitsRequired(obj ResourceV1200RackUnits) error {
	return nil
}

// AssertResourceV1200RackUnitsConstraints checks if the values respects the defined constraints
func AssertResourceV1200RackUnitsConstraints(obj ResourceV1200RackUnits) error {
	return nil
}
