// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// GraphicsControllerV101GraphicsController - The GraphicsController schema defines a graphics controller that can be used to drive one or more display devices.
type GraphicsControllerV101GraphicsController struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions GraphicsControllerV101Actions `json:"Actions,omitempty"`

	// The user-assigned asset tag for this graphics controller.
	AssetTag *string `json:"AssetTag,omitempty"`

	// The version of the graphics controller BIOS or primary graphics controller firmware.
	BiosVersion *string `json:"BiosVersion,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The version of the graphics controller driver loaded in the operating system.
	DriverVersion *string `json:"DriverVersion,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links GraphicsControllerV101Links `json:"Links,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// The manufacturer of this graphics controller.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// The product model number of this graphics controller.
	Model *string `json:"Model,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The part number for this graphics controller.
	PartNumber *string `json:"PartNumber,omitempty"`

	Ports OdataV4IdRef `json:"Ports,omitempty"`

	// The SKU for this graphics controller.
	SKU *string `json:"SKU,omitempty"`

	// The serial number for this graphics controller.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	// The spare part number of the graphics controller.
	SparePartNumber *string `json:"SparePartNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertGraphicsControllerV101GraphicsControllerRequired checks if the required fields are not zero-ed
func AssertGraphicsControllerV101GraphicsControllerRequired(obj GraphicsControllerV101GraphicsController) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertGraphicsControllerV101ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertGraphicsControllerV101LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Ports); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertGraphicsControllerV101GraphicsControllerConstraints checks if the values respects the defined constraints
func AssertGraphicsControllerV101GraphicsControllerConstraints(obj GraphicsControllerV101GraphicsController) error {
	if err := AssertGraphicsControllerV101ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertGraphicsControllerV101LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Ports); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
