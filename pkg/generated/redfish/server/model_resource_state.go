// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2024.3
 */

package server

import (
	"fmt"
)

type ResourceState string

// List of ResourceState
const (
	RESOURCESTATE_ENABLED             ResourceState = "Enabled"
	RESOURCESTATE_DISABLED            ResourceState = "Disabled"
	RESOURCESTATE_STANDBY_OFFLINE     ResourceState = "StandbyOffline"
	RESOURCESTATE_STANDBY_SPARE       ResourceState = "StandbySpare"
	RESOURCESTATE_IN_TEST             ResourceState = "InTest"
	RESOURCESTATE_STARTING            ResourceState = "Starting"
	RESOURCESTATE_ABSENT              ResourceState = "Absent"
	RESOURCESTATE_UNAVAILABLE_OFFLINE ResourceState = "UnavailableOffline"
	RESOURCESTATE_DEFERRING           ResourceState = "Deferring"
	RESOURCESTATE_QUIESCED            ResourceState = "Quiesced"
	RESOURCESTATE_UPDATING            ResourceState = "Updating"
	RESOURCESTATE_QUALIFIED           ResourceState = "Qualified"
	RESOURCESTATE_DEGRADED            ResourceState = "Degraded"
)

// AllowedResourceStateEnumValues is all the allowed values of ResourceState enum
var AllowedResourceStateEnumValues = []ResourceState{
	"Enabled",
	"Disabled",
	"StandbyOffline",
	"StandbySpare",
	"InTest",
	"Starting",
	"Absent",
	"UnavailableOffline",
	"Deferring",
	"Quiesced",
	"Updating",
	"Qualified",
	"Degraded",
}

// validResourceStateEnumValue provides a map of ResourceStates for fast verification of use input
var validResourceStateEnumValues = map[ResourceState]struct{}{
	"Enabled":            {},
	"Disabled":           {},
	"StandbyOffline":     {},
	"StandbySpare":       {},
	"InTest":             {},
	"Starting":           {},
	"Absent":             {},
	"UnavailableOffline": {},
	"Deferring":          {},
	"Quiesced":           {},
	"Updating":           {},
	"Qualified":          {},
	"Degraded":           {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceState) IsValid() bool {
	_, ok := validResourceStateEnumValues[v]
	return ok
}

// NewResourceStateFromValue returns a pointer to a valid ResourceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceStateFromValue(v string) (ResourceState, error) {
	ev := ResourceState(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ResourceState: valid values are %v", v, AllowedResourceStateEnumValues)
}

// AssertResourceStateRequired checks if the required fields are not zero-ed
func AssertResourceStateRequired(obj ResourceState) error {
	return nil
}

// AssertResourceStateConstraints checks if the values respects the defined constraints
func AssertResourceStateConstraints(obj ResourceState) error {
	return nil
}
