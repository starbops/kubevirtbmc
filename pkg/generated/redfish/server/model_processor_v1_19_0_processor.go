// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// ProcessorV1190Processor - The Processor schema describes the information about a single processor that a system contains.  A processor includes both performance characteristics, clock speed, architecture, core count, and so on, and compatibility, such as the CPU ID instruction results.  It also describes the location, such as a slot, socket, or bay, where a unit can be installed, by populating a resource instance with an absent state if a unit is not present.
type ProcessorV1190Processor struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	AccelerationFunctions OdataV4IdRef `json:"AccelerationFunctions,omitempty"`

	Actions ProcessorV1190Actions `json:"Actions,omitempty"`

	AdditionalFirmwareVersions SoftwareInventoryAdditionalVersions `json:"AdditionalFirmwareVersions,omitempty"`

	AppliedOperatingConfig OdataV4IdRef `json:"AppliedOperatingConfig,omitempty"`

	Assembly OdataV4IdRef `json:"Assembly,omitempty"`

	// The base (nominal) clock speed of the processor in MHz.
	BaseSpeedMHz *int64 `json:"BaseSpeedMHz,omitempty"`

	BaseSpeedPriorityState ProcessorV1190BaseSpeedPriorityState `json:"BaseSpeedPriorityState,omitempty"`

	Certificates OdataV4IdRef `json:"Certificates,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// An indication of whether this processor is enabled.
	Enabled bool `json:"Enabled,omitempty"`

	EnvironmentMetrics OdataV4IdRef `json:"EnvironmentMetrics,omitempty"`

	FPGA ProcessorV1190Fpga `json:"FPGA,omitempty"`

	// The processor family.
	Family *string `json:"Family,omitempty"`

	// The firmware version of the processor.
	FirmwareVersion string `json:"FirmwareVersion,omitempty"`

	// The list of core identifiers corresponding to the cores that have been configured with the higher clock speed from the operating configuration applied to this processor.
	HighSpeedCoreIDs []*int64 `json:"HighSpeedCoreIDs,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	InstructionSet ProcessorV1190InstructionSet `json:"InstructionSet,omitempty"`

	Links ProcessorV1190Links `json:"Links,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive,omitempty"`

	// The processor manufacturer.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// The maximum clock speed of the processor.
	MaxSpeedMHz *int64 `json:"MaxSpeedMHz,omitempty"`

	// The maximum Thermal Design Power (TDP) in watt units.
	MaxTDPWatts *int64 `json:"MaxTDPWatts,omitempty"`

	// An array of DSP0274-defined measurement blocks.
	// Deprecated
	Measurements []SoftwareInventoryMeasurementBlock `json:"Measurements,omitempty"`

	MemorySummary ProcessorV1190MemorySummary `json:"MemorySummary,omitempty"`

	Metrics OdataV4IdRef `json:"Metrics,omitempty"`

	// The minimum clock speed of the processor in MHz.
	MinSpeedMHz *int64 `json:"MinSpeedMHz,omitempty"`

	// The product model number of this device.
	Model *string `json:"Model,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	OperatingConfigs OdataV4IdRef `json:"OperatingConfigs,omitempty"`

	// Operating speed of the processor in MHz.
	OperatingSpeedMHz *int64 `json:"OperatingSpeedMHz,omitempty"`

	OperatingSpeedRangeMHz ControlControlRangeExcerpt `json:"OperatingSpeedRangeMHz,omitempty"`

	// The part number of the processor.
	PartNumber *string `json:"PartNumber,omitempty"`

	Ports OdataV4IdRef `json:"Ports,omitempty"`

	PowerState ResourcePowerState `json:"PowerState,omitempty"`

	ProcessorArchitecture ProcessorV1190ProcessorArchitecture `json:"ProcessorArchitecture,omitempty"`

	ProcessorId ProcessorV1190ProcessorId `json:"ProcessorId,omitempty"`

	// The logical index of this processor within the system.
	ProcessorIndex *int64 `json:"ProcessorIndex,omitempty"`

	// The memory directly attached or integrated within this processor.  Examples include internal cache, dedicated memory for the processor, and system memory.
	ProcessorMemory []ProcessorV1190ProcessorMemory `json:"ProcessorMemory,omitempty"`

	ProcessorType ProcessorV1190ProcessorType `json:"ProcessorType,omitempty"`

	// An indication of whether this component can be independently replaced as allowed by the vendor's replacement policy.
	Replaceable *bool `json:"Replaceable,omitempty"`

	// The serial number of the processor.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	// The socket or location of the processor.
	Socket *string `json:"Socket,omitempty"`

	// The spare part number of the processor.
	SparePartNumber *string `json:"SparePartNumber,omitempty"`

	// The clock limit of the processor in MHz.
	SpeedLimitMHz *int64 `json:"SpeedLimitMHz,omitempty"`

	// Indicates whether the clock speed of the processor is fixed at the value specified in the SpeedLimitMHz property.
	SpeedLocked *bool `json:"SpeedLocked,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	SubProcessors OdataV4IdRef `json:"SubProcessors,omitempty"`

	SystemInterface ProcessorV1190ProcessorInterface `json:"SystemInterface,omitempty"`

	// The nominal Thermal Design Power (TDP) in watt units.
	TDPWatts *int64 `json:"TDPWatts,omitempty"`

	// The causes of the processor being throttled.
	ThrottleCauses []ProcessorV1190ThrottleCause `json:"ThrottleCauses,omitempty"`

	// An indication of whether the processor is throttled.
	Throttled *bool `json:"Throttled,omitempty"`

	// The total number of cores that this processor contains.
	TotalCores *int64 `json:"TotalCores,omitempty"`

	// The total number of enabled cores that this processor contains.
	TotalEnabledCores *int64 `json:"TotalEnabledCores,omitempty"`

	// The total number of execution threads that this processor supports.
	TotalThreads *int64 `json:"TotalThreads,omitempty"`

	TurboState ProcessorV1190TurboState `json:"TurboState,omitempty"`

	UUID string `json:"UUID,omitempty" validate:"regexp=^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`

	// The hardware version of the processor.
	Version *string `json:"Version,omitempty"`
}

// AssertProcessorV1190ProcessorRequired checks if the required fields are not zero-ed
func AssertProcessorV1190ProcessorRequired(obj ProcessorV1190Processor) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertOdataV4IdRefRequired(obj.AccelerationFunctions); err != nil {
		return err
	}
	if err := AssertProcessorV1190ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertSoftwareInventoryAdditionalVersionsRequired(obj.AdditionalFirmwareVersions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.AppliedOperatingConfig); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Assembly); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Certificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.EnvironmentMetrics); err != nil {
		return err
	}
	if err := AssertProcessorV1190FpgaRequired(obj.FPGA); err != nil {
		return err
	}
	if err := AssertProcessorV1190LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	for _, el := range obj.Measurements {
		if err := AssertSoftwareInventoryMeasurementBlockRequired(el); err != nil {
			return err
		}
	}
	if err := AssertProcessorV1190MemorySummaryRequired(obj.MemorySummary); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Metrics); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.OperatingConfigs); err != nil {
		return err
	}
	if err := AssertControlControlRangeExcerptRequired(obj.OperatingSpeedRangeMHz); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Ports); err != nil {
		return err
	}
	if err := AssertProcessorV1190ProcessorIdRequired(obj.ProcessorId); err != nil {
		return err
	}
	for _, el := range obj.ProcessorMemory {
		if err := AssertProcessorV1190ProcessorMemoryRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.SubProcessors); err != nil {
		return err
	}
	if err := AssertProcessorV1190ProcessorInterfaceRequired(obj.SystemInterface); err != nil {
		return err
	}
	return nil
}

// AssertProcessorV1190ProcessorConstraints checks if the values respects the defined constraints
func AssertProcessorV1190ProcessorConstraints(obj ProcessorV1190Processor) error {
	if err := AssertOdataV4IdRefConstraints(obj.AccelerationFunctions); err != nil {
		return err
	}
	if err := AssertProcessorV1190ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertSoftwareInventoryAdditionalVersionsConstraints(obj.AdditionalFirmwareVersions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.AppliedOperatingConfig); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Assembly); err != nil {
		return err
	}
	if obj.BaseSpeedMHz != nil && *obj.BaseSpeedMHz < 0 {
		return &ParsingError{Param: "BaseSpeedMHz", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertOdataV4IdRefConstraints(obj.Certificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.EnvironmentMetrics); err != nil {
		return err
	}
	if err := AssertProcessorV1190FpgaConstraints(obj.FPGA); err != nil {
		return err
	}
	if err := AssertProcessorV1190LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	for _, el := range obj.Measurements {
		if err := AssertSoftwareInventoryMeasurementBlockConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertProcessorV1190MemorySummaryConstraints(obj.MemorySummary); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Metrics); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.OperatingConfigs); err != nil {
		return err
	}
	if err := AssertControlControlRangeExcerptConstraints(obj.OperatingSpeedRangeMHz); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Ports); err != nil {
		return err
	}
	if err := AssertProcessorV1190ProcessorIdConstraints(obj.ProcessorId); err != nil {
		return err
	}
	for _, el := range obj.ProcessorMemory {
		if err := AssertProcessorV1190ProcessorMemoryConstraints(el); err != nil {
			return err
		}
	}
	if obj.SpeedLimitMHz != nil && *obj.SpeedLimitMHz < 0 {
		return &ParsingError{Param: "SpeedLimitMHz", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.SubProcessors); err != nil {
		return err
	}
	if err := AssertProcessorV1190ProcessorInterfaceConstraints(obj.SystemInterface); err != nil {
		return err
	}
	return nil
}
