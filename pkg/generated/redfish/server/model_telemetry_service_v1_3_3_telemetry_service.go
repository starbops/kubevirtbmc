// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// TelemetryServiceV133TelemetryService - The TelemetryService schema describes a telemetry service.  The telemetry service is used for collecting and reporting metric data within the Redfish Service.
type TelemetryServiceV133TelemetryService struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions TelemetryServiceV133Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	LogService OdataV4IdRef `json:"LogService,omitempty"`

	// The maximum number of metric reports that this service supports.
	MaxReports *int64 `json:"MaxReports,omitempty"`

	MetricDefinitions OdataV4IdRef `json:"MetricDefinitions,omitempty"`

	MetricReportDefinitions OdataV4IdRef `json:"MetricReportDefinitions,omitempty"`

	MetricReports OdataV4IdRef `json:"MetricReports,omitempty"`

	// The minimum time interval between gathering metric data that this service allows.
	MinCollectionInterval *string `json:"MinCollectionInterval,omitempty" validate:"regexp=^P(\\\\d+D)?(T(\\\\d+H)?(\\\\d+M)?(\\\\d+(.\\\\d+)?S)?)?$"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An indication of whether this service is enabled.
	ServiceEnabled *bool `json:"ServiceEnabled,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The functions that can be performed over each metric.
	SupportedCollectionFunctions []TelemetryServiceV133CollectionFunction `json:"SupportedCollectionFunctions,omitempty"`

	Triggers OdataV4IdRef `json:"Triggers,omitempty"`
}

// AssertTelemetryServiceV133TelemetryServiceRequired checks if the required fields are not zero-ed
func AssertTelemetryServiceV133TelemetryServiceRequired(obj TelemetryServiceV133TelemetryService) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertTelemetryServiceV133ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.LogService); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.MetricDefinitions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.MetricReportDefinitions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.MetricReports); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Triggers); err != nil {
		return err
	}
	return nil
}

// AssertTelemetryServiceV133TelemetryServiceConstraints checks if the values respects the defined constraints
func AssertTelemetryServiceV133TelemetryServiceConstraints(obj TelemetryServiceV133TelemetryService) error {
	if err := AssertTelemetryServiceV133ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.LogService); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.MetricDefinitions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.MetricReportDefinitions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.MetricReports); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Triggers); err != nil {
		return err
	}
	return nil
}
