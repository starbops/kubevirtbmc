// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type NetworkDeviceFunctionV191IpAddressType string

// List of NetworkDeviceFunctionV191IpAddressType
const (
	NETWORKDEVICEFUNCTIONV191IPADDRESSTYPE_IPV4 NetworkDeviceFunctionV191IpAddressType = "IPv4"
	NETWORKDEVICEFUNCTIONV191IPADDRESSTYPE_IPV6 NetworkDeviceFunctionV191IpAddressType = "IPv6"
)

// AllowedNetworkDeviceFunctionV191IpAddressTypeEnumValues is all the allowed values of NetworkDeviceFunctionV191IpAddressType enum
var AllowedNetworkDeviceFunctionV191IpAddressTypeEnumValues = []NetworkDeviceFunctionV191IpAddressType{
	"IPv4",
	"IPv6",
}

// validNetworkDeviceFunctionV191IpAddressTypeEnumValue provides a map of NetworkDeviceFunctionV191IpAddressTypes for fast verification of use input
var validNetworkDeviceFunctionV191IpAddressTypeEnumValues = map[NetworkDeviceFunctionV191IpAddressType]struct{}{
	"IPv4": {},
	"IPv6": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkDeviceFunctionV191IpAddressType) IsValid() bool {
	_, ok := validNetworkDeviceFunctionV191IpAddressTypeEnumValues[v]
	return ok
}

// NewNetworkDeviceFunctionV191IpAddressTypeFromValue returns a pointer to a valid NetworkDeviceFunctionV191IpAddressType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkDeviceFunctionV191IpAddressTypeFromValue(v string) (NetworkDeviceFunctionV191IpAddressType, error) {
	ev := NetworkDeviceFunctionV191IpAddressType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for NetworkDeviceFunctionV191IpAddressType: valid values are %v", v, AllowedNetworkDeviceFunctionV191IpAddressTypeEnumValues)
}

// AssertNetworkDeviceFunctionV191IpAddressTypeRequired checks if the required fields are not zero-ed
func AssertNetworkDeviceFunctionV191IpAddressTypeRequired(obj NetworkDeviceFunctionV191IpAddressType) error {
	return nil
}

// AssertNetworkDeviceFunctionV191IpAddressTypeConstraints checks if the values respects the defined constraints
func AssertNetworkDeviceFunctionV191IpAddressTypeConstraints(obj NetworkDeviceFunctionV191IpAddressType) error {
	return nil
}
