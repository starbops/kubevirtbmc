// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// ManagerNetworkProtocolV1100ManagerNetworkProtocol - The network service settings for the manager.
type ManagerNetworkProtocolV1100ManagerNetworkProtocol struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions ManagerNetworkProtocolV1100Actions `json:"Actions,omitempty"`

	DHCP ManagerNetworkProtocolV1100Protocol `json:"DHCP,omitempty"`

	DHCPv6 ManagerNetworkProtocolV1100Protocol `json:"DHCPv6,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The fully qualified domain name for the manager obtained by DNS including the host name and top-level domain name.
	FQDN *string `json:"FQDN,omitempty"`

	FTP ManagerNetworkProtocolV1100Protocol `json:"FTP,omitempty"`

	FTPS ManagerNetworkProtocolV1100Protocol `json:"FTPS,omitempty"`

	HTTP ManagerNetworkProtocolV1100Protocol `json:"HTTP,omitempty"`

	HTTPS ManagerNetworkProtocolV1100HttpsProtocol `json:"HTTPS,omitempty"`

	// The DNS host name of this manager, without any domain information.
	HostName *string `json:"HostName,omitempty"`

	IPMI ManagerNetworkProtocolV1100Protocol `json:"IPMI,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	KVMIP ManagerNetworkProtocolV1100Protocol `json:"KVMIP,omitempty"`

	NTP ManagerNetworkProtocolV1100NtpProtocol `json:"NTP,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	Proxy ManagerNetworkProtocolV1100ProxyConfiguration `json:"Proxy,omitempty"`

	RDP ManagerNetworkProtocolV1100Protocol `json:"RDP,omitempty"`

	RFB ManagerNetworkProtocolV1100Protocol `json:"RFB,omitempty"`

	SFTP ManagerNetworkProtocolV1100Protocol `json:"SFTP,omitempty"`

	SNMP ManagerNetworkProtocolV1100SnmpProtocol `json:"SNMP,omitempty"`

	SSDP ManagerNetworkProtocolV1100SsdProtocol `json:"SSDP,omitempty"`

	SSH ManagerNetworkProtocolV1100Protocol `json:"SSH,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	Telnet ManagerNetworkProtocolV1100Protocol `json:"Telnet,omitempty"`

	VirtualMedia ManagerNetworkProtocolV1100Protocol `json:"VirtualMedia,omitempty"`
}

// AssertManagerNetworkProtocolV1100ManagerNetworkProtocolRequired checks if the required fields are not zero-ed
func AssertManagerNetworkProtocolV1100ManagerNetworkProtocolRequired(obj ManagerNetworkProtocolV1100ManagerNetworkProtocol) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertManagerNetworkProtocolV1100ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolRequired(obj.DHCP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolRequired(obj.DHCPv6); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolRequired(obj.FTP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolRequired(obj.FTPS); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolRequired(obj.HTTP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100HttpsProtocolRequired(obj.HTTPS); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolRequired(obj.IPMI); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolRequired(obj.KVMIP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100NtpProtocolRequired(obj.NTP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProxyConfigurationRequired(obj.Proxy); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolRequired(obj.RDP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolRequired(obj.RFB); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolRequired(obj.SFTP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100SnmpProtocolRequired(obj.SNMP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100SsdProtocolRequired(obj.SSDP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolRequired(obj.SSH); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolRequired(obj.Telnet); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolRequired(obj.VirtualMedia); err != nil {
		return err
	}
	return nil
}

// AssertManagerNetworkProtocolV1100ManagerNetworkProtocolConstraints checks if the values respects the defined constraints
func AssertManagerNetworkProtocolV1100ManagerNetworkProtocolConstraints(obj ManagerNetworkProtocolV1100ManagerNetworkProtocol) error {
	if err := AssertManagerNetworkProtocolV1100ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolConstraints(obj.DHCP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolConstraints(obj.DHCPv6); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolConstraints(obj.FTP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolConstraints(obj.FTPS); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolConstraints(obj.HTTP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100HttpsProtocolConstraints(obj.HTTPS); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolConstraints(obj.IPMI); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolConstraints(obj.KVMIP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100NtpProtocolConstraints(obj.NTP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProxyConfigurationConstraints(obj.Proxy); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolConstraints(obj.RDP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolConstraints(obj.RFB); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolConstraints(obj.SFTP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100SnmpProtocolConstraints(obj.SNMP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100SsdProtocolConstraints(obj.SSDP); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolConstraints(obj.SSH); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolConstraints(obj.Telnet); err != nil {
		return err
	}
	if err := AssertManagerNetworkProtocolV1100ProtocolConstraints(obj.VirtualMedia); err != nil {
		return err
	}
	return nil
}
