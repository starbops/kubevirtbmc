// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"time"
)

// CoolingUnitV111CoolingUnit - This is the schema definition for a cooling system component or unit, such as a coolant distribution unit (CDU) or a heat exchanger.
type CoolingUnitV111CoolingUnit struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions CoolingUnitV111Actions `json:"Actions,omitempty"`

	Assembly OdataV4IdRef `json:"Assembly,omitempty"`

	// The user-assigned asset tag for this equipment.
	AssetTag *string `json:"AssetTag,omitempty"`

	Coolant CoolingLoopCoolant `json:"Coolant,omitempty"`

	// The redundancy information for the coolant connectors in this cooling unit.
	CoolantConnectorRedundancy []RedundancyRedundantGroup `json:"CoolantConnectorRedundancy,omitempty"`

	// The cooling capacity (W) of this equipment.
	CoolingCapacityWatts *int64 `json:"CoolingCapacityWatts,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	EnvironmentMetrics OdataV4IdRef `json:"EnvironmentMetrics,omitempty"`

	EquipmentType CoolingUnitV111CoolingEquipmentType `json:"EquipmentType"`

	// The redundancy information for the groups of filters in this unit.
	FilterRedundancy []RedundancyRedundantGroup `json:"FilterRedundancy,omitempty"`

	Filters OdataV4IdRef `json:"Filters,omitempty"`

	// The firmware version of this equipment.
	FirmwareVersion string `json:"FirmwareVersion,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	LeakDetection OdataV4IdRef `json:"LeakDetection,omitempty"`

	Links CoolingUnitV111Links `json:"Links,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// The manufacturer of this equipment.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// The product model number of this equipment.
	Model *string `json:"Model,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The part number for this equipment.
	PartNumber *string `json:"PartNumber,omitempty"`

	PrimaryCoolantConnectors OdataV4IdRef `json:"PrimaryCoolantConnectors,omitempty"`

	// The production or manufacturing date of this equipment.
	ProductionDate *time.Time `json:"ProductionDate,omitempty"`

	// The redundancy information for the groups of pumps in this unit.
	PumpRedundancy []RedundancyRedundantGroup `json:"PumpRedundancy,omitempty"`

	Pumps OdataV4IdRef `json:"Pumps,omitempty"`

	Reservoirs OdataV4IdRef `json:"Reservoirs,omitempty"`

	SecondaryCoolantConnectors OdataV4IdRef `json:"SecondaryCoolantConnectors,omitempty"`

	// The serial number for this equipment.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// A user-assigned label.
	UserLabel string `json:"UserLabel,omitempty"`

	// The hardware version of this equipment.
	Version *string `json:"Version,omitempty"`
}

// AssertCoolingUnitV111CoolingUnitRequired checks if the required fields are not zero-ed
func AssertCoolingUnitV111CoolingUnitRequired(obj CoolingUnitV111CoolingUnit) error {
	elements := map[string]interface{}{
		"@odata.id":     obj.OdataId,
		"@odata.type":   obj.OdataType,
		"EquipmentType": obj.EquipmentType,
		"Id":            obj.Id,
		"Name":          obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCoolingUnitV111ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Assembly); err != nil {
		return err
	}
	if err := AssertCoolingLoopCoolantRequired(obj.Coolant); err != nil {
		return err
	}
	for _, el := range obj.CoolantConnectorRedundancy {
		if err := AssertRedundancyRedundantGroupRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.EnvironmentMetrics); err != nil {
		return err
	}
	for _, el := range obj.FilterRedundancy {
		if err := AssertRedundancyRedundantGroupRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.Filters); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.LeakDetection); err != nil {
		return err
	}
	if err := AssertCoolingUnitV111LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.PrimaryCoolantConnectors); err != nil {
		return err
	}
	for _, el := range obj.PumpRedundancy {
		if err := AssertRedundancyRedundantGroupRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.Pumps); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Reservoirs); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.SecondaryCoolantConnectors); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertCoolingUnitV111CoolingUnitConstraints checks if the values respects the defined constraints
func AssertCoolingUnitV111CoolingUnitConstraints(obj CoolingUnitV111CoolingUnit) error {
	if err := AssertCoolingUnitV111ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Assembly); err != nil {
		return err
	}
	if err := AssertCoolingLoopCoolantConstraints(obj.Coolant); err != nil {
		return err
	}
	for _, el := range obj.CoolantConnectorRedundancy {
		if err := AssertRedundancyRedundantGroupConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.EnvironmentMetrics); err != nil {
		return err
	}
	for _, el := range obj.FilterRedundancy {
		if err := AssertRedundancyRedundantGroupConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.Filters); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.LeakDetection); err != nil {
		return err
	}
	if err := AssertCoolingUnitV111LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.PrimaryCoolantConnectors); err != nil {
		return err
	}
	for _, el := range obj.PumpRedundancy {
		if err := AssertRedundancyRedundantGroupConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.Pumps); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Reservoirs); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.SecondaryCoolantConnectors); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
