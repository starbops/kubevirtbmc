// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// StorageControllerMetricsNvmeSmartMetrics - The NVMe SMART metrics.
type StorageControllerMetricsNvmeSmartMetrics struct {

	// The normalized percentage of the remaining spare capacity available.
	AvailableSparePercent *float32 `json:"AvailableSparePercent,omitempty"`

	// The available spare threshold as a normalized percentage.
	AvailableSpareThresholdPercent *float32 `json:"AvailableSpareThresholdPercent,omitempty"`

	// The composite temperature (C).
	CompositeTemperatureCelsius *float32 `json:"CompositeTemperatureCelsius,omitempty"`

	// The total time the controller is busy with I/O commands in minutes.
	ControllerBusyTimeMinutes *int64 `json:"ControllerBusyTimeMinutes,omitempty"`

	// The amount of time in minutes that the controller has been operational and that the composite temperature has been greater than or equal to the critical composite temperature threshold.
	CriticalCompositeTempTimeMinutes *int64 `json:"CriticalCompositeTempTimeMinutes,omitempty"`

	CriticalWarnings StorageControllerNvmeSmartCriticalWarnings `json:"CriticalWarnings,omitempty"`

	// The number of 512 byte data units the host has read from the controller as part of processing a SMART Data Units Read Command in units of one thousand.
	DataUnitsRead *int64 `json:"DataUnitsRead,omitempty"`

	// The number of 512 byte data units the host has written to the controller as part of processing a User Data Out Command in units of one thousand.
	DataUnitsWritten *int64 `json:"DataUnitsWritten,omitempty"`

	EGCriticalWarningSummary StorageControllerMetricsV103EgCriticalWarningSummary `json:"EGCriticalWarningSummary,omitempty"`

	// The number of SMART Host Read Commands completed by the controller.
	HostReadCommands *int64 `json:"HostReadCommands,omitempty"`

	// The number of User Data Out Commands completed by the controller.
	HostWriteCommands *int64 `json:"HostWriteCommands,omitempty"`

	// The number of occurrences where the controller detected an unrecovered data integrity error.
	MediaAndDataIntegrityErrors *int64 `json:"MediaAndDataIntegrityErrors,omitempty"`

	// The number of error information log entries over the life of the controller.
	NumberOfErrorInformationLogEntries *int64 `json:"NumberOfErrorInformationLogEntries,omitempty"`

	// The percentage of the NVM subsystem life used.
	PercentageUsed *float32 `json:"PercentageUsed,omitempty"`

	// The number of power cycles.
	PowerCycles *int64 `json:"PowerCycles,omitempty"`

	// The number of power-on hours.
	PowerOnHours *float32 `json:"PowerOnHours,omitempty"`

	// The temperature sensor readings in degree Celsius units for this storage controller.
	TemperatureSensorsCelsius []*float32 `json:"TemperatureSensorsCelsius,omitempty"`

	// The number of seconds the controller transitioned to lower power states or performed vendor-specific thermal-management actions while minimizing the impact on performance in order to attempt to reduce the composite temperature.
	ThermalMgmtTemp1TotalTimeSeconds *int64 `json:"ThermalMgmtTemp1TotalTimeSeconds,omitempty"`

	// The number of times the controller transitioned to lower power states or performed vendor-specific thermal-management actions while minimizing the impact on performance in order to attempt to reduce the composite temperature.
	ThermalMgmtTemp1TransitionCount *int64 `json:"ThermalMgmtTemp1TransitionCount,omitempty"`

	// The number of seconds the controller transitioned to lower power states or performed vendor-specific thermal-management actions regardless of the impact on performance in order to attempt to reduce the composite temperature.
	ThermalMgmtTemp2TotalTimeSeconds *int64 `json:"ThermalMgmtTemp2TotalTimeSeconds,omitempty"`

	// The number of times the controller transitioned to lower power states or performed vendor-specific thermal-management actions regardless of the impact on performance in order to attempt to reduce the composite temperature.
	ThermalMgmtTemp2TransitionCount *int64 `json:"ThermalMgmtTemp2TransitionCount,omitempty"`

	// The number of unsafe shutdowns.
	UnsafeShutdowns *int64 `json:"UnsafeShutdowns,omitempty"`

	// The amount of time in minutes that the controller has been operational and that the composite temperature has been greater than or equal to the warning composite temperature threshold.
	WarningCompositeTempTimeMinutes *int64 `json:"WarningCompositeTempTimeMinutes,omitempty"`
}

// AssertStorageControllerMetricsNvmeSmartMetricsRequired checks if the required fields are not zero-ed
func AssertStorageControllerMetricsNvmeSmartMetricsRequired(obj StorageControllerMetricsNvmeSmartMetrics) error {
	if err := AssertStorageControllerNvmeSmartCriticalWarningsRequired(obj.CriticalWarnings); err != nil {
		return err
	}
	if err := AssertStorageControllerMetricsV103EgCriticalWarningSummaryRequired(obj.EGCriticalWarningSummary); err != nil {
		return err
	}
	return nil
}

// AssertStorageControllerMetricsNvmeSmartMetricsConstraints checks if the values respects the defined constraints
func AssertStorageControllerMetricsNvmeSmartMetricsConstraints(obj StorageControllerMetricsNvmeSmartMetrics) error {
	if obj.AvailableSparePercent != nil && *obj.AvailableSparePercent < 0 {
		return &ParsingError{Param: "AvailableSparePercent", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.AvailableSparePercent != nil && *obj.AvailableSparePercent > 100 {
		return &ParsingError{Param: "AvailableSparePercent", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.AvailableSpareThresholdPercent != nil && *obj.AvailableSpareThresholdPercent < 0 {
		return &ParsingError{Param: "AvailableSpareThresholdPercent", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.AvailableSpareThresholdPercent != nil && *obj.AvailableSpareThresholdPercent > 100 {
		return &ParsingError{Param: "AvailableSpareThresholdPercent", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if err := AssertStorageControllerNvmeSmartCriticalWarningsConstraints(obj.CriticalWarnings); err != nil {
		return err
	}
	if err := AssertStorageControllerMetricsV103EgCriticalWarningSummaryConstraints(obj.EGCriticalWarningSummary); err != nil {
		return err
	}
	if obj.PercentageUsed != nil && *obj.PercentageUsed < 0 {
		return &ParsingError{Param: "PercentageUsed", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PercentageUsed != nil && *obj.PercentageUsed > 255 {
		return &ParsingError{Param: "PercentageUsed", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
