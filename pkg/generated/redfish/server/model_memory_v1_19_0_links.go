// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// MemoryV1190Links - The links to other resources that are related to this resource.
type MemoryV1190Links struct {

	// The batteries that provide power to this memory device during a power-loss event.
	Batteries []OdataV4IdRef `json:"Batteries,omitempty"`

	// The number of items in a collection.
	BatteriesodataCount int64 `json:"Batteries@odata.count,omitempty"`

	Chassis OdataV4IdRef `json:"Chassis,omitempty"`

	// An array of links to the endpoints associated with this memory.
	Endpoints []OdataV4IdRef `json:"Endpoints,omitempty"`

	// The number of items in a collection.
	EndpointsodataCount int64 `json:"Endpoints@odata.count,omitempty"`

	// An array of memory chunks providing media for this memory.
	MemoryMediaSources []OdataV4IdRef `json:"MemoryMediaSources,omitempty"`

	// The number of items in a collection.
	MemoryMediaSourcesodataCount int64 `json:"MemoryMediaSources@odata.count,omitempty"`

	// An array of memory regions providing media for this memory.
	MemoryRegionMediaSources []OdataV4IdRef `json:"MemoryRegionMediaSources,omitempty"`

	// The number of items in a collection.
	MemoryRegionMediaSourcesodataCount int64 `json:"MemoryRegionMediaSources@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An array of links to the processors associated with this memory device.
	Processors []OdataV4IdRef `json:"Processors,omitempty"`

	// The number of items in a collection.
	ProcessorsodataCount int64 `json:"Processors@odata.count,omitempty"`
}

// AssertMemoryV1190LinksRequired checks if the required fields are not zero-ed
func AssertMemoryV1190LinksRequired(obj MemoryV1190Links) error {
	for _, el := range obj.Batteries {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.Chassis); err != nil {
		return err
	}
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MemoryMediaSources {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MemoryRegionMediaSources {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Processors {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertMemoryV1190LinksConstraints checks if the values respects the defined constraints
func AssertMemoryV1190LinksConstraints(obj MemoryV1190Links) error {
	for _, el := range obj.Batteries {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.Chassis); err != nil {
		return err
	}
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MemoryMediaSources {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MemoryRegionMediaSources {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Processors {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
