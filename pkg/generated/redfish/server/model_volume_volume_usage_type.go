// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type VolumeVolumeUsageType string

// List of VolumeVolumeUsageType
const (
	VOLUMEVOLUMEUSAGETYPE_DATA                VolumeVolumeUsageType = "Data"
	VOLUMEVOLUMEUSAGETYPE_SYSTEM_DATA         VolumeVolumeUsageType = "SystemData"
	VOLUMEVOLUMEUSAGETYPE_CACHE_ONLY          VolumeVolumeUsageType = "CacheOnly"
	VOLUMEVOLUMEUSAGETYPE_SYSTEM_RESERVE      VolumeVolumeUsageType = "SystemReserve"
	VOLUMEVOLUMEUSAGETYPE_REPLICATION_RESERVE VolumeVolumeUsageType = "ReplicationReserve"
)

// AllowedVolumeVolumeUsageTypeEnumValues is all the allowed values of VolumeVolumeUsageType enum
var AllowedVolumeVolumeUsageTypeEnumValues = []VolumeVolumeUsageType{
	"Data",
	"SystemData",
	"CacheOnly",
	"SystemReserve",
	"ReplicationReserve",
}

// validVolumeVolumeUsageTypeEnumValue provides a map of VolumeVolumeUsageTypes for fast verification of use input
var validVolumeVolumeUsageTypeEnumValues = map[VolumeVolumeUsageType]struct{}{
	"Data":               {},
	"SystemData":         {},
	"CacheOnly":          {},
	"SystemReserve":      {},
	"ReplicationReserve": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeVolumeUsageType) IsValid() bool {
	_, ok := validVolumeVolumeUsageTypeEnumValues[v]
	return ok
}

// NewVolumeVolumeUsageTypeFromValue returns a pointer to a valid VolumeVolumeUsageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeVolumeUsageTypeFromValue(v string) (VolumeVolumeUsageType, error) {
	ev := VolumeVolumeUsageType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for VolumeVolumeUsageType: valid values are %v", v, AllowedVolumeVolumeUsageTypeEnumValues)
}

// AssertVolumeVolumeUsageTypeRequired checks if the required fields are not zero-ed
func AssertVolumeVolumeUsageTypeRequired(obj VolumeVolumeUsageType) error {
	return nil
}

// AssertVolumeVolumeUsageTypeConstraints checks if the values respects the defined constraints
func AssertVolumeVolumeUsageTypeConstraints(obj VolumeVolumeUsageType) error {
	return nil
}
