// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type LicenseV112LicenseType string

// List of LicenseV112LicenseType
const (
	LICENSEV112LICENSETYPE_PRODUCTION LicenseV112LicenseType = "Production"
	LICENSEV112LICENSETYPE_PROTOTYPE  LicenseV112LicenseType = "Prototype"
	LICENSEV112LICENSETYPE_TRIAL      LicenseV112LicenseType = "Trial"
)

// AllowedLicenseV112LicenseTypeEnumValues is all the allowed values of LicenseV112LicenseType enum
var AllowedLicenseV112LicenseTypeEnumValues = []LicenseV112LicenseType{
	"Production",
	"Prototype",
	"Trial",
}

// validLicenseV112LicenseTypeEnumValue provides a map of LicenseV112LicenseTypes for fast verification of use input
var validLicenseV112LicenseTypeEnumValues = map[LicenseV112LicenseType]struct{}{
	"Production": {},
	"Prototype":  {},
	"Trial":      {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LicenseV112LicenseType) IsValid() bool {
	_, ok := validLicenseV112LicenseTypeEnumValues[v]
	return ok
}

// NewLicenseV112LicenseTypeFromValue returns a pointer to a valid LicenseV112LicenseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLicenseV112LicenseTypeFromValue(v string) (LicenseV112LicenseType, error) {
	ev := LicenseV112LicenseType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for LicenseV112LicenseType: valid values are %v", v, AllowedLicenseV112LicenseTypeEnumValues)
}

// AssertLicenseV112LicenseTypeRequired checks if the required fields are not zero-ed
func AssertLicenseV112LicenseTypeRequired(obj LicenseV112LicenseType) error {
	return nil
}

// AssertLicenseV112LicenseTypeConstraints checks if the values respects the defined constraints
func AssertLicenseV112LicenseTypeConstraints(obj LicenseV112LicenseType) error {
	return nil
}
