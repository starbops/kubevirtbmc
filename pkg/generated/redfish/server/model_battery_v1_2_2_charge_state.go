// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type BatteryV122ChargeState string

// List of BatteryV122ChargeState
const (
	BATTERYV122CHARGESTATE_IDLE        BatteryV122ChargeState = "Idle"
	BATTERYV122CHARGESTATE_CHARGING    BatteryV122ChargeState = "Charging"
	BATTERYV122CHARGESTATE_DISCHARGING BatteryV122ChargeState = "Discharging"
)

// AllowedBatteryV122ChargeStateEnumValues is all the allowed values of BatteryV122ChargeState enum
var AllowedBatteryV122ChargeStateEnumValues = []BatteryV122ChargeState{
	"Idle",
	"Charging",
	"Discharging",
}

// validBatteryV122ChargeStateEnumValue provides a map of BatteryV122ChargeStates for fast verification of use input
var validBatteryV122ChargeStateEnumValues = map[BatteryV122ChargeState]struct{}{
	"Idle":        {},
	"Charging":    {},
	"Discharging": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BatteryV122ChargeState) IsValid() bool {
	_, ok := validBatteryV122ChargeStateEnumValues[v]
	return ok
}

// NewBatteryV122ChargeStateFromValue returns a pointer to a valid BatteryV122ChargeState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBatteryV122ChargeStateFromValue(v string) (BatteryV122ChargeState, error) {
	ev := BatteryV122ChargeState(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for BatteryV122ChargeState: valid values are %v", v, AllowedBatteryV122ChargeStateEnumValues)
}

// AssertBatteryV122ChargeStateRequired checks if the required fields are not zero-ed
func AssertBatteryV122ChargeStateRequired(obj BatteryV122ChargeState) error {
	return nil
}

// AssertBatteryV122ChargeStateConstraints checks if the values respects the defined constraints
func AssertBatteryV122ChargeStateConstraints(obj BatteryV122ChargeState) error {
	return nil
}
