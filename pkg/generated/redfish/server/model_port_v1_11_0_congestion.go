// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// PortV1110Congestion - The congestion properties for a CXL port.
type PortV1110Congestion struct {

	// The interval for the CXL Specification-defined 'Egress Port Congestion' mechanism to take samples in nanoseconds.
	BackpressureSampleInterval *int64 `json:"BackpressureSampleInterval,omitempty"`

	// The interval for the CXL Specification-defined 'Completion Counting' mechanism to collect the number of transmitted responses in a single counter in nanoseconds.
	CompletionCollectionInterval *int64 `json:"CompletionCollectionInterval,omitempty"`

	// Indicates whether congestion telemetry collection is enabled for this port.
	CongestionTelemetryEnabled *bool `json:"CongestionTelemetryEnabled,omitempty"`

	// The threshold for moderate egress port congestion as a percentage.
	EgressModeratePercentage *int64 `json:"EgressModeratePercentage,omitempty"`

	// The threshold for severe egress port congestion as a percentage.
	EgressSeverePercentage *int64 `json:"EgressSeverePercentage,omitempty"`

	// The estimated maximum sustained sum of requests and recent responses across the entire device, serving as the basis for the CXL Specification-defined 'QoS Limit Fraction'.
	MaxSustainedRequestCmpBias *int64 `json:"MaxSustainedRequestCmpBias,omitempty"`
}

// AssertPortV1110CongestionRequired checks if the required fields are not zero-ed
func AssertPortV1110CongestionRequired(obj PortV1110Congestion) error {
	return nil
}

// AssertPortV1110CongestionConstraints checks if the values respects the defined constraints
func AssertPortV1110CongestionConstraints(obj PortV1110Congestion) error {
	if obj.EgressModeratePercentage != nil && *obj.EgressModeratePercentage < 0 {
		return &ParsingError{Param: "EgressModeratePercentage", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.EgressModeratePercentage != nil && *obj.EgressModeratePercentage > 100 {
		return &ParsingError{Param: "EgressModeratePercentage", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.EgressSeverePercentage != nil && *obj.EgressSeverePercentage < 0 {
		return &ParsingError{Param: "EgressSeverePercentage", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.EgressSeverePercentage != nil && *obj.EgressSeverePercentage > 100 {
		return &ParsingError{Param: "EgressSeverePercentage", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
