// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type CoolingLoopV102CoolantType string

// List of CoolingLoopV102CoolantType
const (
	COOLINGLOOPV102COOLANTTYPE_WATER        CoolingLoopV102CoolantType = "Water"
	COOLINGLOOPV102COOLANTTYPE_HYDROCARBON  CoolingLoopV102CoolantType = "Hydrocarbon"
	COOLINGLOOPV102COOLANTTYPE_FLUOROCARBON CoolingLoopV102CoolantType = "Fluorocarbon"
	COOLINGLOOPV102COOLANTTYPE_DIELECTRIC   CoolingLoopV102CoolantType = "Dielectric"
)

// AllowedCoolingLoopV102CoolantTypeEnumValues is all the allowed values of CoolingLoopV102CoolantType enum
var AllowedCoolingLoopV102CoolantTypeEnumValues = []CoolingLoopV102CoolantType{
	"Water",
	"Hydrocarbon",
	"Fluorocarbon",
	"Dielectric",
}

// validCoolingLoopV102CoolantTypeEnumValue provides a map of CoolingLoopV102CoolantTypes for fast verification of use input
var validCoolingLoopV102CoolantTypeEnumValues = map[CoolingLoopV102CoolantType]struct{}{
	"Water":        {},
	"Hydrocarbon":  {},
	"Fluorocarbon": {},
	"Dielectric":   {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CoolingLoopV102CoolantType) IsValid() bool {
	_, ok := validCoolingLoopV102CoolantTypeEnumValues[v]
	return ok
}

// NewCoolingLoopV102CoolantTypeFromValue returns a pointer to a valid CoolingLoopV102CoolantType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCoolingLoopV102CoolantTypeFromValue(v string) (CoolingLoopV102CoolantType, error) {
	ev := CoolingLoopV102CoolantType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for CoolingLoopV102CoolantType: valid values are %v", v, AllowedCoolingLoopV102CoolantTypeEnumValues)
}

// AssertCoolingLoopV102CoolantTypeRequired checks if the required fields are not zero-ed
func AssertCoolingLoopV102CoolantTypeRequired(obj CoolingLoopV102CoolantType) error {
	return nil
}

// AssertCoolingLoopV102CoolantTypeConstraints checks if the values respects the defined constraints
func AssertCoolingLoopV102CoolantTypeConstraints(obj CoolingLoopV102CoolantType) error {
	return nil
}
