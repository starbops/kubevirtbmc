// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// SwitchV192Switch - The Switch schema contains properties that describe a fabric switch.
type SwitchV192Switch struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions SwitchV192Actions `json:"Actions,omitempty"`

	// The user-assigned asset tag for this switch.
	AssetTag *string `json:"AssetTag,omitempty"`

	CXL SwitchV192Cxl `json:"CXL,omitempty"`

	Certificates OdataV4IdRef `json:"Certificates,omitempty"`

	// The current internal bandwidth of this switch.
	CurrentBandwidthGbps *float32 `json:"CurrentBandwidthGbps,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The domain ID for this switch.
	DomainID *int64 `json:"DomainID,omitempty"`

	// An indication of whether this switch is enabled.
	Enabled bool `json:"Enabled,omitempty"`

	EnvironmentMetrics OdataV4IdRef `json:"EnvironmentMetrics,omitempty"`

	// The firmware version of this switch.
	FirmwareVersion *string `json:"FirmwareVersion,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	IndicatorLED ResourceIndicatorLed `json:"IndicatorLED,omitempty"`

	// An indication of whether the switch is in a managed or unmanaged state.
	IsManaged *bool `json:"IsManaged,omitempty"`

	Links SwitchV192Links `json:"Links,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive,omitempty"`

	LogServices OdataV4IdRef `json:"LogServices,omitempty"`

	// The manufacturer of this switch.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// The maximum internal bandwidth of this switch as currently configured.
	MaxBandwidthGbps *float32 `json:"MaxBandwidthGbps,omitempty"`

	// An array of DSP0274-defined measurement blocks.
	// Deprecated
	Measurements []SoftwareInventoryMeasurementBlock `json:"Measurements,omitempty"`

	Metrics OdataV4IdRef `json:"Metrics,omitempty"`

	// The product model number of this switch.
	Model *string `json:"Model,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The part number for this switch.
	PartNumber *string `json:"PartNumber,omitempty"`

	Ports OdataV4IdRef `json:"Ports,omitempty"`

	PowerState ResourcePowerState `json:"PowerState,omitempty"`

	// Redundancy information for the switches.
	Redundancy []RedundancyRedundancy `json:"Redundancy,omitempty"`

	// The number of items in a collection.
	RedundancyodataCount int64 `json:"Redundancy@odata.count,omitempty"`

	// The SKU for this switch.
	SKU *string `json:"SKU,omitempty"`

	// The serial number for this switch.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The protocols this switch supports.
	SupportedProtocols []ProtocolProtocol `json:"SupportedProtocols,omitempty"`

	SwitchType ProtocolProtocol `json:"SwitchType,omitempty"`

	// The total number of lanes, phys, or other physical transport links that this switch contains.
	TotalSwitchWidth *int64 `json:"TotalSwitchWidth,omitempty"`

	UUID string `json:"UUID,omitempty" validate:"regexp=^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
}

// AssertSwitchV192SwitchRequired checks if the required fields are not zero-ed
func AssertSwitchV192SwitchRequired(obj SwitchV192Switch) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSwitchV192ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertSwitchV192CxlRequired(obj.CXL); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Certificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.EnvironmentMetrics); err != nil {
		return err
	}
	if err := AssertSwitchV192LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.LogServices); err != nil {
		return err
	}
	for _, el := range obj.Measurements {
		if err := AssertSoftwareInventoryMeasurementBlockRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.Metrics); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Ports); err != nil {
		return err
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertSwitchV192SwitchConstraints checks if the values respects the defined constraints
func AssertSwitchV192SwitchConstraints(obj SwitchV192Switch) error {
	if err := AssertSwitchV192ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertSwitchV192CxlConstraints(obj.CXL); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Certificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.EnvironmentMetrics); err != nil {
		return err
	}
	if err := AssertSwitchV192LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.LogServices); err != nil {
		return err
	}
	for _, el := range obj.Measurements {
		if err := AssertSoftwareInventoryMeasurementBlockConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.Metrics); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Ports); err != nil {
		return err
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
