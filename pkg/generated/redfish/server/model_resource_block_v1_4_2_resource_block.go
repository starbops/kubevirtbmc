// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// ResourceBlockV142ResourceBlock - The ResourceBlock schema contains definitions of a resource block, its components, and affinity to composed devices.
type ResourceBlockV142ResourceBlock struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions ResourceBlockV142Actions `json:"Actions,omitempty"`

	// The client to which this resource block is assigned.
	Client *string `json:"Client,omitempty"`

	CompositionStatus ResourceBlockV142CompositionStatus `json:"CompositionStatus"`

	// An array of links to the computer systems available in this resource block.
	ComputerSystems []OdataV4IdRef `json:"ComputerSystems,omitempty"`

	// The number of items in a collection.
	ComputerSystemsodataCount int64 `json:"ComputerSystems@odata.count,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// An array of links to the drives available in this resource block.
	Drives []OdataV4IdRef `json:"Drives,omitempty"`

	// The number of items in a collection.
	DrivesodataCount int64 `json:"Drives@odata.count,omitempty"`

	// An array of links to the Ethernet interfaces available in this resource block.
	EthernetInterfaces []OdataV4IdRef `json:"EthernetInterfaces,omitempty"`

	// The number of items in a collection.
	EthernetInterfacesodataCount int64 `json:"EthernetInterfaces@odata.count,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links ResourceBlockV142Links `json:"Links,omitempty"`

	// An array of links to the memory available in this resource block.
	Memory []OdataV4IdRef `json:"Memory,omitempty"`

	// The number of items in a collection.
	MemoryodataCount int64 `json:"Memory@odata.count,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// An array of links to the Network Interfaces available in this resource block.
	NetworkInterfaces []OdataV4IdRef `json:"NetworkInterfaces,omitempty"`

	// The number of items in a collection.
	NetworkInterfacesodataCount int64 `json:"NetworkInterfaces@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	Pool ResourceBlockV142PoolType `json:"Pool,omitempty"`

	// An array of links to the processors available in this resource block.
	Processors []OdataV4IdRef `json:"Processors,omitempty"`

	// The number of items in a collection.
	ProcessorsodataCount int64 `json:"Processors@odata.count,omitempty"`

	// The types of resources available on this resource block.
	ResourceBlockType []ResourceBlockV142ResourceBlockType `json:"ResourceBlockType"`

	// An array of links to the simple storage available in this resource block.
	SimpleStorage []OdataV4IdRef `json:"SimpleStorage,omitempty"`

	// The number of items in a collection.
	SimpleStorageodataCount int64 `json:"SimpleStorage@odata.count,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// An array of links to the storage available in this resource block.
	Storage []OdataV4IdRef `json:"Storage,omitempty"`

	// The number of items in a collection.
	StorageodataCount int64 `json:"Storage@odata.count,omitempty"`
}

// AssertResourceBlockV142ResourceBlockRequired checks if the required fields are not zero-ed
func AssertResourceBlockV142ResourceBlockRequired(obj ResourceBlockV142ResourceBlock) error {
	elements := map[string]interface{}{
		"@odata.id":         obj.OdataId,
		"@odata.type":       obj.OdataType,
		"CompositionStatus": obj.CompositionStatus,
		"Id":                obj.Id,
		"Name":              obj.Name,
		"ResourceBlockType": obj.ResourceBlockType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertResourceBlockV142ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertResourceBlockV142CompositionStatusRequired(obj.CompositionStatus); err != nil {
		return err
	}
	for _, el := range obj.ComputerSystems {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Drives {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.EthernetInterfaces {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceBlockV142LinksRequired(obj.Links); err != nil {
		return err
	}
	for _, el := range obj.Memory {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NetworkInterfaces {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Processors {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SimpleStorage {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.Storage {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertResourceBlockV142ResourceBlockConstraints checks if the values respects the defined constraints
func AssertResourceBlockV142ResourceBlockConstraints(obj ResourceBlockV142ResourceBlock) error {
	if err := AssertResourceBlockV142ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertResourceBlockV142CompositionStatusConstraints(obj.CompositionStatus); err != nil {
		return err
	}
	for _, el := range obj.ComputerSystems {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Drives {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.EthernetInterfaces {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceBlockV142LinksConstraints(obj.Links); err != nil {
		return err
	}
	for _, el := range obj.Memory {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NetworkInterfaces {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Processors {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SimpleStorage {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.Storage {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
