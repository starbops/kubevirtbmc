// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type CertificateCertificateType string

// List of CertificateCertificateType
const (
	CERTIFICATECERTIFICATETYPE_PEM       CertificateCertificateType = "PEM"
	CERTIFICATECERTIFICATETYPE_PE_MCHAIN CertificateCertificateType = "PEMchain"
	CERTIFICATECERTIFICATETYPE_PKCS7     CertificateCertificateType = "PKCS7"
)

// AllowedCertificateCertificateTypeEnumValues is all the allowed values of CertificateCertificateType enum
var AllowedCertificateCertificateTypeEnumValues = []CertificateCertificateType{
	"PEM",
	"PEMchain",
	"PKCS7",
}

// validCertificateCertificateTypeEnumValue provides a map of CertificateCertificateTypes for fast verification of use input
var validCertificateCertificateTypeEnumValues = map[CertificateCertificateType]struct{}{
	"PEM":      {},
	"PEMchain": {},
	"PKCS7":    {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CertificateCertificateType) IsValid() bool {
	_, ok := validCertificateCertificateTypeEnumValues[v]
	return ok
}

// NewCertificateCertificateTypeFromValue returns a pointer to a valid CertificateCertificateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCertificateCertificateTypeFromValue(v string) (CertificateCertificateType, error) {
	ev := CertificateCertificateType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for CertificateCertificateType: valid values are %v", v, AllowedCertificateCertificateTypeEnumValues)
}

// AssertCertificateCertificateTypeRequired checks if the required fields are not zero-ed
func AssertCertificateCertificateTypeRequired(obj CertificateCertificateType) error {
	return nil
}

// AssertCertificateCertificateTypeConstraints checks if the values respects the defined constraints
func AssertCertificateCertificateTypeConstraints(obj CertificateCertificateType) error {
	return nil
}
