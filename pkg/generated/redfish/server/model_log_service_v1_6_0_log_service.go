// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
	"time"
)

// LogServiceV160LogService - The LogService schema contains properties for monitoring and configuring a log service.  When the Id property contains `DeviceLog`, the log contains device-resident log entries that follow the physical device when moved from system-to-system, and not a replication or subset of a system event log.
type LogServiceV160LogService struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions LogServiceV160Actions `json:"Actions,omitempty"`

	// An indication of whether the log service is configured for automatic Daylight Saving Time (DST) adjustment.
	AutoDSTEnabled bool `json:"AutoDSTEnabled,omitempty"`

	// The current date and time with UTC offset of the log service.
	DateTime *time.Time `json:"DateTime,omitempty"`

	// The time offset from UTC that the DateTime property is in `+HH:MM` format.
	DateTimeLocalOffset *string `json:"DateTimeLocalOffset,omitempty" validate:"regexp=^([-+][0-1][0-9]:[0-5][0-9])$"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	Entries OdataV4IdRef `json:"Entries,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	LogEntryType LogServiceV160LogEntryTypes `json:"LogEntryType,omitempty"`

	// The purposes of the log.
	LogPurposes []LogServiceV160LogPurpose `json:"LogPurposes,omitempty"`

	// The maximum number of log entries that this service can have.
	MaxNumberOfRecords int64 `json:"MaxNumberOfRecords,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM-specified purpose of the log if LogPurposes contains `OEM`.
	OEMLogPurpose *string `json:"OEMLogPurpose,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	OverWritePolicy LogServiceV160OverWritePolicy `json:"OverWritePolicy,omitempty"`

	// Indicates whether the log service has overflowed.
	Overflow bool `json:"Overflow,omitempty"`

	// Indicates whether the log service is persistent across a cold reset.
	Persistency bool `json:"Persistency,omitempty"`

	// An indication of whether this service is enabled.
	ServiceEnabled *bool `json:"ServiceEnabled,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// A list of syslog message filters to be logged locally.
	SyslogFilters []LogServiceV160SyslogFilter `json:"SyslogFilters,omitempty"`
}

// AssertLogServiceV160LogServiceRequired checks if the required fields are not zero-ed
func AssertLogServiceV160LogServiceRequired(obj LogServiceV160LogService) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertLogServiceV160ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Entries); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.SyslogFilters {
		if err := AssertLogServiceV160SyslogFilterRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertLogServiceV160LogServiceConstraints checks if the values respects the defined constraints
func AssertLogServiceV160LogServiceConstraints(obj LogServiceV160LogService) error {
	if err := AssertLogServiceV160ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Entries); err != nil {
		return err
	}
	if obj.MaxNumberOfRecords < 0 {
		return &ParsingError{Param: "MaxNumberOfRecords", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.SyslogFilters {
		if err := AssertLogServiceV160SyslogFilterConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
