// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"time"
)

// ApplicationV100Application - The Application schema represents an application or service running on a computer system.
type ApplicationV100Application struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions ApplicationV100Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The URIs to which this application pushes data.
	DestinationURIs []*string `json:"DestinationURIs,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links ApplicationV100Links `json:"Links,omitempty"`

	// The URIs that provide access to data or other information in this application.
	MetricsURIs []*string `json:"MetricsURIs,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The date and time when the application started running.
	StartTime *time.Time `json:"StartTime,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The vendor of this application.
	Vendor *string `json:"Vendor,omitempty"`

	// The version of this application.
	Version *string `json:"Version,omitempty"`
}

// AssertApplicationV100ApplicationRequired checks if the required fields are not zero-ed
func AssertApplicationV100ApplicationRequired(obj ApplicationV100Application) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertApplicationV100ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertApplicationV100LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertApplicationV100ApplicationConstraints checks if the values respects the defined constraints
func AssertApplicationV100ApplicationConstraints(obj ApplicationV100Application) error {
	if err := AssertApplicationV100ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertApplicationV100LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
