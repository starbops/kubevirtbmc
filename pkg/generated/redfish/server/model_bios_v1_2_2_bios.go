// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// BiosV122Bios - The Bios schema contains properties related to the BIOS attribute registry.  The attribute registry describes the system-specific BIOS attributes and actions for changing to BIOS settings.  Changes to the BIOS typically require a system reset before they take effect.  It is likely that a client finds the `@Redfish.Settings` term in this resource, and if it is found, the client makes requests to change BIOS settings by modifying the resource identified by the `@Redfish.Settings` term.
type BiosV122Bios struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions BiosV122Actions `json:"Actions,omitempty"`

	// The resource ID of the attribute registry that has the system-specific information about a BIOS resource.
	AttributeRegistry *string `json:"AttributeRegistry,omitempty"`

	// The list of BIOS attributes and their values as determined by the manufacturer or provider.
	Attributes map[string]interface{} `json:"Attributes,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links BiosV122Links `json:"Links,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An indication of whether there is a pending request to reset the BIOS attributes to default values.
	ResetBiosToDefaultsPending *bool `json:"ResetBiosToDefaultsPending,omitempty"`
}

// AssertBiosV122BiosRequired checks if the required fields are not zero-ed
func AssertBiosV122BiosRequired(obj BiosV122Bios) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertBiosV122ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertBiosV122LinksRequired(obj.Links); err != nil {
		return err
	}
	return nil
}

// AssertBiosV122BiosConstraints checks if the values respects the defined constraints
func AssertBiosV122BiosConstraints(obj BiosV122Bios) error {
	if err := AssertBiosV122ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertBiosV122LinksConstraints(obj.Links); err != nil {
		return err
	}
	return nil
}
