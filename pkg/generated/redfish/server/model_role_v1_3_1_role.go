// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// RoleV131Role - The Role schema contains a Redfish role to use in conjunction with a manager account.
type RoleV131Role struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions RoleV131Actions `json:"Actions,omitempty"`

	// An equivalent role to use when this role is restricted.
	AlternateRoleId string `json:"AlternateRoleId,omitempty"`

	// The Redfish privileges for this role.
	AssignedPrivileges []PrivilegesPrivilegeType `json:"AssignedPrivileges,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// An indication of whether the role is predefined by Redfish or an OEM rather than a client-defined role.
	IsPredefined bool `json:"IsPredefined,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The OEM privileges for this role.
	OemPrivileges []string `json:"OemPrivileges,omitempty"`

	// An indication of whether use of the role is restricted.
	Restricted bool `json:"Restricted,omitempty"`

	// The name of the role.
	RoleId string `json:"RoleId,omitempty"`
}

// AssertRoleV131RoleRequired checks if the required fields are not zero-ed
func AssertRoleV131RoleRequired(obj RoleV131Role) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertRoleV131ActionsRequired(obj.Actions); err != nil {
		return err
	}
	return nil
}

// AssertRoleV131RoleConstraints checks if the values respects the defined constraints
func AssertRoleV131RoleConstraints(obj RoleV131Role) error {
	if err := AssertRoleV131ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	return nil
}
