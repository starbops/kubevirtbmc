// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// EventServiceV1101EventService - The EventService schema contains properties for managing event subscriptions and generates the events sent to subscribers.  The resource has links to the actual collection of subscriptions, which are called event destinations.
type EventServiceV1101EventService struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions EventServiceV1101Actions `json:"Actions,omitempty"`

	// The number of times that the POST of an event is retried before the subscription terminates.  This retry occurs at the service level, which means that the HTTP POST to the event destination fails with an HTTP `4XX` or `5XX` status code or an HTTP timeout occurs this many times before the event destination subscription terminates.
	DeliveryRetryAttempts int64 `json:"DeliveryRetryAttempts,omitempty"`

	// The interval, in seconds, between retry attempts for sending any event.
	DeliveryRetryIntervalSeconds int64 `json:"DeliveryRetryIntervalSeconds,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The content types of the message that this service can send to the event destination.
	EventFormatTypes []EventDestinationEventFormatType `json:"EventFormatTypes,omitempty"`

	// The types of events to which a client can subscribe.
	// Deprecated
	EventTypesForSubscription []EventEventType `json:"EventTypesForSubscription,omitempty"`

	// An indication of whether the service supports filtering by the ExcludeMessageIds property.
	ExcludeMessageId bool `json:"ExcludeMessageId,omitempty"`

	// An indication of whether the service supports filtering by the ExcludeRegistryPrefixes property.
	ExcludeRegistryPrefix bool `json:"ExcludeRegistryPrefix,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// An indication of whether the service supports including the resource payload of the origin of condition in the event payload.
	IncludeOriginOfConditionSupported *bool `json:"IncludeOriginOfConditionSupported,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The list of the prefixes of the message registries that can be used for the RegistryPrefixes or ExcludeRegistryPrefixes properties on a subscription.  If this property is absent or contains an empty array, the service does not support RegistryPrefix-based subscriptions.
	RegistryPrefixes []*string `json:"RegistryPrefixes,omitempty"`

	// The list of @odata.type values, or schema names, that can be specified in the ResourceTypes array in a subscription.  If this property is absent or contains an empty array, the service does not support resource type-based subscriptions.
	ResourceTypes []*string `json:"ResourceTypes,omitempty"`

	SMTP EventServiceV1101Smtp `json:"SMTP,omitempty"`

	SSEFilterPropertiesSupported EventServiceV1101SseFilterPropertiesSupported `json:"SSEFilterPropertiesSupported,omitempty"`

	// The link to a URI for receiving Server-Sent Event representations for the events that this service generates.
	ServerSentEventUri string `json:"ServerSentEventUri,omitempty"`

	// An indication of whether this service is enabled.  If `false`, events are no longer published, new SSE connections cannot be established, and existing SSE connections are terminated.
	ServiceEnabled *bool `json:"ServiceEnabled,omitempty"`

	// The list of severities that can be specified in the Severities array in a subscription.
	Severities []ResourceHealth `json:"Severities,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// An indication of whether the service supports the SubordinateResources property on both event subscriptions and generated events.
	SubordinateResourcesSupported *bool `json:"SubordinateResourcesSupported,omitempty"`

	Subscriptions OdataV4IdRef `json:"Subscriptions,omitempty"`
}

// AssertEventServiceV1101EventServiceRequired checks if the required fields are not zero-ed
func AssertEventServiceV1101EventServiceRequired(obj EventServiceV1101EventService) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertEventServiceV1101ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertEventServiceV1101SmtpRequired(obj.SMTP); err != nil {
		return err
	}
	if err := AssertEventServiceV1101SseFilterPropertiesSupportedRequired(obj.SSEFilterPropertiesSupported); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Subscriptions); err != nil {
		return err
	}
	return nil
}

// AssertEventServiceV1101EventServiceConstraints checks if the values respects the defined constraints
func AssertEventServiceV1101EventServiceConstraints(obj EventServiceV1101EventService) error {
	if err := AssertEventServiceV1101ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertEventServiceV1101SmtpConstraints(obj.SMTP); err != nil {
		return err
	}
	if err := AssertEventServiceV1101SseFilterPropertiesSupportedConstraints(obj.SSEFilterPropertiesSupported); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Subscriptions); err != nil {
		return err
	}
	return nil
}
