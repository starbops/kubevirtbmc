// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// CertificateServiceV104GenerateCsrRequestBody - This action makes a certificate signing request.
type CertificateServiceV104GenerateCsrRequestBody struct {

	// The additional host names of the component to secure.
	AlternativeNames []string `json:"AlternativeNames,omitempty"`

	CertificateCollection OdataV4IdRef `json:"CertificateCollection"`

	// The challenge password to apply to the certificate for revocation requests.
	ChallengePassword string `json:"ChallengePassword,omitempty"`

	// The city or locality of the organization making the request.
	City string `json:"City"`

	// The fully qualified domain name of the component to secure.
	CommonName string `json:"CommonName"`

	// The name of the user making the request.
	ContactPerson string `json:"ContactPerson,omitempty"`

	// The two-letter country code of the organization making the request.
	Country string `json:"Country"`

	// The email address of the contact within the organization making the request.
	Email string `json:"Email,omitempty"`

	// The given name of the user making the request.
	GivenName string `json:"GivenName,omitempty"`

	// The initials of the user making the request.
	Initials string `json:"Initials,omitempty"`

	// The length of the key, in bits, if needed based on the KeyPairAlgorithm parameter value.
	KeyBitLength int64 `json:"KeyBitLength,omitempty"`

	// The curve ID to use with the key, if needed based on the KeyPairAlgorithm parameter value.
	KeyCurveId string `json:"KeyCurveId,omitempty"`

	// The type of key-pair for use with signing algorithms.
	KeyPairAlgorithm string `json:"KeyPairAlgorithm,omitempty"`

	// The usage of the key contained in the certificate.
	KeyUsage []CertificateKeyUsage `json:"KeyUsage,omitempty"`

	// The name of the organization making the request.
	Organization string `json:"Organization"`

	// The name of the unit or division of the organization making the request.
	OrganizationalUnit string `json:"OrganizationalUnit"`

	// The state, province, or region of the organization making the request.
	State string `json:"State"`

	// The surname of the user making the request.
	Surname string `json:"Surname,omitempty"`

	// The unstructured name of the subject.
	UnstructuredName string `json:"UnstructuredName,omitempty"`
}

// AssertCertificateServiceV104GenerateCsrRequestBodyRequired checks if the required fields are not zero-ed
func AssertCertificateServiceV104GenerateCsrRequestBodyRequired(obj CertificateServiceV104GenerateCsrRequestBody) error {
	elements := map[string]interface{}{
		"CertificateCollection": obj.CertificateCollection,
		"City":                  obj.City,
		"CommonName":            obj.CommonName,
		"Country":               obj.Country,
		"Organization":          obj.Organization,
		"OrganizationalUnit":    obj.OrganizationalUnit,
		"State":                 obj.State,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertOdataV4IdRefRequired(obj.CertificateCollection); err != nil {
		return err
	}
	return nil
}

// AssertCertificateServiceV104GenerateCsrRequestBodyConstraints checks if the values respects the defined constraints
func AssertCertificateServiceV104GenerateCsrRequestBodyConstraints(obj CertificateServiceV104GenerateCsrRequestBody) error {
	if err := AssertOdataV4IdRefConstraints(obj.CertificateCollection); err != nil {
		return err
	}
	return nil
}
