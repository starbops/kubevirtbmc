// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// PortV1110Port - The Port schema contains properties that describe a port of a switch, controller, chassis, or any other device that could be connected to another entity.
type PortV1110Port struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions PortV1110Actions `json:"Actions,omitempty"`

	// The number of active lanes for this interface.
	ActiveWidth int64 `json:"ActiveWidth,omitempty"`

	CXL PortV1110Cxl `json:"CXL,omitempty"`

	// The protocol versions capable of being sent over this port.
	CapableProtocolVersions []*string `json:"CapableProtocolVersions,omitempty"`

	// The protocol version being sent over this port.
	CurrentProtocolVersion *string `json:"CurrentProtocolVersion,omitempty"`

	// The current speed of this port.
	CurrentSpeedGbps *float32 `json:"CurrentSpeedGbps,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// An indication of whether this port is enabled.
	// Deprecated
	Enabled bool `json:"Enabled,omitempty"`

	EnvironmentMetrics OdataV4IdRef `json:"EnvironmentMetrics,omitempty"`

	Ethernet PortV1110EthernetProperties `json:"Ethernet,omitempty"`

	FibreChannel PortV1110FibreChannelProperties `json:"FibreChannel,omitempty"`

	// An array of maximum bandwidth allocation percentages for the functions associated with this port.
	FunctionMaxBandwidth []PortV1110FunctionMaxBandwidth `json:"FunctionMaxBandwidth,omitempty"`

	// An array of minimum bandwidth allocation percentages for the functions associated with this port.
	FunctionMinBandwidth []PortV1110FunctionMinBandwidth `json:"FunctionMinBandwidth,omitempty"`

	GenZ PortV1110GenZ `json:"GenZ,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	InfiniBand PortV1110InfiniBandProperties `json:"InfiniBand,omitempty"`

	// An indication of whether the port is enabled.
	InterfaceEnabled *bool `json:"InterfaceEnabled,omitempty"`

	// The link configuration of this port.
	LinkConfiguration []PortV1110LinkConfiguration `json:"LinkConfiguration,omitempty"`

	LinkNetworkTechnology PortV1110LinkNetworkTechnology `json:"LinkNetworkTechnology,omitempty"`

	LinkState PortV1110LinkState `json:"LinkState,omitempty"`

	LinkStatus PortV1110LinkStatus `json:"LinkStatus,omitempty"`

	// The number of link state transitions for this interface.
	LinkTransitionIndicator int64 `json:"LinkTransitionIndicator,omitempty"`

	Links PortV1110Links `json:"Links,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive,omitempty"`

	// The maximum frame size supported by the port.
	MaxFrameSize *int64 `json:"MaxFrameSize,omitempty"`

	// The maximum speed of this port as currently configured.
	MaxSpeedGbps *float32 `json:"MaxSpeedGbps,omitempty"`

	Metrics OdataV4IdRef `json:"Metrics,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The label of this port on the physical package for this port.
	PortId *string `json:"PortId,omitempty"`

	PortMedium PortV1110PortMedium `json:"PortMedium,omitempty"`

	PortProtocol ProtocolProtocol `json:"PortProtocol,omitempty"`

	PortType PortV1110PortType `json:"PortType,omitempty"`

	// The identifier of the remote port to which this port is connected.
	RemotePortId *string `json:"RemotePortId,omitempty"`

	SFP PortV1110Sfp `json:"SFP,omitempty"`

	// An indication of whether a signal is detected on this interface.
	SignalDetected *bool `json:"SignalDetected,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The number of lanes, phys, or other physical transport links that this port contains.
	Width *int64 `json:"Width,omitempty"`
}

// AssertPortV1110PortRequired checks if the required fields are not zero-ed
func AssertPortV1110PortRequired(obj PortV1110Port) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPortV1110ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertPortV1110CxlRequired(obj.CXL); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.EnvironmentMetrics); err != nil {
		return err
	}
	if err := AssertPortV1110EthernetPropertiesRequired(obj.Ethernet); err != nil {
		return err
	}
	if err := AssertPortV1110FibreChannelPropertiesRequired(obj.FibreChannel); err != nil {
		return err
	}
	for _, el := range obj.FunctionMaxBandwidth {
		if err := AssertPortV1110FunctionMaxBandwidthRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.FunctionMinBandwidth {
		if err := AssertPortV1110FunctionMinBandwidthRequired(el); err != nil {
			return err
		}
	}
	if err := AssertPortV1110GenZRequired(obj.GenZ); err != nil {
		return err
	}
	if err := AssertPortV1110InfiniBandPropertiesRequired(obj.InfiniBand); err != nil {
		return err
	}
	for _, el := range obj.LinkConfiguration {
		if err := AssertPortV1110LinkConfigurationRequired(el); err != nil {
			return err
		}
	}
	if err := AssertPortV1110LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Metrics); err != nil {
		return err
	}
	if err := AssertPortV1110SfpRequired(obj.SFP); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertPortV1110PortConstraints checks if the values respects the defined constraints
func AssertPortV1110PortConstraints(obj PortV1110Port) error {
	if err := AssertPortV1110ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertPortV1110CxlConstraints(obj.CXL); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.EnvironmentMetrics); err != nil {
		return err
	}
	if err := AssertPortV1110EthernetPropertiesConstraints(obj.Ethernet); err != nil {
		return err
	}
	if err := AssertPortV1110FibreChannelPropertiesConstraints(obj.FibreChannel); err != nil {
		return err
	}
	for _, el := range obj.FunctionMaxBandwidth {
		if err := AssertPortV1110FunctionMaxBandwidthConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.FunctionMinBandwidth {
		if err := AssertPortV1110FunctionMinBandwidthConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertPortV1110GenZConstraints(obj.GenZ); err != nil {
		return err
	}
	if err := AssertPortV1110InfiniBandPropertiesConstraints(obj.InfiniBand); err != nil {
		return err
	}
	for _, el := range obj.LinkConfiguration {
		if err := AssertPortV1110LinkConfigurationConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertPortV1110LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Metrics); err != nil {
		return err
	}
	if err := AssertPortV1110SfpConstraints(obj.SFP); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
