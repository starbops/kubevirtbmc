// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// StorageReplicaInfoV140ReplicaState : Values of ReplicaState describe the state of the relationship with respect to Replication activity.
type StorageReplicaInfoV140ReplicaState string

// List of StorageReplicaInfoV140ReplicaState
const (
	STORAGEREPLICAINFOV140REPLICASTATE_INITIALIZED    StorageReplicaInfoV140ReplicaState = "Initialized"
	STORAGEREPLICAINFOV140REPLICASTATE_UNSYNCHRONIZED StorageReplicaInfoV140ReplicaState = "Unsynchronized"
	STORAGEREPLICAINFOV140REPLICASTATE_SYNCHRONIZED   StorageReplicaInfoV140ReplicaState = "Synchronized"
	STORAGEREPLICAINFOV140REPLICASTATE_BROKEN         StorageReplicaInfoV140ReplicaState = "Broken"
	STORAGEREPLICAINFOV140REPLICASTATE_FRACTURED      StorageReplicaInfoV140ReplicaState = "Fractured"
	STORAGEREPLICAINFOV140REPLICASTATE_SPLIT          StorageReplicaInfoV140ReplicaState = "Split"
	STORAGEREPLICAINFOV140REPLICASTATE_INACTIVE       StorageReplicaInfoV140ReplicaState = "Inactive"
	STORAGEREPLICAINFOV140REPLICASTATE_SUSPENDED      StorageReplicaInfoV140ReplicaState = "Suspended"
	STORAGEREPLICAINFOV140REPLICASTATE_FAILEDOVER     StorageReplicaInfoV140ReplicaState = "Failedover"
	STORAGEREPLICAINFOV140REPLICASTATE_PREPARED       StorageReplicaInfoV140ReplicaState = "Prepared"
	STORAGEREPLICAINFOV140REPLICASTATE_ABORTED        StorageReplicaInfoV140ReplicaState = "Aborted"
	STORAGEREPLICAINFOV140REPLICASTATE_SKEWED         StorageReplicaInfoV140ReplicaState = "Skewed"
	STORAGEREPLICAINFOV140REPLICASTATE_MIXED          StorageReplicaInfoV140ReplicaState = "Mixed"
	STORAGEREPLICAINFOV140REPLICASTATE_PARTITIONED    StorageReplicaInfoV140ReplicaState = "Partitioned"
	STORAGEREPLICAINFOV140REPLICASTATE_INVALID        StorageReplicaInfoV140ReplicaState = "Invalid"
	STORAGEREPLICAINFOV140REPLICASTATE_RESTORED       StorageReplicaInfoV140ReplicaState = "Restored"
)

// AllowedStorageReplicaInfoV140ReplicaStateEnumValues is all the allowed values of StorageReplicaInfoV140ReplicaState enum
var AllowedStorageReplicaInfoV140ReplicaStateEnumValues = []StorageReplicaInfoV140ReplicaState{
	"Initialized",
	"Unsynchronized",
	"Synchronized",
	"Broken",
	"Fractured",
	"Split",
	"Inactive",
	"Suspended",
	"Failedover",
	"Prepared",
	"Aborted",
	"Skewed",
	"Mixed",
	"Partitioned",
	"Invalid",
	"Restored",
}

// validStorageReplicaInfoV140ReplicaStateEnumValue provides a map of StorageReplicaInfoV140ReplicaStates for fast verification of use input
var validStorageReplicaInfoV140ReplicaStateEnumValues = map[StorageReplicaInfoV140ReplicaState]struct{}{
	"Initialized":    {},
	"Unsynchronized": {},
	"Synchronized":   {},
	"Broken":         {},
	"Fractured":      {},
	"Split":          {},
	"Inactive":       {},
	"Suspended":      {},
	"Failedover":     {},
	"Prepared":       {},
	"Aborted":        {},
	"Skewed":         {},
	"Mixed":          {},
	"Partitioned":    {},
	"Invalid":        {},
	"Restored":       {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StorageReplicaInfoV140ReplicaState) IsValid() bool {
	_, ok := validStorageReplicaInfoV140ReplicaStateEnumValues[v]
	return ok
}

// NewStorageReplicaInfoV140ReplicaStateFromValue returns a pointer to a valid StorageReplicaInfoV140ReplicaState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStorageReplicaInfoV140ReplicaStateFromValue(v string) (StorageReplicaInfoV140ReplicaState, error) {
	ev := StorageReplicaInfoV140ReplicaState(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for StorageReplicaInfoV140ReplicaState: valid values are %v", v, AllowedStorageReplicaInfoV140ReplicaStateEnumValues)
}

// AssertStorageReplicaInfoV140ReplicaStateRequired checks if the required fields are not zero-ed
func AssertStorageReplicaInfoV140ReplicaStateRequired(obj StorageReplicaInfoV140ReplicaState) error {
	return nil
}

// AssertStorageReplicaInfoV140ReplicaStateConstraints checks if the values respects the defined constraints
func AssertStorageReplicaInfoV140ReplicaStateConstraints(obj StorageReplicaInfoV140ReplicaState) error {
	return nil
}
