// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// OutletV142Links - The links to other resources that are related to this resource.
type OutletV142Links struct {
	BranchCircuit OdataV4IdRef `json:"BranchCircuit,omitempty"`

	// Any array of links to chassis connected to this outlet.
	Chassis []OdataV4IdRef `json:"Chassis,omitempty"`

	// The number of items in a collection.
	ChassisodataCount int64 `json:"Chassis@odata.count,omitempty"`

	// An array of links to mains or input circuits powered by this outlet.
	DistributionCircuits []OdataV4IdRef `json:"DistributionCircuits,omitempty"`

	// The number of items in a collection.
	DistributionCircuitsodataCount int64 `json:"DistributionCircuits@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An array of links to the power supplies connected to this outlet.
	PowerSupplies []OdataV4IdRef `json:"PowerSupplies,omitempty"`

	// The number of items in a collection.
	PowerSuppliesodataCount int64 `json:"PowerSupplies@odata.count,omitempty"`
}

// AssertOutletV142LinksRequired checks if the required fields are not zero-ed
func AssertOutletV142LinksRequired(obj OutletV142Links) error {
	if err := AssertOdataV4IdRefRequired(obj.BranchCircuit); err != nil {
		return err
	}
	for _, el := range obj.Chassis {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DistributionCircuits {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PowerSupplies {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertOutletV142LinksConstraints checks if the values respects the defined constraints
func AssertOutletV142LinksConstraints(obj OutletV142Links) error {
	if err := AssertOdataV4IdRefConstraints(obj.BranchCircuit); err != nil {
		return err
	}
	for _, el := range obj.Chassis {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DistributionCircuits {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PowerSupplies {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
