// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// ComponentIntegrityV122SpdmGetSignedMeasurementsResponse - The SPDM signed measurement from an SPDM Responder.
type ComponentIntegrityV122SpdmGetSignedMeasurementsResponse struct {
	Certificate OdataV4IdRef `json:"Certificate,omitempty"`

	// The hashing algorithm used for generating the cryptographic signed statement.
	HashingAlgorithm string `json:"HashingAlgorithm"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// A Privacy Enhanced Mail (PEM)-encoded public key that can be used to validate the signature.
	PublicKey string `json:"PublicKey,omitempty"`

	// Base64-encoded cryptographic signed statement generated by the signer.
	SignedMeasurements string `json:"SignedMeasurements"`

	// The asymmetric signing algorithm used for generating the cryptographic signed statement.
	SigningAlgorithm string `json:"SigningAlgorithm"`

	// The SPDM version used by the SPDM Responder to generate the cryptographic signed statement.
	Version string `json:"Version"`
}

// AssertComponentIntegrityV122SpdmGetSignedMeasurementsResponseRequired checks if the required fields are not zero-ed
func AssertComponentIntegrityV122SpdmGetSignedMeasurementsResponseRequired(obj ComponentIntegrityV122SpdmGetSignedMeasurementsResponse) error {
	elements := map[string]interface{}{
		"HashingAlgorithm":   obj.HashingAlgorithm,
		"SignedMeasurements": obj.SignedMeasurements,
		"SigningAlgorithm":   obj.SigningAlgorithm,
		"Version":            obj.Version,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertOdataV4IdRefRequired(obj.Certificate); err != nil {
		return err
	}
	return nil
}

// AssertComponentIntegrityV122SpdmGetSignedMeasurementsResponseConstraints checks if the values respects the defined constraints
func AssertComponentIntegrityV122SpdmGetSignedMeasurementsResponseConstraints(obj ComponentIntegrityV122SpdmGetSignedMeasurementsResponse) error {
	if err := AssertOdataV4IdRefConstraints(obj.Certificate); err != nil {
		return err
	}
	return nil
}
