// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2024.3
 */

package server

import (
	"fmt"
)

type ContainerImageImageTypes string

// List of ContainerImageImageTypes
const (
	CONTAINERIMAGEIMAGETYPES_DOCKER_V1 ContainerImageImageTypes = "DockerV1"
	CONTAINERIMAGEIMAGETYPES_DOCKER_V2 ContainerImageImageTypes = "DockerV2"
	CONTAINERIMAGEIMAGETYPES_OCI       ContainerImageImageTypes = "OCI"
)

// AllowedContainerImageImageTypesEnumValues is all the allowed values of ContainerImageImageTypes enum
var AllowedContainerImageImageTypesEnumValues = []ContainerImageImageTypes{
	"DockerV1",
	"DockerV2",
	"OCI",
}

// validContainerImageImageTypesEnumValue provides a map of ContainerImageImageTypess for fast verification of use input
var validContainerImageImageTypesEnumValues = map[ContainerImageImageTypes]struct{}{
	"DockerV1": {},
	"DockerV2": {},
	"OCI":      {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContainerImageImageTypes) IsValid() bool {
	_, ok := validContainerImageImageTypesEnumValues[v]
	return ok
}

// NewContainerImageImageTypesFromValue returns a pointer to a valid ContainerImageImageTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContainerImageImageTypesFromValue(v string) (ContainerImageImageTypes, error) {
	ev := ContainerImageImageTypes(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ContainerImageImageTypes: valid values are %v", v, AllowedContainerImageImageTypesEnumValues)
}

// AssertContainerImageImageTypesRequired checks if the required fields are not zero-ed
func AssertContainerImageImageTypesRequired(obj ContainerImageImageTypes) error {
	return nil
}

// AssertContainerImageImageTypesConstraints checks if the values respects the defined constraints
func AssertContainerImageImageTypesConstraints(obj ContainerImageImageTypes) error {
	return nil
}
