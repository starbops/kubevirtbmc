// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type CircuitV171VoltageType string

// List of CircuitV171VoltageType
const (
	CIRCUITV171VOLTAGETYPE_AC CircuitV171VoltageType = "AC"
	CIRCUITV171VOLTAGETYPE_DC CircuitV171VoltageType = "DC"
)

// AllowedCircuitV171VoltageTypeEnumValues is all the allowed values of CircuitV171VoltageType enum
var AllowedCircuitV171VoltageTypeEnumValues = []CircuitV171VoltageType{
	"AC",
	"DC",
}

// validCircuitV171VoltageTypeEnumValue provides a map of CircuitV171VoltageTypes for fast verification of use input
var validCircuitV171VoltageTypeEnumValues = map[CircuitV171VoltageType]struct{}{
	"AC": {},
	"DC": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CircuitV171VoltageType) IsValid() bool {
	_, ok := validCircuitV171VoltageTypeEnumValues[v]
	return ok
}

// NewCircuitV171VoltageTypeFromValue returns a pointer to a valid CircuitV171VoltageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCircuitV171VoltageTypeFromValue(v string) (CircuitV171VoltageType, error) {
	ev := CircuitV171VoltageType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for CircuitV171VoltageType: valid values are %v", v, AllowedCircuitV171VoltageTypeEnumValues)
}

// AssertCircuitV171VoltageTypeRequired checks if the required fields are not zero-ed
func AssertCircuitV171VoltageTypeRequired(obj CircuitV171VoltageType) error {
	return nil
}

// AssertCircuitV171VoltageTypeConstraints checks if the values respects the defined constraints
func AssertCircuitV171VoltageTypeConstraints(obj CircuitV171VoltageType) error {
	return nil
}
