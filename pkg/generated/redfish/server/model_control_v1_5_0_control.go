// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"time"
)

// ControlV150Control - The Control schema describes a control point and its properties.
type ControlV150Control struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	// The estimated percent error of measured versus actual values.
	// Deprecated
	Accuracy *float32 `json:"Accuracy,omitempty"`

	Actions ControlV150Actions `json:"Actions,omitempty"`

	// The maximum possible setting for this control.
	AllowableMax *float32 `json:"AllowableMax,omitempty"`

	// The minimum possible setting for this control.
	AllowableMin *float32 `json:"AllowableMin,omitempty"`

	// The supported values for the set point.
	AllowableNumericValues []*float32 `json:"AllowableNumericValues,omitempty"`

	// An array of links to the sensors associated with this control.
	AssociatedSensors []OdataV4IdRef `json:"AssociatedSensors,omitempty"`

	// The number of items in a collection.
	AssociatedSensorsodataCount int64 `json:"AssociatedSensors@odata.count,omitempty"`

	// The time delay in seconds before the control will activate once the value has deviated from the set point.
	ControlDelaySeconds *float32 `json:"ControlDelaySeconds,omitempty"`

	ControlLoop ControlV150ControlLoop `json:"ControlLoop,omitempty"`

	ControlMode ControlV150ControlMode `json:"ControlMode,omitempty"`

	ControlType ControlV150ControlType `json:"ControlType,omitempty"`

	// The maximum deviation from the set point allowed before the control will activate.
	DeadBand *float32 `json:"DeadBand,omitempty"`

	// The default set point of the control.
	DefaultSetPoint *float32 `json:"DefaultSetPoint,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Implementation ControlV150ImplementationType `json:"Implementation,omitempty"`

	// The smallest increment supported for the set point.
	Increment *float32 `json:"Increment,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PhysicalContext PhysicalContextPhysicalContext `json:"PhysicalContext,omitempty"`

	PhysicalSubContext PhysicalContextPhysicalSubContext `json:"PhysicalSubContext,omitempty"`

	// An array of links to resources that this control services.
	RelatedItem []OdataV4IdRef `json:"RelatedItem,omitempty"`

	// The number of items in a collection.
	RelatedItemodataCount int64 `json:"RelatedItem@odata.count,omitempty"`

	Sensor SensorSensorExcerpt `json:"Sensor,omitempty"`

	// The desired set point of the control.
	SetPoint *float32 `json:"SetPoint,omitempty"`

	// Accuracy (+/-) of the set point.
	SetPointAccuracy *float32 `json:"SetPointAccuracy,omitempty"`

	SetPointType ControlV150SetPointType `json:"SetPointType,omitempty"`

	// The units of the set point.
	SetPointUnits *string `json:"SetPointUnits,omitempty"`

	// The date and time that the set point was changed.
	SetPointUpdateTime *time.Time `json:"SetPointUpdateTime,omitempty"`

	// The maximum set point in the allowed range.
	SettingMax *float32 `json:"SettingMax,omitempty"`

	// The minimum set point in the allowed range.
	SettingMin *float32 `json:"SettingMin,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertControlV150ControlRequired checks if the required fields are not zero-ed
func AssertControlV150ControlRequired(obj ControlV150Control) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertControlV150ActionsRequired(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.AssociatedSensors {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertControlV150ControlLoopRequired(obj.ControlLoop); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	for _, el := range obj.RelatedItem {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertSensorSensorExcerptRequired(obj.Sensor); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertControlV150ControlConstraints checks if the values respects the defined constraints
func AssertControlV150ControlConstraints(obj ControlV150Control) error {
	if err := AssertControlV150ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.AssociatedSensors {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertControlV150ControlLoopConstraints(obj.ControlLoop); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	for _, el := range obj.RelatedItem {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertSensorSensorExcerptConstraints(obj.Sensor); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
