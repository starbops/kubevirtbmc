// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// ConnectionV131AccessState : Describes the options for the access characteristics of a resource.
type ConnectionV131AccessState string

// List of ConnectionV131AccessState
const (
	CONNECTIONV131ACCESSSTATE_OPTIMIZED     ConnectionV131AccessState = "Optimized"
	CONNECTIONV131ACCESSSTATE_NON_OPTIMIZED ConnectionV131AccessState = "NonOptimized"
	CONNECTIONV131ACCESSSTATE_STANDBY       ConnectionV131AccessState = "Standby"
	CONNECTIONV131ACCESSSTATE_UNAVAILABLE   ConnectionV131AccessState = "Unavailable"
	CONNECTIONV131ACCESSSTATE_TRANSITIONING ConnectionV131AccessState = "Transitioning"
)

// AllowedConnectionV131AccessStateEnumValues is all the allowed values of ConnectionV131AccessState enum
var AllowedConnectionV131AccessStateEnumValues = []ConnectionV131AccessState{
	"Optimized",
	"NonOptimized",
	"Standby",
	"Unavailable",
	"Transitioning",
}

// validConnectionV131AccessStateEnumValue provides a map of ConnectionV131AccessStates for fast verification of use input
var validConnectionV131AccessStateEnumValues = map[ConnectionV131AccessState]struct{}{
	"Optimized":     {},
	"NonOptimized":  {},
	"Standby":       {},
	"Unavailable":   {},
	"Transitioning": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionV131AccessState) IsValid() bool {
	_, ok := validConnectionV131AccessStateEnumValues[v]
	return ok
}

// NewConnectionV131AccessStateFromValue returns a pointer to a valid ConnectionV131AccessState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionV131AccessStateFromValue(v string) (ConnectionV131AccessState, error) {
	ev := ConnectionV131AccessState(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ConnectionV131AccessState: valid values are %v", v, AllowedConnectionV131AccessStateEnumValues)
}

// AssertConnectionV131AccessStateRequired checks if the required fields are not zero-ed
func AssertConnectionV131AccessStateRequired(obj ConnectionV131AccessState) error {
	return nil
}

// AssertConnectionV131AccessStateConstraints checks if the values respects the defined constraints
func AssertConnectionV131AccessStateConstraints(obj ConnectionV131AccessState) error {
	return nil
}
