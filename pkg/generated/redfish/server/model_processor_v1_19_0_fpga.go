// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// ProcessorV1190Fpga - The properties of the FPGA device.
type ProcessorV1190Fpga struct {

	// An array of the FPGA external interfaces.
	ExternalInterfaces []ProcessorV1190ProcessorInterface `json:"ExternalInterfaces,omitempty"`

	// The FPGA firmware identifier.
	FirmwareId string `json:"FirmwareId,omitempty"`

	// The FPGA firmware manufacturer.
	FirmwareManufacturer string `json:"FirmwareManufacturer,omitempty"`

	// The FPGA firmware version.
	// Deprecated
	FirmwareVersion string `json:"FirmwareVersion,omitempty"`

	FpgaType ProcessorV1190FpgaType `json:"FpgaType,omitempty"`

	HostInterface ProcessorV1190ProcessorInterface `json:"HostInterface,omitempty"`

	// The FPGA model.
	Model string `json:"Model,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The number of PCIe Virtual Functions.
	PCIeVirtualFunctions int64 `json:"PCIeVirtualFunctions,omitempty"`

	// An indication of whether the FPGA firmware can be reprogrammed from the host by using system software.
	ProgrammableFromHost *bool `json:"ProgrammableFromHost,omitempty"`

	// An array of the FPGA reconfiguration slots.  An FPGA uses a reconfiguration slot to contain an acceleration function that can change as the FPGA is provisioned.
	ReconfigurationSlots []ProcessorV1190FpgaReconfigurationSlot `json:"ReconfigurationSlots,omitempty"`
}

// AssertProcessorV1190FpgaRequired checks if the required fields are not zero-ed
func AssertProcessorV1190FpgaRequired(obj ProcessorV1190Fpga) error {
	for _, el := range obj.ExternalInterfaces {
		if err := AssertProcessorV1190ProcessorInterfaceRequired(el); err != nil {
			return err
		}
	}
	if err := AssertProcessorV1190ProcessorInterfaceRequired(obj.HostInterface); err != nil {
		return err
	}
	for _, el := range obj.ReconfigurationSlots {
		if err := AssertProcessorV1190FpgaReconfigurationSlotRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertProcessorV1190FpgaConstraints checks if the values respects the defined constraints
func AssertProcessorV1190FpgaConstraints(obj ProcessorV1190Fpga) error {
	for _, el := range obj.ExternalInterfaces {
		if err := AssertProcessorV1190ProcessorInterfaceConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertProcessorV1190ProcessorInterfaceConstraints(obj.HostInterface); err != nil {
		return err
	}
	for _, el := range obj.ReconfigurationSlots {
		if err := AssertProcessorV1190FpgaReconfigurationSlotConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
