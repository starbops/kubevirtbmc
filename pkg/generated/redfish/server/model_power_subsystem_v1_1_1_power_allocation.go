// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// PowerSubsystemV111PowerAllocation - Power allocation for a subsystem.
type PowerSubsystemV111PowerAllocation struct {

	// The total amount of power that has been allocated or budgeted to this subsystem.
	AllocatedWatts *float32 `json:"AllocatedWatts,omitempty"`

	// The potential power, in watt units, that the subsystem requests, which might be higher than the current level being consumed because the requested power includes a budget that the subsystem wants for future use.
	RequestedWatts *float32 `json:"RequestedWatts,omitempty"`
}

// AssertPowerSubsystemV111PowerAllocationRequired checks if the required fields are not zero-ed
func AssertPowerSubsystemV111PowerAllocationRequired(obj PowerSubsystemV111PowerAllocation) error {
	return nil
}

// AssertPowerSubsystemV111PowerAllocationConstraints checks if the values respects the defined constraints
func AssertPowerSubsystemV111PowerAllocationConstraints(obj PowerSubsystemV111PowerAllocation) error {
	if obj.AllocatedWatts != nil && *obj.AllocatedWatts < 0 {
		return &ParsingError{Param: "AllocatedWatts", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.RequestedWatts != nil && *obj.RequestedWatts < 0 {
		return &ParsingError{Param: "RequestedWatts", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
