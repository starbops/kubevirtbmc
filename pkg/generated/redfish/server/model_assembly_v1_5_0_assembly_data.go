// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"time"
)

type AssemblyV150AssemblyData struct {

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	Actions AssemblyV150AssemblyDataActions `json:"Actions,omitempty"`

	// The URI at which to access an image of the assembly information.
	BinaryDataURI *string `json:"BinaryDataURI,omitempty"`

	// The description of the assembly.
	Description *string `json:"Description,omitempty"`

	// The engineering change level of the assembly.
	EngineeringChangeLevel *string `json:"EngineeringChangeLevel,omitempty"`

	// The manufacturing country of origin, using the ISO 3166-1 country code.
	ISOCountryCodeOfOrigin *string `json:"ISOCountryCodeOfOrigin,omitempty" validate:"regexp=^([A-Z]{2}|[A-Z]{3})$"`

	Location ResourceLocation `json:"Location,omitempty"`

	// An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive,omitempty"`

	// The unique identifier for the member within an array.
	MemberId string `json:"MemberId"`

	// The model number of the assembly.
	Model *string `json:"Model,omitempty"`

	// The name of the assembly.
	Name *string `json:"Name,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The part number of the assembly.
	PartNumber *string `json:"PartNumber,omitempty"`

	PhysicalContext PhysicalContextPhysicalContext `json:"PhysicalContext,omitempty"`

	// The producer or manufacturer of the assembly.
	Producer *string `json:"Producer,omitempty"`

	// The production date of the assembly.
	ProductionDate *time.Time `json:"ProductionDate,omitempty"`

	// An indication of whether the component associated this assembly can be independently replaced as allowed by the vendor's replacement policy.
	Replaceable *bool `json:"Replaceable,omitempty"`

	// The SKU of the assembly.
	SKU *string `json:"SKU,omitempty"`

	// The serial number of the assembly.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	// The spare part number of the assembly.
	SparePartNumber *string `json:"SparePartNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The vendor of the assembly.
	Vendor *string `json:"Vendor,omitempty"`

	// The hardware version of the assembly.
	Version *string `json:"Version,omitempty"`
}

// AssertAssemblyV150AssemblyDataRequired checks if the required fields are not zero-ed
func AssertAssemblyV150AssemblyDataRequired(obj AssemblyV150AssemblyData) error {
	elements := map[string]interface{}{
		"@odata.id": obj.OdataId,
		"MemberId":  obj.MemberId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertAssemblyV150AssemblyDataActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertAssemblyV150AssemblyDataConstraints checks if the values respects the defined constraints
func AssertAssemblyV150AssemblyDataConstraints(obj AssemblyV150AssemblyData) error {
	if err := AssertAssemblyV150AssemblyDataActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
