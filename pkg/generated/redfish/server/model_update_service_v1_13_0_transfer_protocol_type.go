// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type UpdateServiceV1130TransferProtocolType string

// List of UpdateServiceV1130TransferProtocolType
const (
	UPDATESERVICEV1130TRANSFERPROTOCOLTYPE_CIFS  UpdateServiceV1130TransferProtocolType = "CIFS"
	UPDATESERVICEV1130TRANSFERPROTOCOLTYPE_FTP   UpdateServiceV1130TransferProtocolType = "FTP"
	UPDATESERVICEV1130TRANSFERPROTOCOLTYPE_SFTP  UpdateServiceV1130TransferProtocolType = "SFTP"
	UPDATESERVICEV1130TRANSFERPROTOCOLTYPE_HTTP  UpdateServiceV1130TransferProtocolType = "HTTP"
	UPDATESERVICEV1130TRANSFERPROTOCOLTYPE_HTTPS UpdateServiceV1130TransferProtocolType = "HTTPS"
	UPDATESERVICEV1130TRANSFERPROTOCOLTYPE_NSF   UpdateServiceV1130TransferProtocolType = "NSF"
	UPDATESERVICEV1130TRANSFERPROTOCOLTYPE_SCP   UpdateServiceV1130TransferProtocolType = "SCP"
	UPDATESERVICEV1130TRANSFERPROTOCOLTYPE_TFTP  UpdateServiceV1130TransferProtocolType = "TFTP"
	UPDATESERVICEV1130TRANSFERPROTOCOLTYPE_OEM   UpdateServiceV1130TransferProtocolType = "OEM"
	UPDATESERVICEV1130TRANSFERPROTOCOLTYPE_NFS   UpdateServiceV1130TransferProtocolType = "NFS"
)

// AllowedUpdateServiceV1130TransferProtocolTypeEnumValues is all the allowed values of UpdateServiceV1130TransferProtocolType enum
var AllowedUpdateServiceV1130TransferProtocolTypeEnumValues = []UpdateServiceV1130TransferProtocolType{
	"CIFS",
	"FTP",
	"SFTP",
	"HTTP",
	"HTTPS",
	"NSF",
	"SCP",
	"TFTP",
	"OEM",
	"NFS",
}

// validUpdateServiceV1130TransferProtocolTypeEnumValue provides a map of UpdateServiceV1130TransferProtocolTypes for fast verification of use input
var validUpdateServiceV1130TransferProtocolTypeEnumValues = map[UpdateServiceV1130TransferProtocolType]struct{}{
	"CIFS":  {},
	"FTP":   {},
	"SFTP":  {},
	"HTTP":  {},
	"HTTPS": {},
	"NSF":   {},
	"SCP":   {},
	"TFTP":  {},
	"OEM":   {},
	"NFS":   {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UpdateServiceV1130TransferProtocolType) IsValid() bool {
	_, ok := validUpdateServiceV1130TransferProtocolTypeEnumValues[v]
	return ok
}

// NewUpdateServiceV1130TransferProtocolTypeFromValue returns a pointer to a valid UpdateServiceV1130TransferProtocolType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUpdateServiceV1130TransferProtocolTypeFromValue(v string) (UpdateServiceV1130TransferProtocolType, error) {
	ev := UpdateServiceV1130TransferProtocolType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for UpdateServiceV1130TransferProtocolType: valid values are %v", v, AllowedUpdateServiceV1130TransferProtocolTypeEnumValues)
}

// AssertUpdateServiceV1130TransferProtocolTypeRequired checks if the required fields are not zero-ed
func AssertUpdateServiceV1130TransferProtocolTypeRequired(obj UpdateServiceV1130TransferProtocolType) error {
	return nil
}

// AssertUpdateServiceV1130TransferProtocolTypeConstraints checks if the values respects the defined constraints
func AssertUpdateServiceV1130TransferProtocolTypeConstraints(obj UpdateServiceV1130TransferProtocolType) error {
	return nil
}
