// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// SensorV191SensorPowerExcerpt - The `Sensor` schema describes a sensor and its properties.
type SensorV191SensorPowerExcerpt struct {

	// The product of voltage and current for an AC circuit, in volt-ampere units.
	ApparentVA *float32 `json:"ApparentVA,omitempty"`

	// The link to the resource that provides the data for this sensor.
	DataSourceUri *string `json:"DataSourceUri,omitempty"`

	// The phase angle (degrees) between the current and voltage waveforms.
	PhaseAngleDegrees *float32 `json:"PhaseAngleDegrees,omitempty"`

	// The power factor for this sensor.
	PowerFactor *float32 `json:"PowerFactor,omitempty"`

	// The square root of the difference term of squared apparent VA and squared power (Reading) for a circuit, in VAR units.
	ReactiveVAR *float32 `json:"ReactiveVAR,omitempty"`

	// The sensor value.
	Reading *float32 `json:"Reading,omitempty"`
}

// AssertSensorV191SensorPowerExcerptRequired checks if the required fields are not zero-ed
func AssertSensorV191SensorPowerExcerptRequired(obj SensorV191SensorPowerExcerpt) error {
	return nil
}

// AssertSensorV191SensorPowerExcerptConstraints checks if the values respects the defined constraints
func AssertSensorV191SensorPowerExcerptConstraints(obj SensorV191SensorPowerExcerpt) error {
	if obj.PhaseAngleDegrees != nil && *obj.PhaseAngleDegrees < -90 {
		return &ParsingError{Param: "PhaseAngleDegrees", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PhaseAngleDegrees != nil && *obj.PhaseAngleDegrees > 90 {
		return &ParsingError{Param: "PhaseAngleDegrees", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.PowerFactor != nil && *obj.PowerFactor < -1 {
		return &ParsingError{Param: "PowerFactor", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PowerFactor != nil && *obj.PowerFactor > 1 {
		return &ParsingError{Param: "PowerFactor", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
