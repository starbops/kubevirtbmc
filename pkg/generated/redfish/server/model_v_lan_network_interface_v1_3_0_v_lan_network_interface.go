// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// VLanNetworkInterfaceV130VLanNetworkInterface - The VLanNetworkInterface schema describes a VLAN network instance that is available on a manager, system, or other device.
type VLanNetworkInterfaceV130VLanNetworkInterface struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions VLanNetworkInterfaceV130Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An indication of whether this VLAN is enabled for this interface.
	VLANEnable *bool `json:"VLANEnable,omitempty"`

	VLANId int64 `json:"VLANId,omitempty"`

	VLANPriority int64 `json:"VLANPriority,omitempty"`
}

// AssertVLanNetworkInterfaceV130VLanNetworkInterfaceRequired checks if the required fields are not zero-ed
func AssertVLanNetworkInterfaceV130VLanNetworkInterfaceRequired(obj VLanNetworkInterfaceV130VLanNetworkInterface) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertVLanNetworkInterfaceV130ActionsRequired(obj.Actions); err != nil {
		return err
	}
	return nil
}

// AssertVLanNetworkInterfaceV130VLanNetworkInterfaceConstraints checks if the values respects the defined constraints
func AssertVLanNetworkInterfaceV130VLanNetworkInterfaceConstraints(obj VLanNetworkInterfaceV130VLanNetworkInterface) error {
	if err := AssertVLanNetworkInterfaceV130ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if obj.VLANId < 0 {
		return &ParsingError{Param: "VLANId", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.VLANId > 4094 {
		return &ParsingError{Param: "VLANId", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.VLANPriority < 0 {
		return &ParsingError{Param: "VLANPriority", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.VLANPriority > 7 {
		return &ParsingError{Param: "VLANPriority", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
