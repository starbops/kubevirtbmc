// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type CircuitPowerState string

// List of CircuitPowerState
const (
	CIRCUITPOWERSTATE_ON          CircuitPowerState = "On"
	CIRCUITPOWERSTATE_OFF         CircuitPowerState = "Off"
	CIRCUITPOWERSTATE_POWER_CYCLE CircuitPowerState = "PowerCycle"
)

// AllowedCircuitPowerStateEnumValues is all the allowed values of CircuitPowerState enum
var AllowedCircuitPowerStateEnumValues = []CircuitPowerState{
	"On",
	"Off",
	"PowerCycle",
}

// validCircuitPowerStateEnumValue provides a map of CircuitPowerStates for fast verification of use input
var validCircuitPowerStateEnumValues = map[CircuitPowerState]struct{}{
	"On":         {},
	"Off":        {},
	"PowerCycle": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CircuitPowerState) IsValid() bool {
	_, ok := validCircuitPowerStateEnumValues[v]
	return ok
}

// NewCircuitPowerStateFromValue returns a pointer to a valid CircuitPowerState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCircuitPowerStateFromValue(v string) (CircuitPowerState, error) {
	ev := CircuitPowerState(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for CircuitPowerState: valid values are %v", v, AllowedCircuitPowerStateEnumValues)
}

// AssertCircuitPowerStateRequired checks if the required fields are not zero-ed
func AssertCircuitPowerStateRequired(obj CircuitPowerState) error {
	return nil
}

// AssertCircuitPowerStateConstraints checks if the values respects the defined constraints
func AssertCircuitPowerStateConstraints(obj CircuitPowerState) error {
	return nil
}
