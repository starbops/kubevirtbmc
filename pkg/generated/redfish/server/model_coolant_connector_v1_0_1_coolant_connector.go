// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// CoolantConnectorV101CoolantConnector - This schema describes a liquid coolant connector, including any associated instrumentation.
type CoolantConnectorV101CoolantConnector struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions CoolantConnectorV101Actions `json:"Actions,omitempty"`

	Coolant CoolingLoopCoolant `json:"Coolant,omitempty"`

	CoolantConnectorType CoolantConnectorV101CoolantConnectorType `json:"CoolantConnectorType,omitempty"`

	// The name of the cooling loop attached to this interface.
	CoolingLoopName *string `json:"CoolingLoopName,omitempty"`

	// The link to the application that manages the cooling loop.
	CoolingManagerURI *string `json:"CoolingManagerURI,omitempty"`

	DeltaPressurekPa SensorSensorExcerpt `json:"DeltaPressurekPa,omitempty"`

	DeltaTemperatureCelsius SensorSensorExcerpt `json:"DeltaTemperatureCelsius,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	FlowLitersPerMinute SensorSensorExcerpt `json:"FlowLitersPerMinute,omitempty"`

	HeatRemovedkW SensorSensorExcerpt `json:"HeatRemovedkW,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links CoolantConnectorV101Links `json:"Links,omitempty"`

	// An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The rated liquid flow (L/min) for this loop interface.
	RatedFlowLitersPerMinute *float32 `json:"RatedFlowLitersPerMinute,omitempty"`

	// The pressure (kPa) at which the rated liquid flow is valid.
	RatedFlowPressurekPa *float32 `json:"RatedFlowPressurekPa,omitempty"`

	// The rated pressure (kPa) for this connector.
	RatedPressurekPa *float32 `json:"RatedPressurekPa,omitempty"`

	ReturnPressurekPa SensorSensorExcerpt `json:"ReturnPressurekPa,omitempty"`

	ReturnTemperatureCelsius SensorSensorExcerpt `json:"ReturnTemperatureCelsius,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	SupplyPressurekPa SensorSensorExcerpt `json:"SupplyPressurekPa,omitempty"`

	SupplyTemperatureCelsius SensorSensorExcerpt `json:"SupplyTemperatureCelsius,omitempty"`
}

// AssertCoolantConnectorV101CoolantConnectorRequired checks if the required fields are not zero-ed
func AssertCoolantConnectorV101CoolantConnectorRequired(obj CoolantConnectorV101CoolantConnector) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCoolantConnectorV101ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertCoolingLoopCoolantRequired(obj.Coolant); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.DeltaPressurekPa); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.DeltaTemperatureCelsius); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.FlowLitersPerMinute); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.HeatRemovedkW); err != nil {
		return err
	}
	if err := AssertCoolantConnectorV101LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.ReturnPressurekPa); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.ReturnTemperatureCelsius); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.SupplyPressurekPa); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.SupplyTemperatureCelsius); err != nil {
		return err
	}
	return nil
}

// AssertCoolantConnectorV101CoolantConnectorConstraints checks if the values respects the defined constraints
func AssertCoolantConnectorV101CoolantConnectorConstraints(obj CoolantConnectorV101CoolantConnector) error {
	if err := AssertCoolantConnectorV101ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertCoolingLoopCoolantConstraints(obj.Coolant); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptConstraints(obj.DeltaPressurekPa); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptConstraints(obj.DeltaTemperatureCelsius); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptConstraints(obj.FlowLitersPerMinute); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptConstraints(obj.HeatRemovedkW); err != nil {
		return err
	}
	if err := AssertCoolantConnectorV101LinksConstraints(obj.Links); err != nil {
		return err
	}
	if obj.RatedFlowLitersPerMinute != nil && *obj.RatedFlowLitersPerMinute < 0 {
		return &ParsingError{Param: "RatedFlowLitersPerMinute", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.RatedFlowPressurekPa != nil && *obj.RatedFlowPressurekPa < 0 {
		return &ParsingError{Param: "RatedFlowPressurekPa", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.RatedPressurekPa != nil && *obj.RatedPressurekPa < 0 {
		return &ParsingError{Param: "RatedPressurekPa", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertSensorSensorExcerptConstraints(obj.ReturnPressurekPa); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptConstraints(obj.ReturnTemperatureCelsius); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptConstraints(obj.SupplyPressurekPa); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptConstraints(obj.SupplyTemperatureCelsius); err != nil {
		return err
	}
	return nil
}
