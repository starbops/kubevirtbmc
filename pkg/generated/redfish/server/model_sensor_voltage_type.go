// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type SensorVoltageType string

// List of SensorVoltageType
const (
	SENSORVOLTAGETYPE_AC SensorVoltageType = "AC"
	SENSORVOLTAGETYPE_DC SensorVoltageType = "DC"
)

// AllowedSensorVoltageTypeEnumValues is all the allowed values of SensorVoltageType enum
var AllowedSensorVoltageTypeEnumValues = []SensorVoltageType{
	"AC",
	"DC",
}

// validSensorVoltageTypeEnumValue provides a map of SensorVoltageTypes for fast verification of use input
var validSensorVoltageTypeEnumValues = map[SensorVoltageType]struct{}{
	"AC": {},
	"DC": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SensorVoltageType) IsValid() bool {
	_, ok := validSensorVoltageTypeEnumValues[v]
	return ok
}

// NewSensorVoltageTypeFromValue returns a pointer to a valid SensorVoltageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSensorVoltageTypeFromValue(v string) (SensorVoltageType, error) {
	ev := SensorVoltageType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for SensorVoltageType: valid values are %v", v, AllowedSensorVoltageTypeEnumValues)
}

// AssertSensorVoltageTypeRequired checks if the required fields are not zero-ed
func AssertSensorVoltageTypeRequired(obj SensorVoltageType) error {
	return nil
}

// AssertSensorVoltageTypeConstraints checks if the values respects the defined constraints
func AssertSensorVoltageTypeConstraints(obj SensorVoltageType) error {
	return nil
}
