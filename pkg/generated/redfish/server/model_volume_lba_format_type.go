// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// VolumeLbaFormatType : LBAFormatType is defined in the NVMe specification set. This field indicates the LBA data size supported; implementations may report up to 16 values. For more details refer to the appropriate NVMe specification.
type VolumeLbaFormatType string

// List of VolumeLbaFormatType
const (
	VOLUMELBAFORMATTYPE_LBA_FORMAT0  VolumeLbaFormatType = "LBAFormat0"
	VOLUMELBAFORMATTYPE_LBA_FORMAT1  VolumeLbaFormatType = "LBAFormat1"
	VOLUMELBAFORMATTYPE_LBA_FORMAT2  VolumeLbaFormatType = "LBAFormat2"
	VOLUMELBAFORMATTYPE_LBA_FORMAT3  VolumeLbaFormatType = "LBAFormat3"
	VOLUMELBAFORMATTYPE_LBA_FORMAT4  VolumeLbaFormatType = "LBAFormat4"
	VOLUMELBAFORMATTYPE_LBA_FORMAT5  VolumeLbaFormatType = "LBAFormat5"
	VOLUMELBAFORMATTYPE_LBA_FORMAT6  VolumeLbaFormatType = "LBAFormat6"
	VOLUMELBAFORMATTYPE_LBA_FORMAT7  VolumeLbaFormatType = "LBAFormat7"
	VOLUMELBAFORMATTYPE_LBA_FORMAT8  VolumeLbaFormatType = "LBAFormat8"
	VOLUMELBAFORMATTYPE_LBA_FORMAT9  VolumeLbaFormatType = "LBAFormat9"
	VOLUMELBAFORMATTYPE_LBA_FORMAT10 VolumeLbaFormatType = "LBAFormat10"
	VOLUMELBAFORMATTYPE_LBA_FORMAT11 VolumeLbaFormatType = "LBAFormat11"
	VOLUMELBAFORMATTYPE_LBA_FORMAT12 VolumeLbaFormatType = "LBAFormat12"
	VOLUMELBAFORMATTYPE_LBA_FORMAT13 VolumeLbaFormatType = "LBAFormat13"
	VOLUMELBAFORMATTYPE_LBA_FORMAT14 VolumeLbaFormatType = "LBAFormat14"
	VOLUMELBAFORMATTYPE_LBA_FORMAT15 VolumeLbaFormatType = "LBAFormat15"
)

// AllowedVolumeLbaFormatTypeEnumValues is all the allowed values of VolumeLbaFormatType enum
var AllowedVolumeLbaFormatTypeEnumValues = []VolumeLbaFormatType{
	"LBAFormat0",
	"LBAFormat1",
	"LBAFormat2",
	"LBAFormat3",
	"LBAFormat4",
	"LBAFormat5",
	"LBAFormat6",
	"LBAFormat7",
	"LBAFormat8",
	"LBAFormat9",
	"LBAFormat10",
	"LBAFormat11",
	"LBAFormat12",
	"LBAFormat13",
	"LBAFormat14",
	"LBAFormat15",
}

// validVolumeLbaFormatTypeEnumValue provides a map of VolumeLbaFormatTypes for fast verification of use input
var validVolumeLbaFormatTypeEnumValues = map[VolumeLbaFormatType]struct{}{
	"LBAFormat0":  {},
	"LBAFormat1":  {},
	"LBAFormat2":  {},
	"LBAFormat3":  {},
	"LBAFormat4":  {},
	"LBAFormat5":  {},
	"LBAFormat6":  {},
	"LBAFormat7":  {},
	"LBAFormat8":  {},
	"LBAFormat9":  {},
	"LBAFormat10": {},
	"LBAFormat11": {},
	"LBAFormat12": {},
	"LBAFormat13": {},
	"LBAFormat14": {},
	"LBAFormat15": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeLbaFormatType) IsValid() bool {
	_, ok := validVolumeLbaFormatTypeEnumValues[v]
	return ok
}

// NewVolumeLbaFormatTypeFromValue returns a pointer to a valid VolumeLbaFormatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeLbaFormatTypeFromValue(v string) (VolumeLbaFormatType, error) {
	ev := VolumeLbaFormatType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for VolumeLbaFormatType: valid values are %v", v, AllowedVolumeLbaFormatTypeEnumValues)
}

// AssertVolumeLbaFormatTypeRequired checks if the required fields are not zero-ed
func AssertVolumeLbaFormatTypeRequired(obj VolumeLbaFormatType) error {
	return nil
}

// AssertVolumeLbaFormatTypeConstraints checks if the values respects the defined constraints
func AssertVolumeLbaFormatTypeConstraints(obj VolumeLbaFormatType) error {
	return nil
}
