// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ControlV150ControlType string

// List of ControlV150ControlType
const (
	CONTROLV150CONTROLTYPE_TEMPERATURE   ControlV150ControlType = "Temperature"
	CONTROLV150CONTROLTYPE_POWER         ControlV150ControlType = "Power"
	CONTROLV150CONTROLTYPE_FREQUENCY     ControlV150ControlType = "Frequency"
	CONTROLV150CONTROLTYPE_FREQUENCY_MHZ ControlV150ControlType = "FrequencyMHz"
	CONTROLV150CONTROLTYPE_PRESSURE      ControlV150ControlType = "Pressure"
	CONTROLV150CONTROLTYPE_PRESSUREK_PA  ControlV150ControlType = "PressurekPa"
	CONTROLV150CONTROLTYPE_VALVE         ControlV150ControlType = "Valve"
	CONTROLV150CONTROLTYPE_PERCENT       ControlV150ControlType = "Percent"
	CONTROLV150CONTROLTYPE_DUTY_CYCLE    ControlV150ControlType = "DutyCycle"
)

// AllowedControlV150ControlTypeEnumValues is all the allowed values of ControlV150ControlType enum
var AllowedControlV150ControlTypeEnumValues = []ControlV150ControlType{
	"Temperature",
	"Power",
	"Frequency",
	"FrequencyMHz",
	"Pressure",
	"PressurekPa",
	"Valve",
	"Percent",
	"DutyCycle",
}

// validControlV150ControlTypeEnumValue provides a map of ControlV150ControlTypes for fast verification of use input
var validControlV150ControlTypeEnumValues = map[ControlV150ControlType]struct{}{
	"Temperature":  {},
	"Power":        {},
	"Frequency":    {},
	"FrequencyMHz": {},
	"Pressure":     {},
	"PressurekPa":  {},
	"Valve":        {},
	"Percent":      {},
	"DutyCycle":    {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ControlV150ControlType) IsValid() bool {
	_, ok := validControlV150ControlTypeEnumValues[v]
	return ok
}

// NewControlV150ControlTypeFromValue returns a pointer to a valid ControlV150ControlType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewControlV150ControlTypeFromValue(v string) (ControlV150ControlType, error) {
	ev := ControlV150ControlType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ControlV150ControlType: valid values are %v", v, AllowedControlV150ControlTypeEnumValues)
}

// AssertControlV150ControlTypeRequired checks if the required fields are not zero-ed
func AssertControlV150ControlTypeRequired(obj ControlV150ControlType) error {
	return nil
}

// AssertControlV150ControlTypeConstraints checks if the values respects the defined constraints
func AssertControlV150ControlTypeConstraints(obj ControlV150ControlType) error {
	return nil
}
