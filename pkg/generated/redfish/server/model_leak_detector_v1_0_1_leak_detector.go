// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// LeakDetectorV101LeakDetector - The LeakDetector schema describes a state-based or digital-value leak detector and its properties.
type LeakDetectorV101LeakDetector struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions LeakDetectorV101Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	DetectorState ResourceHealth `json:"DetectorState,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	LeakDetectorType LeakDetectorV101LeakDetectorType `json:"LeakDetectorType,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// The manufacturer of this leak detector.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// The model number of the leak detector.
	Model *string `json:"Model,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The part number of the leak detector.
	PartNumber *string `json:"PartNumber,omitempty"`

	PhysicalContext PhysicalContextPhysicalContext `json:"PhysicalContext,omitempty"`

	PhysicalSubContext PhysicalContextPhysicalSubContext `json:"PhysicalSubContext,omitempty"`

	// The SKU of the leak detector.
	SKU *string `json:"SKU,omitempty"`

	// The time interval between readings of the physical leak detector.
	SensingFrequency *float32 `json:"SensingFrequency,omitempty"`

	// The serial number of the leak detector.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	// The spare part number of the leak detector.
	SparePartNumber *string `json:"SparePartNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertLeakDetectorV101LeakDetectorRequired checks if the required fields are not zero-ed
func AssertLeakDetectorV101LeakDetectorRequired(obj LeakDetectorV101LeakDetector) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertLeakDetectorV101ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertLeakDetectorV101LeakDetectorConstraints checks if the values respects the defined constraints
func AssertLeakDetectorV101LeakDetectorConstraints(obj LeakDetectorV101LeakDetector) error {
	if err := AssertLeakDetectorV101ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
