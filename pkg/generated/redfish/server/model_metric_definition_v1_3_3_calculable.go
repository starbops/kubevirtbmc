// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// MetricDefinitionV133Calculable : The types of calculations that can be applied to the metric reading.  Provides information to the client on the suitability of calculation using the metric reading.
type MetricDefinitionV133Calculable string

// List of MetricDefinitionV133Calculable
const (
	METRICDEFINITIONV133CALCULABLE_NON_CALCULATABLE MetricDefinitionV133Calculable = "NonCalculatable"
	METRICDEFINITIONV133CALCULABLE_SUMMABLE         MetricDefinitionV133Calculable = "Summable"
	METRICDEFINITIONV133CALCULABLE_NON_SUMMABLE     MetricDefinitionV133Calculable = "NonSummable"
)

// AllowedMetricDefinitionV133CalculableEnumValues is all the allowed values of MetricDefinitionV133Calculable enum
var AllowedMetricDefinitionV133CalculableEnumValues = []MetricDefinitionV133Calculable{
	"NonCalculatable",
	"Summable",
	"NonSummable",
}

// validMetricDefinitionV133CalculableEnumValue provides a map of MetricDefinitionV133Calculables for fast verification of use input
var validMetricDefinitionV133CalculableEnumValues = map[MetricDefinitionV133Calculable]struct{}{
	"NonCalculatable": {},
	"Summable":        {},
	"NonSummable":     {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricDefinitionV133Calculable) IsValid() bool {
	_, ok := validMetricDefinitionV133CalculableEnumValues[v]
	return ok
}

// NewMetricDefinitionV133CalculableFromValue returns a pointer to a valid MetricDefinitionV133Calculable
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricDefinitionV133CalculableFromValue(v string) (MetricDefinitionV133Calculable, error) {
	ev := MetricDefinitionV133Calculable(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for MetricDefinitionV133Calculable: valid values are %v", v, AllowedMetricDefinitionV133CalculableEnumValues)
}

// AssertMetricDefinitionV133CalculableRequired checks if the required fields are not zero-ed
func AssertMetricDefinitionV133CalculableRequired(obj MetricDefinitionV133Calculable) error {
	return nil
}

// AssertMetricDefinitionV133CalculableConstraints checks if the values respects the defined constraints
func AssertMetricDefinitionV133CalculableConstraints(obj MetricDefinitionV133Calculable) error {
	return nil
}
