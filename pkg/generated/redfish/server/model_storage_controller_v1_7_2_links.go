// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// StorageControllerV172Links - The links to other resources that are related to this resource.
type StorageControllerV172Links struct {

	// An array of links to volumes that are attached to this controller instance.
	AttachedVolumes []OdataV4IdRef `json:"AttachedVolumes,omitempty"`

	// The number of items in a collection.
	AttachedVolumesodataCount int64 `json:"AttachedVolumes@odata.count,omitempty"`

	// The batteries that provide power to this storage controller during a power-loss event.
	Batteries []OdataV4IdRef `json:"Batteries,omitempty"`

	// The number of items in a collection.
	BatteriesodataCount int64 `json:"Batteries@odata.count,omitempty"`

	// An array of links to the endpoints that connect to this controller.
	Endpoints []OdataV4IdRef `json:"Endpoints,omitempty"`

	// The number of items in a collection.
	EndpointsodataCount int64 `json:"Endpoints@odata.count,omitempty"`

	// The NVMe subsystems discovered by this discovery controller.
	NVMeDiscoveredSubsystems []OdataV4IdRef `json:"NVMeDiscoveredSubsystems,omitempty"`

	// The number of items in a collection.
	NVMeDiscoveredSubsystemsodataCount int64 `json:"NVMeDiscoveredSubsystems@odata.count,omitempty"`

	// The network device functions that provide connectivity to this controller.
	NetworkDeviceFunctions []OdataV4IdRef `json:"NetworkDeviceFunctions,omitempty"`

	// The number of items in a collection.
	NetworkDeviceFunctionsodataCount int64 `json:"NetworkDeviceFunctions@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An array of links to the PCIe functions that the storage controller produces.
	PCIeFunctions []OdataV4IdRef `json:"PCIeFunctions,omitempty"`

	// The number of items in a collection.
	PCIeFunctionsodataCount int64 `json:"PCIeFunctions@odata.count,omitempty"`
}

// AssertStorageControllerV172LinksRequired checks if the required fields are not zero-ed
func AssertStorageControllerV172LinksRequired(obj StorageControllerV172Links) error {
	for _, el := range obj.AttachedVolumes {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Batteries {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NVMeDiscoveredSubsystems {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NetworkDeviceFunctions {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PCIeFunctions {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertStorageControllerV172LinksConstraints checks if the values respects the defined constraints
func AssertStorageControllerV172LinksConstraints(obj StorageControllerV172Links) error {
	for _, el := range obj.AttachedVolumes {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Batteries {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NVMeDiscoveredSubsystems {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NetworkDeviceFunctions {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PCIeFunctions {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
