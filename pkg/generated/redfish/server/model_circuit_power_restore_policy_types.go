// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// CircuitPowerRestorePolicyTypes : The enumerations of `PowerRestorePolicyTypes` specify the choice of power state when power is applied.
type CircuitPowerRestorePolicyTypes string

// List of CircuitPowerRestorePolicyTypes
const (
	CIRCUITPOWERRESTOREPOLICYTYPES_ALWAYS_ON  CircuitPowerRestorePolicyTypes = "AlwaysOn"
	CIRCUITPOWERRESTOREPOLICYTYPES_ALWAYS_OFF CircuitPowerRestorePolicyTypes = "AlwaysOff"
	CIRCUITPOWERRESTOREPOLICYTYPES_LAST_STATE CircuitPowerRestorePolicyTypes = "LastState"
)

// AllowedCircuitPowerRestorePolicyTypesEnumValues is all the allowed values of CircuitPowerRestorePolicyTypes enum
var AllowedCircuitPowerRestorePolicyTypesEnumValues = []CircuitPowerRestorePolicyTypes{
	"AlwaysOn",
	"AlwaysOff",
	"LastState",
}

// validCircuitPowerRestorePolicyTypesEnumValue provides a map of CircuitPowerRestorePolicyTypess for fast verification of use input
var validCircuitPowerRestorePolicyTypesEnumValues = map[CircuitPowerRestorePolicyTypes]struct{}{
	"AlwaysOn":  {},
	"AlwaysOff": {},
	"LastState": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CircuitPowerRestorePolicyTypes) IsValid() bool {
	_, ok := validCircuitPowerRestorePolicyTypesEnumValues[v]
	return ok
}

// NewCircuitPowerRestorePolicyTypesFromValue returns a pointer to a valid CircuitPowerRestorePolicyTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCircuitPowerRestorePolicyTypesFromValue(v string) (CircuitPowerRestorePolicyTypes, error) {
	ev := CircuitPowerRestorePolicyTypes(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for CircuitPowerRestorePolicyTypes: valid values are %v", v, AllowedCircuitPowerRestorePolicyTypesEnumValues)
}

// AssertCircuitPowerRestorePolicyTypesRequired checks if the required fields are not zero-ed
func AssertCircuitPowerRestorePolicyTypesRequired(obj CircuitPowerRestorePolicyTypes) error {
	return nil
}

// AssertCircuitPowerRestorePolicyTypesConstraints checks if the values respects the defined constraints
func AssertCircuitPowerRestorePolicyTypesConstraints(obj CircuitPowerRestorePolicyTypes) error {
	return nil
}
