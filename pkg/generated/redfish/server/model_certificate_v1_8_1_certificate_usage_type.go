// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type CertificateV181CertificateUsageType string

// List of CertificateV181CertificateUsageType
const (
	CERTIFICATEV181CERTIFICATEUSAGETYPE_USER     CertificateV181CertificateUsageType = "User"
	CERTIFICATEV181CERTIFICATEUSAGETYPE_WEB      CertificateV181CertificateUsageType = "Web"
	CERTIFICATEV181CERTIFICATEUSAGETYPE_SSH      CertificateV181CertificateUsageType = "SSH"
	CERTIFICATEV181CERTIFICATEUSAGETYPE_DEVICE   CertificateV181CertificateUsageType = "Device"
	CERTIFICATEV181CERTIFICATEUSAGETYPE_PLATFORM CertificateV181CertificateUsageType = "Platform"
	CERTIFICATEV181CERTIFICATEUSAGETYPE_BIOS     CertificateV181CertificateUsageType = "BIOS"
	CERTIFICATEV181CERTIFICATEUSAGETYPE_I_DEV_ID CertificateV181CertificateUsageType = "IDevID"
	CERTIFICATEV181CERTIFICATEUSAGETYPE_L_DEV_ID CertificateV181CertificateUsageType = "LDevID"
	CERTIFICATEV181CERTIFICATEUSAGETYPE_IAK      CertificateV181CertificateUsageType = "IAK"
	CERTIFICATEV181CERTIFICATEUSAGETYPE_LAK      CertificateV181CertificateUsageType = "LAK"
)

// AllowedCertificateV181CertificateUsageTypeEnumValues is all the allowed values of CertificateV181CertificateUsageType enum
var AllowedCertificateV181CertificateUsageTypeEnumValues = []CertificateV181CertificateUsageType{
	"User",
	"Web",
	"SSH",
	"Device",
	"Platform",
	"BIOS",
	"IDevID",
	"LDevID",
	"IAK",
	"LAK",
}

// validCertificateV181CertificateUsageTypeEnumValue provides a map of CertificateV181CertificateUsageTypes for fast verification of use input
var validCertificateV181CertificateUsageTypeEnumValues = map[CertificateV181CertificateUsageType]struct{}{
	"User":     {},
	"Web":      {},
	"SSH":      {},
	"Device":   {},
	"Platform": {},
	"BIOS":     {},
	"IDevID":   {},
	"LDevID":   {},
	"IAK":      {},
	"LAK":      {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CertificateV181CertificateUsageType) IsValid() bool {
	_, ok := validCertificateV181CertificateUsageTypeEnumValues[v]
	return ok
}

// NewCertificateV181CertificateUsageTypeFromValue returns a pointer to a valid CertificateV181CertificateUsageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCertificateV181CertificateUsageTypeFromValue(v string) (CertificateV181CertificateUsageType, error) {
	ev := CertificateV181CertificateUsageType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for CertificateV181CertificateUsageType: valid values are %v", v, AllowedCertificateV181CertificateUsageTypeEnumValues)
}

// AssertCertificateV181CertificateUsageTypeRequired checks if the required fields are not zero-ed
func AssertCertificateV181CertificateUsageTypeRequired(obj CertificateV181CertificateUsageType) error {
	return nil
}

// AssertCertificateV181CertificateUsageTypeConstraints checks if the values respects the defined constraints
func AssertCertificateV181CertificateUsageTypeConstraints(obj CertificateV181CertificateUsageType) error {
	return nil
}
