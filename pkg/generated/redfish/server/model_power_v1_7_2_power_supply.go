// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// PowerV172PowerSupply - Details of a power supplies associated with this system or device.
type PowerV172PowerSupply struct {

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	Actions PowerV172PowerSupplyActions `json:"Actions,omitempty"`

	Assembly OdataV4IdRef `json:"Assembly,omitempty"`

	// The measured efficiency of this power supply as a percentage.
	EfficiencyPercent *float32 `json:"EfficiencyPercent,omitempty"`

	// The firmware version for this power supply.
	FirmwareVersion *string `json:"FirmwareVersion,omitempty"`

	// An indication of whether this device can be inserted or removed while the equipment is in operation.
	HotPluggable *bool `json:"HotPluggable,omitempty"`

	IndicatorLED ResourceIndicatorLed `json:"IndicatorLED,omitempty"`

	// The input ranges that the power supply can use.
	InputRanges []PowerV172InputRange `json:"InputRanges,omitempty"`

	// The average power output of this power supply.
	LastPowerOutputWatts *float32 `json:"LastPowerOutputWatts,omitempty"`

	// The line input voltage at which the power supply is operating.
	LineInputVoltage *float32 `json:"LineInputVoltage,omitempty"`

	LineInputVoltageType PowerV172LineInputVoltageType `json:"LineInputVoltageType,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// The manufacturer of this power supply.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// The unique identifier for the member within an array.
	MemberId string `json:"MemberId"`

	// The model number for this power supply.
	Model *string `json:"Model,omitempty"`

	// The name of the power supply.
	Name *string `json:"Name,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The part number for this power supply.
	PartNumber *string `json:"PartNumber,omitempty"`

	// The maximum capacity of this power supply.
	PowerCapacityWatts *float32 `json:"PowerCapacityWatts,omitempty"`

	// The measured input power of this power supply.
	PowerInputWatts *float32 `json:"PowerInputWatts,omitempty"`

	// The measured output power of this power supply.
	PowerOutputWatts *float32 `json:"PowerOutputWatts,omitempty"`

	PowerSupplyType PowerV172PowerSupplyType `json:"PowerSupplyType,omitempty"`

	// The set of redundancy groups for this power supply.
	Redundancy []RedundancyRedundancy `json:"Redundancy,omitempty"`

	// The number of items in a collection.
	RedundancyodataCount int64 `json:"Redundancy@odata.count,omitempty"`

	// An array of links to resources or objects associated with this power supply.
	RelatedItem []OdataV4IdRef `json:"RelatedItem,omitempty"`

	// The number of items in a collection.
	RelatedItemodataCount int64 `json:"RelatedItem@odata.count,omitempty"`

	// The serial number for this power supply.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	// The spare part number for this power supply.
	SparePartNumber *string `json:"SparePartNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertPowerV172PowerSupplyRequired checks if the required fields are not zero-ed
func AssertPowerV172PowerSupplyRequired(obj PowerV172PowerSupply) error {
	elements := map[string]interface{}{
		"@odata.id": obj.OdataId,
		"MemberId":  obj.MemberId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPowerV172PowerSupplyActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Assembly); err != nil {
		return err
	}
	for _, el := range obj.InputRanges {
		if err := AssertPowerV172InputRangeRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RelatedItem {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertPowerV172PowerSupplyConstraints checks if the values respects the defined constraints
func AssertPowerV172PowerSupplyConstraints(obj PowerV172PowerSupply) error {
	if err := AssertPowerV172PowerSupplyActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Assembly); err != nil {
		return err
	}
	if obj.EfficiencyPercent != nil && *obj.EfficiencyPercent < 0 {
		return &ParsingError{Param: "EfficiencyPercent", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.EfficiencyPercent != nil && *obj.EfficiencyPercent > 100 {
		return &ParsingError{Param: "EfficiencyPercent", Err: errors.New(errMsgMaxValueConstraint)}
	}
	for _, el := range obj.InputRanges {
		if err := AssertPowerV172InputRangeConstraints(el); err != nil {
			return err
		}
	}
	if obj.LastPowerOutputWatts != nil && *obj.LastPowerOutputWatts < 0 {
		return &ParsingError{Param: "LastPowerOutputWatts", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if obj.PowerCapacityWatts != nil && *obj.PowerCapacityWatts < 0 {
		return &ParsingError{Param: "PowerCapacityWatts", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PowerInputWatts != nil && *obj.PowerInputWatts < 0 {
		return &ParsingError{Param: "PowerInputWatts", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PowerOutputWatts != nil && *obj.PowerOutputWatts < 0 {
		return &ParsingError{Param: "PowerOutputWatts", Err: errors.New(errMsgMinValueConstraint)}
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RelatedItem {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
