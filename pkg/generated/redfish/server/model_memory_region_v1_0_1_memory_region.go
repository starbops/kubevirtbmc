// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// MemoryRegionV101MemoryRegion - The schema definition of a memory region and its configuration.
type MemoryRegionV101MemoryRegion struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions MemoryRegionV101Actions `json:"Actions,omitempty"`

	// The memory region block size in mebibytes (MiB).
	BlockSizeMiB int64 `json:"BlockSizeMiB,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The number of extents defined for this memory region.
	ExtentsCount *int64 `json:"ExtentsCount,omitempty"`

	// An indication of whether the device manages the cache coherency across hosts for this memory region.
	HardwareManagedCoherencyRegion *bool `json:"HardwareManagedCoherencyRegion,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The set of memory chunks providing capacity for this memory region.
	MemoryChunks []MemoryRegionV101MemoryChunk `json:"MemoryChunks,omitempty"`

	// The set of memory extents defined for this memory region.
	MemoryExtents []MemoryRegionV101MemoryExtent `json:"MemoryExtents,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// An indication of whether this memory region represents non-volatile memory.
	NonVolatileRegion *bool `json:"NonVolatileRegion,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The offset of the memory region in the device address range in mebibytes (MiB).
	RegionBaseOffsetMiB int64 `json:"RegionBaseOffsetMiB,omitempty"`

	// The memory region number.
	RegionNumber int64 `json:"RegionNumber,omitempty"`

	// The size of the memory region in mebibytes (MiB).
	RegionSizeMiB int64 `json:"RegionSizeMiB,omitempty"`

	RegionType MemoryRegionV101RegionType `json:"RegionType"`

	// An indication of whether the capacity released from this memory region will be sanitized before it is made available to any host.
	SanitizeOnRelease *bool `json:"SanitizeOnRelease,omitempty"`

	// An indication of whether this memory region can be shared across multiple hosts.
	ShareableRegion *bool `json:"ShareableRegion,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertMemoryRegionV101MemoryRegionRequired checks if the required fields are not zero-ed
func AssertMemoryRegionV101MemoryRegionRequired(obj MemoryRegionV101MemoryRegion) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
		"RegionType":  obj.RegionType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertMemoryRegionV101ActionsRequired(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.MemoryChunks {
		if err := AssertMemoryRegionV101MemoryChunkRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MemoryExtents {
		if err := AssertMemoryRegionV101MemoryExtentRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertMemoryRegionV101MemoryRegionConstraints checks if the values respects the defined constraints
func AssertMemoryRegionV101MemoryRegionConstraints(obj MemoryRegionV101MemoryRegion) error {
	if err := AssertMemoryRegionV101ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.MemoryChunks {
		if err := AssertMemoryRegionV101MemoryChunkConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MemoryExtents {
		if err := AssertMemoryRegionV101MemoryExtentConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
