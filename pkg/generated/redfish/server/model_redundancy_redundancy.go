// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2024.3
 */

package server

// RedundancyRedundancy - The common redundancy definition and structure used in other Redfish schemas.
type RedundancyRedundancy struct {

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	Actions RedundancyV142Actions `json:"Actions,omitempty"`

	// The maximum number of members allowable for this particular redundancy group.
	MaxNumSupported *int64 `json:"MaxNumSupported,omitempty"`

	// The unique identifier for the member within an array.
	MemberId string `json:"MemberId"`

	// The minimum number of members needed for this group to be redundant.
	MinNumNeeded *int64 `json:"MinNumNeeded"`

	Mode *RedundancyV142RedundancyMode `json:"Mode"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An indication of whether redundancy is enabled.
	RedundancyEnabled *bool `json:"RedundancyEnabled,omitempty"`

	// The links to components of this redundancy set.
	RedundancySet []OdataV4IdRef `json:"RedundancySet"`

	// The number of items in a collection.
	RedundancySetodataCount int64 `json:"RedundancySet@odata.count,omitempty"`

	Status ResourceStatus `json:"Status"`
}

// AssertRedundancyRedundancyRequired checks if the required fields are not zero-ed
func AssertRedundancyRedundancyRequired(obj RedundancyRedundancy) error {
	elements := map[string]interface{}{
		"@odata.id":     obj.OdataId,
		"MemberId":      obj.MemberId,
		"MinNumNeeded":  obj.MinNumNeeded,
		"Mode":          obj.Mode,
		"Name":          obj.Name,
		"RedundancySet": obj.RedundancySet,
		"Status":        obj.Status,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertRedundancyV142ActionsRequired(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.RedundancySet {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertRedundancyRedundancyConstraints checks if the values respects the defined constraints
func AssertRedundancyRedundancyConstraints(obj RedundancyRedundancy) error {
	if err := AssertRedundancyV142ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.RedundancySet {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
