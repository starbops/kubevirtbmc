// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type DriveV1180MediaType string

// List of DriveV1180MediaType
const (
	DRIVEV1180MEDIATYPE_HDD DriveV1180MediaType = "HDD"
	DRIVEV1180MEDIATYPE_SSD DriveV1180MediaType = "SSD"
	DRIVEV1180MEDIATYPE_SMR DriveV1180MediaType = "SMR"
)

// AllowedDriveV1180MediaTypeEnumValues is all the allowed values of DriveV1180MediaType enum
var AllowedDriveV1180MediaTypeEnumValues = []DriveV1180MediaType{
	"HDD",
	"SSD",
	"SMR",
}

// validDriveV1180MediaTypeEnumValue provides a map of DriveV1180MediaTypes for fast verification of use input
var validDriveV1180MediaTypeEnumValues = map[DriveV1180MediaType]struct{}{
	"HDD": {},
	"SSD": {},
	"SMR": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DriveV1180MediaType) IsValid() bool {
	_, ok := validDriveV1180MediaTypeEnumValues[v]
	return ok
}

// NewDriveV1180MediaTypeFromValue returns a pointer to a valid DriveV1180MediaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDriveV1180MediaTypeFromValue(v string) (DriveV1180MediaType, error) {
	ev := DriveV1180MediaType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for DriveV1180MediaType: valid values are %v", v, AllowedDriveV1180MediaTypeEnumValues)
}

// AssertDriveV1180MediaTypeRequired checks if the required fields are not zero-ed
func AssertDriveV1180MediaTypeRequired(obj DriveV1180MediaType) error {
	return nil
}

// AssertDriveV1180MediaTypeConstraints checks if the values respects the defined constraints
func AssertDriveV1180MediaTypeConstraints(obj DriveV1180MediaType) error {
	return nil
}
