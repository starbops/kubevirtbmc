// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type MemoryChunksV161AddressRangeType string

// List of MemoryChunksV161AddressRangeType
const (
	MEMORYCHUNKSV161ADDRESSRANGETYPE_VOLATILE MemoryChunksV161AddressRangeType = "Volatile"
	MEMORYCHUNKSV161ADDRESSRANGETYPE_PMEM     MemoryChunksV161AddressRangeType = "PMEM"
	MEMORYCHUNKSV161ADDRESSRANGETYPE_BLOCK    MemoryChunksV161AddressRangeType = "Block"
)

// AllowedMemoryChunksV161AddressRangeTypeEnumValues is all the allowed values of MemoryChunksV161AddressRangeType enum
var AllowedMemoryChunksV161AddressRangeTypeEnumValues = []MemoryChunksV161AddressRangeType{
	"Volatile",
	"PMEM",
	"Block",
}

// validMemoryChunksV161AddressRangeTypeEnumValue provides a map of MemoryChunksV161AddressRangeTypes for fast verification of use input
var validMemoryChunksV161AddressRangeTypeEnumValues = map[MemoryChunksV161AddressRangeType]struct{}{
	"Volatile": {},
	"PMEM":     {},
	"Block":    {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MemoryChunksV161AddressRangeType) IsValid() bool {
	_, ok := validMemoryChunksV161AddressRangeTypeEnumValues[v]
	return ok
}

// NewMemoryChunksV161AddressRangeTypeFromValue returns a pointer to a valid MemoryChunksV161AddressRangeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMemoryChunksV161AddressRangeTypeFromValue(v string) (MemoryChunksV161AddressRangeType, error) {
	ev := MemoryChunksV161AddressRangeType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for MemoryChunksV161AddressRangeType: valid values are %v", v, AllowedMemoryChunksV161AddressRangeTypeEnumValues)
}

// AssertMemoryChunksV161AddressRangeTypeRequired checks if the required fields are not zero-ed
func AssertMemoryChunksV161AddressRangeTypeRequired(obj MemoryChunksV161AddressRangeType) error {
	return nil
}

// AssertMemoryChunksV161AddressRangeTypeConstraints checks if the values respects the defined constraints
func AssertMemoryChunksV161AddressRangeTypeConstraints(obj MemoryChunksV161AddressRangeType) error {
	return nil
}
