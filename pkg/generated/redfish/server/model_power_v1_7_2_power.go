// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// PowerV172Power - The Power schema describes power metrics and represents the properties for power consumption and power limiting.
type PowerV172Power struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions PowerV172Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The set of power control functions, including power reading and limiting.
	PowerControl []PowerV172PowerControl `json:"PowerControl,omitempty"`

	// The number of items in a collection.
	PowerControlodataCount int64 `json:"PowerControl@odata.count,omitempty"`

	// The set of power supplies associated with this system or device.
	PowerSupplies []PowerV172PowerSupply `json:"PowerSupplies,omitempty"`

	// The number of items in a collection.
	PowerSuppliesodataCount int64 `json:"PowerSupplies@odata.count,omitempty"`

	// The redundancy information for the set of power supplies in this chassis.
	Redundancy []RedundancyRedundancy `json:"Redundancy,omitempty"`

	// The number of items in a collection.
	RedundancyodataCount int64 `json:"Redundancy@odata.count,omitempty"`

	// The set of voltage sensors for this chassis.
	Voltages []PowerV172Voltage `json:"Voltages,omitempty"`

	// The number of items in a collection.
	VoltagesodataCount int64 `json:"Voltages@odata.count,omitempty"`
}

// AssertPowerV172PowerRequired checks if the required fields are not zero-ed
func AssertPowerV172PowerRequired(obj PowerV172Power) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPowerV172ActionsRequired(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.PowerControl {
		if err := AssertPowerV172PowerControlRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PowerSupplies {
		if err := AssertPowerV172PowerSupplyRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Voltages {
		if err := AssertPowerV172VoltageRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertPowerV172PowerConstraints checks if the values respects the defined constraints
func AssertPowerV172PowerConstraints(obj PowerV172Power) error {
	if err := AssertPowerV172ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.PowerControl {
		if err := AssertPowerV172PowerControlConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PowerSupplies {
		if err := AssertPowerV172PowerSupplyConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Voltages {
		if err := AssertPowerV172VoltageConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
