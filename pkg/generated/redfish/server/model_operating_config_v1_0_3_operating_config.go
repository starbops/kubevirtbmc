// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// OperatingConfigV103OperatingConfig - The OperatingConfig schema specifies a configuration that can be used when the processor is operational.
type OperatingConfigV103OperatingConfig struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions OperatingConfigV103Actions `json:"Actions,omitempty"`

	// The base (nominal) clock speed of the processor in MHz.
	BaseSpeedMHz *int64 `json:"BaseSpeedMHz,omitempty"`

	// The clock speed for sets of cores when the configuration is operational.
	BaseSpeedPrioritySettings []OperatingConfigV103BaseSpeedPrioritySettings `json:"BaseSpeedPrioritySettings,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The maximum temperature of the junction in degree Celsius units.
	MaxJunctionTemperatureCelsius *int64 `json:"MaxJunctionTemperatureCelsius,omitempty"`

	// The maximum clock speed to which the processor can be configured in MHz.
	MaxSpeedMHz *int64 `json:"MaxSpeedMHz,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The thermal design point of the processor in watt units.
	TDPWatts *int64 `json:"TDPWatts,omitempty"`

	// The number of cores in the processor that can be configured.
	TotalAvailableCoreCount *int64 `json:"TotalAvailableCoreCount,omitempty"`

	// The turbo profiles for the processor.  A turbo profile is the maximum turbo clock speed as a function of the number of active cores.
	TurboProfile []OperatingConfigV103TurboProfileDatapoint `json:"TurboProfile,omitempty"`
}

// AssertOperatingConfigV103OperatingConfigRequired checks if the required fields are not zero-ed
func AssertOperatingConfigV103OperatingConfigRequired(obj OperatingConfigV103OperatingConfig) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertOperatingConfigV103ActionsRequired(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.BaseSpeedPrioritySettings {
		if err := AssertOperatingConfigV103BaseSpeedPrioritySettingsRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TurboProfile {
		if err := AssertOperatingConfigV103TurboProfileDatapointRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertOperatingConfigV103OperatingConfigConstraints checks if the values respects the defined constraints
func AssertOperatingConfigV103OperatingConfigConstraints(obj OperatingConfigV103OperatingConfig) error {
	if err := AssertOperatingConfigV103ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if obj.BaseSpeedMHz != nil && *obj.BaseSpeedMHz < 0 {
		return &ParsingError{Param: "BaseSpeedMHz", Err: errors.New(errMsgMinValueConstraint)}
	}
	for _, el := range obj.BaseSpeedPrioritySettings {
		if err := AssertOperatingConfigV103BaseSpeedPrioritySettingsConstraints(el); err != nil {
			return err
		}
	}
	if obj.MaxSpeedMHz != nil && *obj.MaxSpeedMHz < 0 {
		return &ParsingError{Param: "MaxSpeedMHz", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.TDPWatts != nil && *obj.TDPWatts < 0 {
		return &ParsingError{Param: "TDPWatts", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.TotalAvailableCoreCount != nil && *obj.TotalAvailableCoreCount < 0 {
		return &ParsingError{Param: "TotalAvailableCoreCount", Err: errors.New(errMsgMinValueConstraint)}
	}
	for _, el := range obj.TurboProfile {
		if err := AssertOperatingConfigV103TurboProfileDatapointConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
