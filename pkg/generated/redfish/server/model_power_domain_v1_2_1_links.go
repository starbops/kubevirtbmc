// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// PowerDomainV121Links - The links to other resources that are related to this resource.
type PowerDomainV121Links struct {

	// An array of links to the electrical buses in this power domain.
	ElectricalBuses []OdataV4IdRef `json:"ElectricalBuses,omitempty"`

	// The number of items in a collection.
	ElectricalBusesodataCount int64 `json:"ElectricalBuses@odata.count,omitempty"`

	// An array of links to the floor power distribution units in this power domain.
	FloorPDUs []OdataV4IdRef `json:"FloorPDUs,omitempty"`

	// The number of items in a collection.
	FloorPDUsodataCount int64 `json:"FloorPDUs@odata.count,omitempty"`

	// An array of links to the managers responsible for managing this power domain.
	ManagedBy []OdataV4IdRef `json:"ManagedBy,omitempty"`

	// The number of items in a collection.
	ManagedByodataCount int64 `json:"ManagedBy@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An array of links to the power shelves in this power domain.
	PowerShelves []OdataV4IdRef `json:"PowerShelves,omitempty"`

	// The number of items in a collection.
	PowerShelvesodataCount int64 `json:"PowerShelves@odata.count,omitempty"`

	// An array of links to the rack-level power distribution units in this power domain.
	RackPDUs []OdataV4IdRef `json:"RackPDUs,omitempty"`

	// The number of items in a collection.
	RackPDUsodataCount int64 `json:"RackPDUs@odata.count,omitempty"`

	// An array of links to the switchgear in this power domain.
	Switchgear []OdataV4IdRef `json:"Switchgear,omitempty"`

	// The number of items in a collection.
	SwitchgearodataCount int64 `json:"Switchgear@odata.count,omitempty"`

	// An array of links to the transfer switches in this power domain.
	TransferSwitches []OdataV4IdRef `json:"TransferSwitches,omitempty"`

	// The number of items in a collection.
	TransferSwitchesodataCount int64 `json:"TransferSwitches@odata.count,omitempty"`
}

// AssertPowerDomainV121LinksRequired checks if the required fields are not zero-ed
func AssertPowerDomainV121LinksRequired(obj PowerDomainV121Links) error {
	for _, el := range obj.ElectricalBuses {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.FloorPDUs {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ManagedBy {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PowerShelves {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RackPDUs {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Switchgear {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TransferSwitches {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertPowerDomainV121LinksConstraints checks if the values respects the defined constraints
func AssertPowerDomainV121LinksConstraints(obj PowerDomainV121Links) error {
	for _, el := range obj.ElectricalBuses {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.FloorPDUs {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ManagedBy {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PowerShelves {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RackPDUs {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Switchgear {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TransferSwitches {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
