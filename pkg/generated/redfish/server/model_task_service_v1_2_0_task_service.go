// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
	"time"
)

// TaskServiceV120TaskService - The TaskService schema describes a task service that enables management of long-duration operations, includes the properties for the task service itself, and has links to the resource collection of tasks.
type TaskServiceV120TaskService struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions TaskServiceV120Actions `json:"Actions,omitempty"`

	CompletedTaskOverWritePolicy TaskServiceV120OverWritePolicy `json:"CompletedTaskOverWritePolicy,omitempty"`

	// The current date and time, with UTC offset, setting that the task service uses.
	DateTime *time.Time `json:"DateTime,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// An indication of whether a task state change sends an event.
	LifeCycleEventOnTaskStateChange bool `json:"LifeCycleEventOnTaskStateChange,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An indication of whether this service is enabled.
	ServiceEnabled *bool `json:"ServiceEnabled,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The number of minutes after which a completed task is deleted by the service.
	TaskAutoDeleteTimeoutMinutes int64 `json:"TaskAutoDeleteTimeoutMinutes,omitempty"`

	Tasks OdataV4IdRef `json:"Tasks,omitempty"`
}

// AssertTaskServiceV120TaskServiceRequired checks if the required fields are not zero-ed
func AssertTaskServiceV120TaskServiceRequired(obj TaskServiceV120TaskService) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertTaskServiceV120ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Tasks); err != nil {
		return err
	}
	return nil
}

// AssertTaskServiceV120TaskServiceConstraints checks if the values respects the defined constraints
func AssertTaskServiceV120TaskServiceConstraints(obj TaskServiceV120TaskService) error {
	if err := AssertTaskServiceV120ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if obj.TaskAutoDeleteTimeoutMinutes < 1 {
		return &ParsingError{Param: "TaskAutoDeleteTimeoutMinutes", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertOdataV4IdRefConstraints(obj.Tasks); err != nil {
		return err
	}
	return nil
}
