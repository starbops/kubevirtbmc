// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type KeyPolicyV100KeyPolicyType string

// List of KeyPolicyV100KeyPolicyType
const (
	KEYPOLICYV100KEYPOLICYTYPE_NV_MEO_F KeyPolicyV100KeyPolicyType = "NVMeoF"
)

// AllowedKeyPolicyV100KeyPolicyTypeEnumValues is all the allowed values of KeyPolicyV100KeyPolicyType enum
var AllowedKeyPolicyV100KeyPolicyTypeEnumValues = []KeyPolicyV100KeyPolicyType{
	"NVMeoF",
}

// validKeyPolicyV100KeyPolicyTypeEnumValue provides a map of KeyPolicyV100KeyPolicyTypes for fast verification of use input
var validKeyPolicyV100KeyPolicyTypeEnumValues = map[KeyPolicyV100KeyPolicyType]struct{}{
	"NVMeoF": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyPolicyV100KeyPolicyType) IsValid() bool {
	_, ok := validKeyPolicyV100KeyPolicyTypeEnumValues[v]
	return ok
}

// NewKeyPolicyV100KeyPolicyTypeFromValue returns a pointer to a valid KeyPolicyV100KeyPolicyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyPolicyV100KeyPolicyTypeFromValue(v string) (KeyPolicyV100KeyPolicyType, error) {
	ev := KeyPolicyV100KeyPolicyType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for KeyPolicyV100KeyPolicyType: valid values are %v", v, AllowedKeyPolicyV100KeyPolicyTypeEnumValues)
}

// AssertKeyPolicyV100KeyPolicyTypeRequired checks if the required fields are not zero-ed
func AssertKeyPolicyV100KeyPolicyTypeRequired(obj KeyPolicyV100KeyPolicyType) error {
	return nil
}

// AssertKeyPolicyV100KeyPolicyTypeConstraints checks if the values respects the defined constraints
func AssertKeyPolicyV100KeyPolicyTypeConstraints(obj KeyPolicyV100KeyPolicyType) error {
	return nil
}
