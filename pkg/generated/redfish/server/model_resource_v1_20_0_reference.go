// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2024.3
 */

package server

import (
	"fmt"
)

// ResourceV1200Reference : The reference areas for the location of the part within an enclosure.
type ResourceV1200Reference string

// List of ResourceV1200Reference
const (
	RESOURCEV1200REFERENCE_TOP    ResourceV1200Reference = "Top"
	RESOURCEV1200REFERENCE_BOTTOM ResourceV1200Reference = "Bottom"
	RESOURCEV1200REFERENCE_FRONT  ResourceV1200Reference = "Front"
	RESOURCEV1200REFERENCE_REAR   ResourceV1200Reference = "Rear"
	RESOURCEV1200REFERENCE_LEFT   ResourceV1200Reference = "Left"
	RESOURCEV1200REFERENCE_RIGHT  ResourceV1200Reference = "Right"
	RESOURCEV1200REFERENCE_MIDDLE ResourceV1200Reference = "Middle"
)

// AllowedResourceV1200ReferenceEnumValues is all the allowed values of ResourceV1200Reference enum
var AllowedResourceV1200ReferenceEnumValues = []ResourceV1200Reference{
	"Top",
	"Bottom",
	"Front",
	"Rear",
	"Left",
	"Right",
	"Middle",
}

// validResourceV1200ReferenceEnumValue provides a map of ResourceV1200References for fast verification of use input
var validResourceV1200ReferenceEnumValues = map[ResourceV1200Reference]struct{}{
	"Top":    {},
	"Bottom": {},
	"Front":  {},
	"Rear":   {},
	"Left":   {},
	"Right":  {},
	"Middle": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceV1200Reference) IsValid() bool {
	_, ok := validResourceV1200ReferenceEnumValues[v]
	return ok
}

// NewResourceV1200ReferenceFromValue returns a pointer to a valid ResourceV1200Reference
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceV1200ReferenceFromValue(v string) (ResourceV1200Reference, error) {
	ev := ResourceV1200Reference(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ResourceV1200Reference: valid values are %v", v, AllowedResourceV1200ReferenceEnumValues)
}

// AssertResourceV1200ReferenceRequired checks if the required fields are not zero-ed
func AssertResourceV1200ReferenceRequired(obj ResourceV1200Reference) error {
	return nil
}

// AssertResourceV1200ReferenceConstraints checks if the values respects the defined constraints
func AssertResourceV1200ReferenceConstraints(obj ResourceV1200Reference) error {
	return nil
}
