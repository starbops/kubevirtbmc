// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// StorageControllerV172StorageController - The StorageController schema describes a storage controller and its properties.  A storage controller represents a physical or virtual storage device that produces volumes.
type StorageControllerV172StorageController struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions StorageControllerV172Actions `json:"Actions,omitempty"`

	Assembly OdataV4IdRef `json:"Assembly,omitempty"`

	// The user-assigned asset tag for this storage controller.
	AssetTag *string `json:"AssetTag,omitempty"`

	CacheSummary StorageControllerV172CacheSummary `json:"CacheSummary,omitempty"`

	Certificates OdataV4IdRef `json:"Certificates,omitempty"`

	ControllerRates StorageControllerV172Rates `json:"ControllerRates,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	EnvironmentMetrics OdataV4IdRef `json:"EnvironmentMetrics,omitempty"`

	// The firmware version of this storage controller.
	FirmwareVersion *string `json:"FirmwareVersion,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The durable names for the storage controller.
	Identifiers []ResourceIdentifier `json:"Identifiers,omitempty"`

	Links StorageControllerV172Links `json:"Links,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// The manufacturer of this storage controller.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// An array of DSP0274-defined measurement blocks.
	// Deprecated
	Measurements []SoftwareInventoryMeasurementBlock `json:"Measurements,omitempty"`

	Metrics OdataV4IdRef `json:"Metrics,omitempty"`

	// The model number for the storage controller.
	Model *string `json:"Model,omitempty"`

	NVMeControllerProperties StorageControllerV172NvmeControllerProperties `json:"NVMeControllerProperties,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PCIeInterface PcieDevicePcieInterface `json:"PCIeInterface,omitempty"`

	// The part number for this storage controller.
	PartNumber *string `json:"PartNumber,omitempty"`

	Ports OdataV4IdRef `json:"Ports,omitempty"`

	// The SKU for this storage controller.
	SKU *string `json:"SKU,omitempty"`

	// The serial number for this storage controller.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	// The maximum speed of the storage controller's device interface.
	SpeedGbps *float32 `json:"SpeedGbps,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The supported set of protocols for communicating with this storage controller.
	SupportedControllerProtocols []ProtocolProtocol `json:"SupportedControllerProtocols,omitempty"`

	// The protocols that the storage controller can use to communicate with attached devices.
	SupportedDeviceProtocols []ProtocolProtocol `json:"SupportedDeviceProtocols,omitempty"`

	// The set of RAID types supported by the storage controller.
	SupportedRAIDTypes []VolumeRaidType `json:"SupportedRAIDTypes,omitempty"`
}

// AssertStorageControllerV172StorageControllerRequired checks if the required fields are not zero-ed
func AssertStorageControllerV172StorageControllerRequired(obj StorageControllerV172StorageController) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertStorageControllerV172ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Assembly); err != nil {
		return err
	}
	if err := AssertStorageControllerV172CacheSummaryRequired(obj.CacheSummary); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Certificates); err != nil {
		return err
	}
	if err := AssertStorageControllerV172RatesRequired(obj.ControllerRates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.EnvironmentMetrics); err != nil {
		return err
	}
	for _, el := range obj.Identifiers {
		if err := AssertResourceIdentifierRequired(el); err != nil {
			return err
		}
	}
	if err := AssertStorageControllerV172LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	for _, el := range obj.Measurements {
		if err := AssertSoftwareInventoryMeasurementBlockRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.Metrics); err != nil {
		return err
	}
	if err := AssertStorageControllerV172NvmeControllerPropertiesRequired(obj.NVMeControllerProperties); err != nil {
		return err
	}
	if err := AssertPcieDevicePcieInterfaceRequired(obj.PCIeInterface); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Ports); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertStorageControllerV172StorageControllerConstraints checks if the values respects the defined constraints
func AssertStorageControllerV172StorageControllerConstraints(obj StorageControllerV172StorageController) error {
	if err := AssertStorageControllerV172ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Assembly); err != nil {
		return err
	}
	if err := AssertStorageControllerV172CacheSummaryConstraints(obj.CacheSummary); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Certificates); err != nil {
		return err
	}
	if err := AssertStorageControllerV172RatesConstraints(obj.ControllerRates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.EnvironmentMetrics); err != nil {
		return err
	}
	for _, el := range obj.Identifiers {
		if err := AssertResourceIdentifierConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertStorageControllerV172LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	for _, el := range obj.Measurements {
		if err := AssertSoftwareInventoryMeasurementBlockConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.Metrics); err != nil {
		return err
	}
	if err := AssertStorageControllerV172NvmeControllerPropertiesConstraints(obj.NVMeControllerProperties); err != nil {
		return err
	}
	if err := AssertPcieDevicePcieInterfaceConstraints(obj.PCIeInterface); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Ports); err != nil {
		return err
	}
	if obj.SpeedGbps != nil && *obj.SpeedGbps < 0 {
		return &ParsingError{Param: "SpeedGbps", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
