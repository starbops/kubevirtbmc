// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type SensorElectricalContext string

// List of SensorElectricalContext
const (
	SENSORELECTRICALCONTEXT_LINE1                      SensorElectricalContext = "Line1"
	SENSORELECTRICALCONTEXT_LINE2                      SensorElectricalContext = "Line2"
	SENSORELECTRICALCONTEXT_LINE3                      SensorElectricalContext = "Line3"
	SENSORELECTRICALCONTEXT_NEUTRAL                    SensorElectricalContext = "Neutral"
	SENSORELECTRICALCONTEXT_LINE_TO_LINE               SensorElectricalContext = "LineToLine"
	SENSORELECTRICALCONTEXT_LINE1_TO_LINE2             SensorElectricalContext = "Line1ToLine2"
	SENSORELECTRICALCONTEXT_LINE2_TO_LINE3             SensorElectricalContext = "Line2ToLine3"
	SENSORELECTRICALCONTEXT_LINE3_TO_LINE1             SensorElectricalContext = "Line3ToLine1"
	SENSORELECTRICALCONTEXT_LINE_TO_NEUTRAL            SensorElectricalContext = "LineToNeutral"
	SENSORELECTRICALCONTEXT_LINE1_TO_NEUTRAL           SensorElectricalContext = "Line1ToNeutral"
	SENSORELECTRICALCONTEXT_LINE2_TO_NEUTRAL           SensorElectricalContext = "Line2ToNeutral"
	SENSORELECTRICALCONTEXT_LINE3_TO_NEUTRAL           SensorElectricalContext = "Line3ToNeutral"
	SENSORELECTRICALCONTEXT_LINE1_TO_NEUTRAL_AND_L1_L2 SensorElectricalContext = "Line1ToNeutralAndL1L2"
	SENSORELECTRICALCONTEXT_LINE2_TO_NEUTRAL_AND_L1_L2 SensorElectricalContext = "Line2ToNeutralAndL1L2"
	SENSORELECTRICALCONTEXT_LINE2_TO_NEUTRAL_AND_L2_L3 SensorElectricalContext = "Line2ToNeutralAndL2L3"
	SENSORELECTRICALCONTEXT_LINE3_TO_NEUTRAL_AND_L3_L1 SensorElectricalContext = "Line3ToNeutralAndL3L1"
	SENSORELECTRICALCONTEXT_TOTAL                      SensorElectricalContext = "Total"
)

// AllowedSensorElectricalContextEnumValues is all the allowed values of SensorElectricalContext enum
var AllowedSensorElectricalContextEnumValues = []SensorElectricalContext{
	"Line1",
	"Line2",
	"Line3",
	"Neutral",
	"LineToLine",
	"Line1ToLine2",
	"Line2ToLine3",
	"Line3ToLine1",
	"LineToNeutral",
	"Line1ToNeutral",
	"Line2ToNeutral",
	"Line3ToNeutral",
	"Line1ToNeutralAndL1L2",
	"Line2ToNeutralAndL1L2",
	"Line2ToNeutralAndL2L3",
	"Line3ToNeutralAndL3L1",
	"Total",
}

// validSensorElectricalContextEnumValue provides a map of SensorElectricalContexts for fast verification of use input
var validSensorElectricalContextEnumValues = map[SensorElectricalContext]struct{}{
	"Line1":                 {},
	"Line2":                 {},
	"Line3":                 {},
	"Neutral":               {},
	"LineToLine":            {},
	"Line1ToLine2":          {},
	"Line2ToLine3":          {},
	"Line3ToLine1":          {},
	"LineToNeutral":         {},
	"Line1ToNeutral":        {},
	"Line2ToNeutral":        {},
	"Line3ToNeutral":        {},
	"Line1ToNeutralAndL1L2": {},
	"Line2ToNeutralAndL1L2": {},
	"Line2ToNeutralAndL2L3": {},
	"Line3ToNeutralAndL3L1": {},
	"Total":                 {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SensorElectricalContext) IsValid() bool {
	_, ok := validSensorElectricalContextEnumValues[v]
	return ok
}

// NewSensorElectricalContextFromValue returns a pointer to a valid SensorElectricalContext
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSensorElectricalContextFromValue(v string) (SensorElectricalContext, error) {
	ev := SensorElectricalContext(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for SensorElectricalContext: valid values are %v", v, AllowedSensorElectricalContextEnumValues)
}

// AssertSensorElectricalContextRequired checks if the required fields are not zero-ed
func AssertSensorElectricalContextRequired(obj SensorElectricalContext) error {
	return nil
}

// AssertSensorElectricalContextConstraints checks if the values respects the defined constraints
func AssertSensorElectricalContextConstraints(obj SensorElectricalContext) error {
	return nil
}
