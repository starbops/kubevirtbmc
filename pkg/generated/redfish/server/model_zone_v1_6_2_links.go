// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// ZoneV162Links - The links to other resources that are related to this resource.
type ZoneV162Links struct {

	// An array of links to the address pools associated with this zone.
	AddressPools []OdataV4IdRef `json:"AddressPools,omitempty"`

	// The number of items in a collection.
	AddressPoolsodataCount int64 `json:"AddressPools@odata.count,omitempty"`

	// An array of links to the zone that contain this zone.
	ContainedByZones []OdataV4IdRef `json:"ContainedByZones,omitempty"`

	// The number of items in a collection.
	ContainedByZonesodataCount int64 `json:"ContainedByZones@odata.count,omitempty"`

	// An array of links to the zones that are contained by this zone.
	ContainsZones []OdataV4IdRef `json:"ContainsZones,omitempty"`

	// The number of items in a collection.
	ContainsZonesodataCount int64 `json:"ContainsZones@odata.count,omitempty"`

	// The links to the endpoints that this zone contains.
	Endpoints []OdataV4IdRef `json:"Endpoints,omitempty"`

	// The number of items in a collection.
	EndpointsodataCount int64 `json:"Endpoints@odata.count,omitempty"`

	// The links to the collection of switches in this zone.
	InvolvedSwitches []OdataV4IdRef `json:"InvolvedSwitches,omitempty"`

	// The number of items in a collection.
	InvolvedSwitchesodataCount int64 `json:"InvolvedSwitches@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The links to the resource blocks with which this zone is associated.
	ResourceBlocks []OdataV4IdRef `json:"ResourceBlocks,omitempty"`

	// The number of items in a collection.
	ResourceBlocksodataCount int64 `json:"ResourceBlocks@odata.count,omitempty"`
}

// AssertZoneV162LinksRequired checks if the required fields are not zero-ed
func AssertZoneV162LinksRequired(obj ZoneV162Links) error {
	for _, el := range obj.AddressPools {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ContainedByZones {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ContainsZones {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.InvolvedSwitches {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ResourceBlocks {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertZoneV162LinksConstraints checks if the values respects the defined constraints
func AssertZoneV162LinksConstraints(obj ZoneV162Links) error {
	for _, el := range obj.AddressPools {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ContainedByZones {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ContainsZones {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.InvolvedSwitches {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ResourceBlocks {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
