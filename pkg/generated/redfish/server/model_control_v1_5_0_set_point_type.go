// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ControlV150SetPointType string

// List of ControlV150SetPointType
const (
	CONTROLV150SETPOINTTYPE_SINGLE ControlV150SetPointType = "Single"
	CONTROLV150SETPOINTTYPE_RANGE  ControlV150SetPointType = "Range"
)

// AllowedControlV150SetPointTypeEnumValues is all the allowed values of ControlV150SetPointType enum
var AllowedControlV150SetPointTypeEnumValues = []ControlV150SetPointType{
	"Single",
	"Range",
}

// validControlV150SetPointTypeEnumValue provides a map of ControlV150SetPointTypes for fast verification of use input
var validControlV150SetPointTypeEnumValues = map[ControlV150SetPointType]struct{}{
	"Single": {},
	"Range":  {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ControlV150SetPointType) IsValid() bool {
	_, ok := validControlV150SetPointTypeEnumValues[v]
	return ok
}

// NewControlV150SetPointTypeFromValue returns a pointer to a valid ControlV150SetPointType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewControlV150SetPointTypeFromValue(v string) (ControlV150SetPointType, error) {
	ev := ControlV150SetPointType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ControlV150SetPointType: valid values are %v", v, AllowedControlV150SetPointTypeEnumValues)
}

// AssertControlV150SetPointTypeRequired checks if the required fields are not zero-ed
func AssertControlV150SetPointTypeRequired(obj ControlV150SetPointType) error {
	return nil
}

// AssertControlV150SetPointTypeConstraints checks if the values respects the defined constraints
func AssertControlV150SetPointTypeConstraints(obj ControlV150SetPointType) error {
	return nil
}
