// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// LicenseV112AuthorizationScope : The authorization scope of the license.
type LicenseV112AuthorizationScope string

// List of LicenseV112AuthorizationScope
const (
	LICENSEV112AUTHORIZATIONSCOPE_DEVICE   LicenseV112AuthorizationScope = "Device"
	LICENSEV112AUTHORIZATIONSCOPE_CAPACITY LicenseV112AuthorizationScope = "Capacity"
	LICENSEV112AUTHORIZATIONSCOPE_SERVICE  LicenseV112AuthorizationScope = "Service"
)

// AllowedLicenseV112AuthorizationScopeEnumValues is all the allowed values of LicenseV112AuthorizationScope enum
var AllowedLicenseV112AuthorizationScopeEnumValues = []LicenseV112AuthorizationScope{
	"Device",
	"Capacity",
	"Service",
}

// validLicenseV112AuthorizationScopeEnumValue provides a map of LicenseV112AuthorizationScopes for fast verification of use input
var validLicenseV112AuthorizationScopeEnumValues = map[LicenseV112AuthorizationScope]struct{}{
	"Device":   {},
	"Capacity": {},
	"Service":  {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LicenseV112AuthorizationScope) IsValid() bool {
	_, ok := validLicenseV112AuthorizationScopeEnumValues[v]
	return ok
}

// NewLicenseV112AuthorizationScopeFromValue returns a pointer to a valid LicenseV112AuthorizationScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLicenseV112AuthorizationScopeFromValue(v string) (LicenseV112AuthorizationScope, error) {
	ev := LicenseV112AuthorizationScope(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for LicenseV112AuthorizationScope: valid values are %v", v, AllowedLicenseV112AuthorizationScopeEnumValues)
}

// AssertLicenseV112AuthorizationScopeRequired checks if the required fields are not zero-ed
func AssertLicenseV112AuthorizationScopeRequired(obj LicenseV112AuthorizationScope) error {
	return nil
}

// AssertLicenseV112AuthorizationScopeConstraints checks if the values respects the defined constraints
func AssertLicenseV112AuthorizationScopeConstraints(obj LicenseV112AuthorizationScope) error {
	return nil
}
