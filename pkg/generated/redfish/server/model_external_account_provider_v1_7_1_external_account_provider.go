// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// ExternalAccountProviderV171ExternalAccountProvider - The ExternalAccountProvider schema represents a remote service that provides accounts for this manager to use for authentication.
type ExternalAccountProviderV171ExternalAccountProvider struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	AccountProviderType ExternalAccountProviderV171AccountProviderTypes `json:"AccountProviderType,omitempty"`

	Actions ExternalAccountProviderV171Actions `json:"Actions,omitempty"`

	Authentication ExternalAccountProviderV171Authentication `json:"Authentication,omitempty"`

	Certificates OdataV4IdRef `json:"Certificates,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	LDAPService ExternalAccountProviderV171LdapService `json:"LDAPService,omitempty"`

	Links ExternalAccountProviderV171Links `json:"Links,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	OAuth2Service ExternalAccountProviderV171OAuth2Service `json:"OAuth2Service,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The authentication priority for the external account provider.
	Priority *int64 `json:"Priority,omitempty"`

	// The mapping rules to convert the external account providers account information to the local Redfish role.
	RemoteRoleMapping []ExternalAccountProviderV171RoleMapping `json:"RemoteRoleMapping,omitempty"`

	// The number of times to retry connecting to an address in the ServiceAddresses property before attempting the next address in the array.
	Retries *int64 `json:"Retries,omitempty"`

	// The addresses of the user account providers to which this external account provider links.  The format of this field depends on the type of external account provider.
	ServiceAddresses []*string `json:"ServiceAddresses,omitempty"`

	// An indication of whether this service is enabled.
	ServiceEnabled *bool `json:"ServiceEnabled,omitempty"`

	TACACSplusService ExternalAccountProviderV171TacacSplusService `json:"TACACSplusService,omitempty"`

	// The period of time, in seconds, this account service will wait for a response from an address of a user account provider before timing out.
	TimeoutSeconds *int64 `json:"TimeoutSeconds,omitempty"`
}

// AssertExternalAccountProviderV171ExternalAccountProviderRequired checks if the required fields are not zero-ed
func AssertExternalAccountProviderV171ExternalAccountProviderRequired(obj ExternalAccountProviderV171ExternalAccountProvider) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertExternalAccountProviderV171ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertExternalAccountProviderV171AuthenticationRequired(obj.Authentication); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Certificates); err != nil {
		return err
	}
	if err := AssertExternalAccountProviderV171LdapServiceRequired(obj.LDAPService); err != nil {
		return err
	}
	if err := AssertExternalAccountProviderV171LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertExternalAccountProviderV171OAuth2ServiceRequired(obj.OAuth2Service); err != nil {
		return err
	}
	for _, el := range obj.RemoteRoleMapping {
		if err := AssertExternalAccountProviderV171RoleMappingRequired(el); err != nil {
			return err
		}
	}
	if err := AssertExternalAccountProviderV171TacacSplusServiceRequired(obj.TACACSplusService); err != nil {
		return err
	}
	return nil
}

// AssertExternalAccountProviderV171ExternalAccountProviderConstraints checks if the values respects the defined constraints
func AssertExternalAccountProviderV171ExternalAccountProviderConstraints(obj ExternalAccountProviderV171ExternalAccountProvider) error {
	if err := AssertExternalAccountProviderV171ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertExternalAccountProviderV171AuthenticationConstraints(obj.Authentication); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Certificates); err != nil {
		return err
	}
	if err := AssertExternalAccountProviderV171LdapServiceConstraints(obj.LDAPService); err != nil {
		return err
	}
	if err := AssertExternalAccountProviderV171LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertExternalAccountProviderV171OAuth2ServiceConstraints(obj.OAuth2Service); err != nil {
		return err
	}
	if obj.Priority != nil && *obj.Priority < 0 {
		return &ParsingError{Param: "Priority", Err: errors.New(errMsgMinValueConstraint)}
	}
	for _, el := range obj.RemoteRoleMapping {
		if err := AssertExternalAccountProviderV171RoleMappingConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertExternalAccountProviderV171TacacSplusServiceConstraints(obj.TACACSplusService); err != nil {
		return err
	}
	return nil
}
