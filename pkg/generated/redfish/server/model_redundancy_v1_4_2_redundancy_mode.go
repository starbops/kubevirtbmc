// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type RedundancyV142RedundancyMode string

// List of RedundancyV142RedundancyMode
const (
	REDUNDANCYV142REDUNDANCYMODE_FAILOVER      RedundancyV142RedundancyMode = "Failover"
	REDUNDANCYV142REDUNDANCYMODE_NM            RedundancyV142RedundancyMode = "N+m"
	REDUNDANCYV142REDUNDANCYMODE_SHARING       RedundancyV142RedundancyMode = "Sharing"
	REDUNDANCYV142REDUNDANCYMODE_SPARING       RedundancyV142RedundancyMode = "Sparing"
	REDUNDANCYV142REDUNDANCYMODE_NOT_REDUNDANT RedundancyV142RedundancyMode = "NotRedundant"
)

// AllowedRedundancyV142RedundancyModeEnumValues is all the allowed values of RedundancyV142RedundancyMode enum
var AllowedRedundancyV142RedundancyModeEnumValues = []RedundancyV142RedundancyMode{
	"Failover",
	"N+m",
	"Sharing",
	"Sparing",
	"NotRedundant",
}

// validRedundancyV142RedundancyModeEnumValue provides a map of RedundancyV142RedundancyModes for fast verification of use input
var validRedundancyV142RedundancyModeEnumValues = map[RedundancyV142RedundancyMode]struct{}{
	"Failover":     {},
	"N+m":          {},
	"Sharing":      {},
	"Sparing":      {},
	"NotRedundant": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RedundancyV142RedundancyMode) IsValid() bool {
	_, ok := validRedundancyV142RedundancyModeEnumValues[v]
	return ok
}

// NewRedundancyV142RedundancyModeFromValue returns a pointer to a valid RedundancyV142RedundancyMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRedundancyV142RedundancyModeFromValue(v string) (RedundancyV142RedundancyMode, error) {
	ev := RedundancyV142RedundancyMode(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for RedundancyV142RedundancyMode: valid values are %v", v, AllowedRedundancyV142RedundancyModeEnumValues)
}

// AssertRedundancyV142RedundancyModeRequired checks if the required fields are not zero-ed
func AssertRedundancyV142RedundancyModeRequired(obj RedundancyV142RedundancyMode) error {
	return nil
}

// AssertRedundancyV142RedundancyModeConstraints checks if the values respects the defined constraints
func AssertRedundancyV142RedundancyModeConstraints(obj RedundancyV142RedundancyMode) error {
	return nil
}
