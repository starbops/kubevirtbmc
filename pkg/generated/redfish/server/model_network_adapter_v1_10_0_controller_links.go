// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// NetworkAdapterV1100ControllerLinks - The links to other resources that are related to this resource.
type NetworkAdapterV1100ControllerLinks struct {
	ActiveSoftwareImage OdataV4IdRef `json:"ActiveSoftwareImage,omitempty"`

	// An array of links to the network device functions associated with this network controller.
	NetworkDeviceFunctions []OdataV4IdRef `json:"NetworkDeviceFunctions,omitempty"`

	// The number of items in a collection.
	NetworkDeviceFunctionsodataCount int64 `json:"NetworkDeviceFunctions@odata.count,omitempty"`

	// An array of links to the network ports associated with this network controller.
	// Deprecated
	NetworkPorts []OdataV4IdRef `json:"NetworkPorts,omitempty"`

	// The number of items in a collection.
	NetworkPortsodataCount int64 `json:"NetworkPorts@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An array of links to the PCIe devices associated with this network controller.
	PCIeDevices []OdataV4IdRef `json:"PCIeDevices,omitempty"`

	// The number of items in a collection.
	PCIeDevicesodataCount int64 `json:"PCIeDevices@odata.count,omitempty"`

	// An array of links to the ports associated with this network controller.
	Ports []OdataV4IdRef `json:"Ports,omitempty"`

	// The number of items in a collection.
	PortsodataCount int64 `json:"Ports@odata.count,omitempty"`

	// The images that are associated with this controller.
	SoftwareImages []OdataV4IdRef `json:"SoftwareImages,omitempty"`

	// The number of items in a collection.
	SoftwareImagesodataCount int64 `json:"SoftwareImages@odata.count,omitempty"`
}

// AssertNetworkAdapterV1100ControllerLinksRequired checks if the required fields are not zero-ed
func AssertNetworkAdapterV1100ControllerLinksRequired(obj NetworkAdapterV1100ControllerLinks) error {
	if err := AssertOdataV4IdRefRequired(obj.ActiveSoftwareImage); err != nil {
		return err
	}
	for _, el := range obj.NetworkDeviceFunctions {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NetworkPorts {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PCIeDevices {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ports {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SoftwareImages {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertNetworkAdapterV1100ControllerLinksConstraints checks if the values respects the defined constraints
func AssertNetworkAdapterV1100ControllerLinksConstraints(obj NetworkAdapterV1100ControllerLinks) error {
	if err := AssertOdataV4IdRefConstraints(obj.ActiveSoftwareImage); err != nil {
		return err
	}
	for _, el := range obj.NetworkDeviceFunctions {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NetworkPorts {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PCIeDevices {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ports {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SoftwareImages {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
