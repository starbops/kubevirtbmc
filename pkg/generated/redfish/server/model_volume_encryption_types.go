// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type VolumeEncryptionTypes string

// List of VolumeEncryptionTypes
const (
	VOLUMEENCRYPTIONTYPES_NATIVE_DRIVE_ENCRYPTION VolumeEncryptionTypes = "NativeDriveEncryption"
	VOLUMEENCRYPTIONTYPES_CONTROLLER_ASSISTED     VolumeEncryptionTypes = "ControllerAssisted"
	VOLUMEENCRYPTIONTYPES_SOFTWARE_ASSISTED       VolumeEncryptionTypes = "SoftwareAssisted"
)

// AllowedVolumeEncryptionTypesEnumValues is all the allowed values of VolumeEncryptionTypes enum
var AllowedVolumeEncryptionTypesEnumValues = []VolumeEncryptionTypes{
	"NativeDriveEncryption",
	"ControllerAssisted",
	"SoftwareAssisted",
}

// validVolumeEncryptionTypesEnumValue provides a map of VolumeEncryptionTypess for fast verification of use input
var validVolumeEncryptionTypesEnumValues = map[VolumeEncryptionTypes]struct{}{
	"NativeDriveEncryption": {},
	"ControllerAssisted":    {},
	"SoftwareAssisted":      {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeEncryptionTypes) IsValid() bool {
	_, ok := validVolumeEncryptionTypesEnumValues[v]
	return ok
}

// NewVolumeEncryptionTypesFromValue returns a pointer to a valid VolumeEncryptionTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeEncryptionTypesFromValue(v string) (VolumeEncryptionTypes, error) {
	ev := VolumeEncryptionTypes(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for VolumeEncryptionTypes: valid values are %v", v, AllowedVolumeEncryptionTypesEnumValues)
}

// AssertVolumeEncryptionTypesRequired checks if the required fields are not zero-ed
func AssertVolumeEncryptionTypesRequired(obj VolumeEncryptionTypes) error {
	return nil
}

// AssertVolumeEncryptionTypesConstraints checks if the values respects the defined constraints
func AssertVolumeEncryptionTypesConstraints(obj VolumeEncryptionTypes) error {
	return nil
}
