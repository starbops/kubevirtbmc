// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type EventEventType string

// List of EventEventType
const (
	EVENTEVENTTYPE_STATUS_CHANGE    EventEventType = "StatusChange"
	EVENTEVENTTYPE_RESOURCE_UPDATED EventEventType = "ResourceUpdated"
	EVENTEVENTTYPE_RESOURCE_ADDED   EventEventType = "ResourceAdded"
	EVENTEVENTTYPE_RESOURCE_REMOVED EventEventType = "ResourceRemoved"
	EVENTEVENTTYPE_ALERT            EventEventType = "Alert"
	EVENTEVENTTYPE_METRIC_REPORT    EventEventType = "MetricReport"
	EVENTEVENTTYPE_OTHER            EventEventType = "Other"
)

// AllowedEventEventTypeEnumValues is all the allowed values of EventEventType enum
var AllowedEventEventTypeEnumValues = []EventEventType{
	"StatusChange",
	"ResourceUpdated",
	"ResourceAdded",
	"ResourceRemoved",
	"Alert",
	"MetricReport",
	"Other",
}

// validEventEventTypeEnumValue provides a map of EventEventTypes for fast verification of use input
var validEventEventTypeEnumValues = map[EventEventType]struct{}{
	"StatusChange":    {},
	"ResourceUpdated": {},
	"ResourceAdded":   {},
	"ResourceRemoved": {},
	"Alert":           {},
	"MetricReport":    {},
	"Other":           {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventEventType) IsValid() bool {
	_, ok := validEventEventTypeEnumValues[v]
	return ok
}

// NewEventEventTypeFromValue returns a pointer to a valid EventEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventEventTypeFromValue(v string) (EventEventType, error) {
	ev := EventEventType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for EventEventType: valid values are %v", v, AllowedEventEventTypeEnumValues)
}

// AssertEventEventTypeRequired checks if the required fields are not zero-ed
func AssertEventEventTypeRequired(obj EventEventType) error {
	return nil
}

// AssertEventEventTypeConstraints checks if the values respects the defined constraints
func AssertEventEventTypeConstraints(obj EventEventType) error {
	return nil
}
