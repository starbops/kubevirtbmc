// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// LicenseServiceV111LicenseService - The LicenseService schema describes the license service and the properties for the service itself with a link to the collection of licenses.  The license service also provides methods for installing licenses in a Redfish service.
type LicenseServiceV111LicenseService struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions LicenseServiceV111Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The number of days prior to a license expiration that a warning message is sent.  A value of zero indicates no warning message is sent.
	LicenseExpirationWarningDays *int64 `json:"LicenseExpirationWarningDays,omitempty"`

	Licenses OdataV4IdRef `json:"Licenses,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An indication of whether this service is enabled.
	ServiceEnabled *bool `json:"ServiceEnabled,omitempty"`
}

// AssertLicenseServiceV111LicenseServiceRequired checks if the required fields are not zero-ed
func AssertLicenseServiceV111LicenseServiceRequired(obj LicenseServiceV111LicenseService) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertLicenseServiceV111ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Licenses); err != nil {
		return err
	}
	return nil
}

// AssertLicenseServiceV111LicenseServiceConstraints checks if the values respects the defined constraints
func AssertLicenseServiceV111LicenseServiceConstraints(obj LicenseServiceV111LicenseService) error {
	if err := AssertLicenseServiceV111ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Licenses); err != nil {
		return err
	}
	return nil
}
