// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type AccountServiceV1150AccountProviderTypes string

// List of AccountServiceV1150AccountProviderTypes
const (
	ACCOUNTSERVICEV1150ACCOUNTPROVIDERTYPES_REDFISH_SERVICE          AccountServiceV1150AccountProviderTypes = "RedfishService"
	ACCOUNTSERVICEV1150ACCOUNTPROVIDERTYPES_ACTIVE_DIRECTORY_SERVICE AccountServiceV1150AccountProviderTypes = "ActiveDirectoryService"
	ACCOUNTSERVICEV1150ACCOUNTPROVIDERTYPES_LDAP_SERVICE             AccountServiceV1150AccountProviderTypes = "LDAPService"
	ACCOUNTSERVICEV1150ACCOUNTPROVIDERTYPES_OEM                      AccountServiceV1150AccountProviderTypes = "OEM"
	ACCOUNTSERVICEV1150ACCOUNTPROVIDERTYPES_TACAC_SPLUS              AccountServiceV1150AccountProviderTypes = "TACACSplus"
	ACCOUNTSERVICEV1150ACCOUNTPROVIDERTYPES_O_AUTH2                  AccountServiceV1150AccountProviderTypes = "OAuth2"
)

// AllowedAccountServiceV1150AccountProviderTypesEnumValues is all the allowed values of AccountServiceV1150AccountProviderTypes enum
var AllowedAccountServiceV1150AccountProviderTypesEnumValues = []AccountServiceV1150AccountProviderTypes{
	"RedfishService",
	"ActiveDirectoryService",
	"LDAPService",
	"OEM",
	"TACACSplus",
	"OAuth2",
}

// validAccountServiceV1150AccountProviderTypesEnumValue provides a map of AccountServiceV1150AccountProviderTypess for fast verification of use input
var validAccountServiceV1150AccountProviderTypesEnumValues = map[AccountServiceV1150AccountProviderTypes]struct{}{
	"RedfishService":         {},
	"ActiveDirectoryService": {},
	"LDAPService":            {},
	"OEM":                    {},
	"TACACSplus":             {},
	"OAuth2":                 {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountServiceV1150AccountProviderTypes) IsValid() bool {
	_, ok := validAccountServiceV1150AccountProviderTypesEnumValues[v]
	return ok
}

// NewAccountServiceV1150AccountProviderTypesFromValue returns a pointer to a valid AccountServiceV1150AccountProviderTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountServiceV1150AccountProviderTypesFromValue(v string) (AccountServiceV1150AccountProviderTypes, error) {
	ev := AccountServiceV1150AccountProviderTypes(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for AccountServiceV1150AccountProviderTypes: valid values are %v", v, AllowedAccountServiceV1150AccountProviderTypesEnumValues)
}

// AssertAccountServiceV1150AccountProviderTypesRequired checks if the required fields are not zero-ed
func AssertAccountServiceV1150AccountProviderTypesRequired(obj AccountServiceV1150AccountProviderTypes) error {
	return nil
}

// AssertAccountServiceV1150AccountProviderTypesConstraints checks if the values respects the defined constraints
func AssertAccountServiceV1150AccountProviderTypesConstraints(obj AccountServiceV1150AccountProviderTypes) error {
	return nil
}
