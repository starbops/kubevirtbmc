// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// SerialInterfaceV120SerialInterface - The SerialInterface schema describes an asynchronous serial interface, such as an RS-232 interface, available to a system or device.
type SerialInterfaceV120SerialInterface struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions SerialInterfaceV120Actions `json:"Actions,omitempty"`

	BitRate SerialInterfaceV120BitRate `json:"BitRate,omitempty"`

	ConnectorType SerialInterfaceV120ConnectorType `json:"ConnectorType,omitempty"`

	DataBits SerialInterfaceV120DataBits `json:"DataBits,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	FlowControl SerialInterfaceV120FlowControl `json:"FlowControl,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// An indication of whether this interface is enabled.
	InterfaceEnabled *bool `json:"InterfaceEnabled,omitempty"`

	Links SerialInterfaceV120Links `json:"Links,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	Parity SerialInterfaceV120Parity `json:"Parity,omitempty"`

	PinOut SerialInterfaceV120PinOut `json:"PinOut,omitempty"`

	SignalType SerialInterfaceV120SignalType `json:"SignalType,omitempty"`

	StopBits SerialInterfaceV120StopBits `json:"StopBits,omitempty"`
}

// AssertSerialInterfaceV120SerialInterfaceRequired checks if the required fields are not zero-ed
func AssertSerialInterfaceV120SerialInterfaceRequired(obj SerialInterfaceV120SerialInterface) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSerialInterfaceV120ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertSerialInterfaceV120LinksRequired(obj.Links); err != nil {
		return err
	}
	return nil
}

// AssertSerialInterfaceV120SerialInterfaceConstraints checks if the values respects the defined constraints
func AssertSerialInterfaceV120SerialInterfaceConstraints(obj SerialInterfaceV120SerialInterface) error {
	if err := AssertSerialInterfaceV120ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertSerialInterfaceV120LinksConstraints(obj.Links); err != nil {
		return err
	}
	return nil
}
