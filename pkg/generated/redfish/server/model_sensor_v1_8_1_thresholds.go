// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// SensorV181Thresholds - The set of thresholds defined for a sensor.
type SensorV181Thresholds struct {
	LowerCaution SensorV181Threshold `json:"LowerCaution,omitempty"`

	LowerCautionUser SensorV181Threshold `json:"LowerCautionUser,omitempty"`

	LowerCritical SensorV181Threshold `json:"LowerCritical,omitempty"`

	LowerCriticalUser SensorV181Threshold `json:"LowerCriticalUser,omitempty"`

	LowerFatal SensorV181Threshold `json:"LowerFatal,omitempty"`

	UpperCaution SensorV181Threshold `json:"UpperCaution,omitempty"`

	UpperCautionUser SensorV181Threshold `json:"UpperCautionUser,omitempty"`

	UpperCritical SensorV181Threshold `json:"UpperCritical,omitempty"`

	UpperCriticalUser SensorV181Threshold `json:"UpperCriticalUser,omitempty"`

	UpperFatal SensorV181Threshold `json:"UpperFatal,omitempty"`
}

// AssertSensorV181ThresholdsRequired checks if the required fields are not zero-ed
func AssertSensorV181ThresholdsRequired(obj SensorV181Thresholds) error {
	if err := AssertSensorV181ThresholdRequired(obj.LowerCaution); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdRequired(obj.LowerCautionUser); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdRequired(obj.LowerCritical); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdRequired(obj.LowerCriticalUser); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdRequired(obj.LowerFatal); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdRequired(obj.UpperCaution); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdRequired(obj.UpperCautionUser); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdRequired(obj.UpperCritical); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdRequired(obj.UpperCriticalUser); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdRequired(obj.UpperFatal); err != nil {
		return err
	}
	return nil
}

// AssertSensorV181ThresholdsConstraints checks if the values respects the defined constraints
func AssertSensorV181ThresholdsConstraints(obj SensorV181Thresholds) error {
	if err := AssertSensorV181ThresholdConstraints(obj.LowerCaution); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdConstraints(obj.LowerCautionUser); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdConstraints(obj.LowerCritical); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdConstraints(obj.LowerCriticalUser); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdConstraints(obj.LowerFatal); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdConstraints(obj.UpperCaution); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdConstraints(obj.UpperCautionUser); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdConstraints(obj.UpperCritical); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdConstraints(obj.UpperCriticalUser); err != nil {
		return err
	}
	if err := AssertSensorV181ThresholdConstraints(obj.UpperFatal); err != nil {
		return err
	}
	return nil
}
