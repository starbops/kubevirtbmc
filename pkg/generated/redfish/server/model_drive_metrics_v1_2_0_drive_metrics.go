// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// DriveMetricsV120DriveMetrics - The usage and health statistics for a drive.
type DriveMetricsV120DriveMetrics struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions DriveMetricsV120Actions `json:"Actions,omitempty"`

	// The total number of bad blocks reported by the drive.
	BadBlockCount *int64 `json:"BadBlockCount,omitempty"`

	// The number of correctable read errors for the lifetime of the drive.
	CorrectableIOReadErrorCount *int64 `json:"CorrectableIOReadErrorCount,omitempty"`

	// The number of correctable write errors for the lifetime of the drive.
	CorrectableIOWriteErrorCount *int64 `json:"CorrectableIOWriteErrorCount,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	NVMeSMART StorageControllerMetricsNvmeSmartMetrics `json:"NVMeSMART,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The current depth of the Native Command Queue.
	NativeCommandQueueDepth *int64 `json:"NativeCommandQueueDepth,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The number of power-on hours for the lifetime of the drive.
	PowerOnHours *float32 `json:"PowerOnHours,omitempty"`

	// The number of kibibytes read.
	ReadIOKiBytes *int64 `json:"ReadIOKiBytes,omitempty"`

	// The number of uncorrectable read errors for the lifetime of the drive.
	UncorrectableIOReadErrorCount *int64 `json:"UncorrectableIOReadErrorCount,omitempty"`

	// The number of uncorrectable write errors for the lifetime of the drive.
	UncorrectableIOWriteErrorCount *int64 `json:"UncorrectableIOWriteErrorCount,omitempty"`

	// The number of kibibytes written.
	WriteIOKiBytes *int64 `json:"WriteIOKiBytes,omitempty"`
}

// AssertDriveMetricsV120DriveMetricsRequired checks if the required fields are not zero-ed
func AssertDriveMetricsV120DriveMetricsRequired(obj DriveMetricsV120DriveMetrics) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertDriveMetricsV120ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertStorageControllerMetricsNvmeSmartMetricsRequired(obj.NVMeSMART); err != nil {
		return err
	}
	return nil
}

// AssertDriveMetricsV120DriveMetricsConstraints checks if the values respects the defined constraints
func AssertDriveMetricsV120DriveMetricsConstraints(obj DriveMetricsV120DriveMetrics) error {
	if err := AssertDriveMetricsV120ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertStorageControllerMetricsNvmeSmartMetricsConstraints(obj.NVMeSMART); err != nil {
		return err
	}
	return nil
}
