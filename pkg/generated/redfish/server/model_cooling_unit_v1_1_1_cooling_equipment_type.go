// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type CoolingUnitV111CoolingEquipmentType string

// List of CoolingUnitV111CoolingEquipmentType
const (
	COOLINGUNITV111COOLINGEQUIPMENTTYPE_CDU            CoolingUnitV111CoolingEquipmentType = "CDU"
	COOLINGUNITV111COOLINGEQUIPMENTTYPE_HEAT_EXCHANGER CoolingUnitV111CoolingEquipmentType = "HeatExchanger"
	COOLINGUNITV111COOLINGEQUIPMENTTYPE_IMMERSION_UNIT CoolingUnitV111CoolingEquipmentType = "ImmersionUnit"
)

// AllowedCoolingUnitV111CoolingEquipmentTypeEnumValues is all the allowed values of CoolingUnitV111CoolingEquipmentType enum
var AllowedCoolingUnitV111CoolingEquipmentTypeEnumValues = []CoolingUnitV111CoolingEquipmentType{
	"CDU",
	"HeatExchanger",
	"ImmersionUnit",
}

// validCoolingUnitV111CoolingEquipmentTypeEnumValue provides a map of CoolingUnitV111CoolingEquipmentTypes for fast verification of use input
var validCoolingUnitV111CoolingEquipmentTypeEnumValues = map[CoolingUnitV111CoolingEquipmentType]struct{}{
	"CDU":           {},
	"HeatExchanger": {},
	"ImmersionUnit": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CoolingUnitV111CoolingEquipmentType) IsValid() bool {
	_, ok := validCoolingUnitV111CoolingEquipmentTypeEnumValues[v]
	return ok
}

// NewCoolingUnitV111CoolingEquipmentTypeFromValue returns a pointer to a valid CoolingUnitV111CoolingEquipmentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCoolingUnitV111CoolingEquipmentTypeFromValue(v string) (CoolingUnitV111CoolingEquipmentType, error) {
	ev := CoolingUnitV111CoolingEquipmentType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for CoolingUnitV111CoolingEquipmentType: valid values are %v", v, AllowedCoolingUnitV111CoolingEquipmentTypeEnumValues)
}

// AssertCoolingUnitV111CoolingEquipmentTypeRequired checks if the required fields are not zero-ed
func AssertCoolingUnitV111CoolingEquipmentTypeRequired(obj CoolingUnitV111CoolingEquipmentType) error {
	return nil
}

// AssertCoolingUnitV111CoolingEquipmentTypeConstraints checks if the values respects the defined constraints
func AssertCoolingUnitV111CoolingEquipmentTypeConstraints(obj CoolingUnitV111CoolingEquipmentType) error {
	return nil
}
