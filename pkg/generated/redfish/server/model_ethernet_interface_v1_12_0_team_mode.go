// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type EthernetInterfaceV1120TeamMode string

// List of EthernetInterfaceV1120TeamMode
const (
	ETHERNETINTERFACEV1120TEAMMODE_NONE                             EthernetInterfaceV1120TeamMode = "None"
	ETHERNETINTERFACEV1120TEAMMODE_ROUND_ROBIN                      EthernetInterfaceV1120TeamMode = "RoundRobin"
	ETHERNETINTERFACEV1120TEAMMODE_ACTIVE_BACKUP                    EthernetInterfaceV1120TeamMode = "ActiveBackup"
	ETHERNETINTERFACEV1120TEAMMODE_XOR                              EthernetInterfaceV1120TeamMode = "XOR"
	ETHERNETINTERFACEV1120TEAMMODE_BROADCAST                        EthernetInterfaceV1120TeamMode = "Broadcast"
	ETHERNETINTERFACEV1120TEAMMODE_IEEE802_3AD                      EthernetInterfaceV1120TeamMode = "IEEE802_3ad"
	ETHERNETINTERFACEV1120TEAMMODE_ADAPTIVE_TRANSMIT_LOAD_BALANCING EthernetInterfaceV1120TeamMode = "AdaptiveTransmitLoadBalancing"
	ETHERNETINTERFACEV1120TEAMMODE_ADAPTIVE_LOAD_BALANCING          EthernetInterfaceV1120TeamMode = "AdaptiveLoadBalancing"
)

// AllowedEthernetInterfaceV1120TeamModeEnumValues is all the allowed values of EthernetInterfaceV1120TeamMode enum
var AllowedEthernetInterfaceV1120TeamModeEnumValues = []EthernetInterfaceV1120TeamMode{
	"None",
	"RoundRobin",
	"ActiveBackup",
	"XOR",
	"Broadcast",
	"IEEE802_3ad",
	"AdaptiveTransmitLoadBalancing",
	"AdaptiveLoadBalancing",
}

// validEthernetInterfaceV1120TeamModeEnumValue provides a map of EthernetInterfaceV1120TeamModes for fast verification of use input
var validEthernetInterfaceV1120TeamModeEnumValues = map[EthernetInterfaceV1120TeamMode]struct{}{
	"None":                          {},
	"RoundRobin":                    {},
	"ActiveBackup":                  {},
	"XOR":                           {},
	"Broadcast":                     {},
	"IEEE802_3ad":                   {},
	"AdaptiveTransmitLoadBalancing": {},
	"AdaptiveLoadBalancing":         {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EthernetInterfaceV1120TeamMode) IsValid() bool {
	_, ok := validEthernetInterfaceV1120TeamModeEnumValues[v]
	return ok
}

// NewEthernetInterfaceV1120TeamModeFromValue returns a pointer to a valid EthernetInterfaceV1120TeamMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEthernetInterfaceV1120TeamModeFromValue(v string) (EthernetInterfaceV1120TeamMode, error) {
	ev := EthernetInterfaceV1120TeamMode(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for EthernetInterfaceV1120TeamMode: valid values are %v", v, AllowedEthernetInterfaceV1120TeamModeEnumValues)
}

// AssertEthernetInterfaceV1120TeamModeRequired checks if the required fields are not zero-ed
func AssertEthernetInterfaceV1120TeamModeRequired(obj EthernetInterfaceV1120TeamMode) error {
	return nil
}

// AssertEthernetInterfaceV1120TeamModeConstraints checks if the values respects the defined constraints
func AssertEthernetInterfaceV1120TeamModeConstraints(obj EthernetInterfaceV1120TeamMode) error {
	return nil
}
