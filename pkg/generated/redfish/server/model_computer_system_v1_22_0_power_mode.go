// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ComputerSystemV1220PowerMode string

// List of ComputerSystemV1220PowerMode
const (
	COMPUTERSYSTEMV1220POWERMODE_MAXIMUM_PERFORMANCE          ComputerSystemV1220PowerMode = "MaximumPerformance"
	COMPUTERSYSTEMV1220POWERMODE_BALANCED_PERFORMANCE         ComputerSystemV1220PowerMode = "BalancedPerformance"
	COMPUTERSYSTEMV1220POWERMODE_POWER_SAVING                 ComputerSystemV1220PowerMode = "PowerSaving"
	COMPUTERSYSTEMV1220POWERMODE_STATIC                       ComputerSystemV1220PowerMode = "Static"
	COMPUTERSYSTEMV1220POWERMODE_OS_CONTROLLED                ComputerSystemV1220PowerMode = "OSControlled"
	COMPUTERSYSTEMV1220POWERMODE_OEM                          ComputerSystemV1220PowerMode = "OEM"
	COMPUTERSYSTEMV1220POWERMODE_EFFICIENCY_FAVOR_POWER       ComputerSystemV1220PowerMode = "EfficiencyFavorPower"
	COMPUTERSYSTEMV1220POWERMODE_EFFICIENCY_FAVOR_PERFORMANCE ComputerSystemV1220PowerMode = "EfficiencyFavorPerformance"
)

// AllowedComputerSystemV1220PowerModeEnumValues is all the allowed values of ComputerSystemV1220PowerMode enum
var AllowedComputerSystemV1220PowerModeEnumValues = []ComputerSystemV1220PowerMode{
	"MaximumPerformance",
	"BalancedPerformance",
	"PowerSaving",
	"Static",
	"OSControlled",
	"OEM",
	"EfficiencyFavorPower",
	"EfficiencyFavorPerformance",
}

// validComputerSystemV1220PowerModeEnumValue provides a map of ComputerSystemV1220PowerModes for fast verification of use input
var validComputerSystemV1220PowerModeEnumValues = map[ComputerSystemV1220PowerMode]struct{}{
	"MaximumPerformance":         {},
	"BalancedPerformance":        {},
	"PowerSaving":                {},
	"Static":                     {},
	"OSControlled":               {},
	"OEM":                        {},
	"EfficiencyFavorPower":       {},
	"EfficiencyFavorPerformance": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ComputerSystemV1220PowerMode) IsValid() bool {
	_, ok := validComputerSystemV1220PowerModeEnumValues[v]
	return ok
}

// NewComputerSystemV1220PowerModeFromValue returns a pointer to a valid ComputerSystemV1220PowerMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewComputerSystemV1220PowerModeFromValue(v string) (ComputerSystemV1220PowerMode, error) {
	ev := ComputerSystemV1220PowerMode(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ComputerSystemV1220PowerMode: valid values are %v", v, AllowedComputerSystemV1220PowerModeEnumValues)
}

// AssertComputerSystemV1220PowerModeRequired checks if the required fields are not zero-ed
func AssertComputerSystemV1220PowerModeRequired(obj ComputerSystemV1220PowerMode) error {
	return nil
}

// AssertComputerSystemV1220PowerModeConstraints checks if the values respects the defined constraints
func AssertComputerSystemV1220PowerModeConstraints(obj ComputerSystemV1220PowerMode) error {
	return nil
}
