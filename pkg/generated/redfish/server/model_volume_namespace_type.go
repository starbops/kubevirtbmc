// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type VolumeNamespaceType string

// List of VolumeNamespaceType
const (
	VOLUMENAMESPACETYPE_BLOCK         VolumeNamespaceType = "Block"
	VOLUMENAMESPACETYPE_KEY_VALUE     VolumeNamespaceType = "KeyValue"
	VOLUMENAMESPACETYPE_ZNS           VolumeNamespaceType = "ZNS"
	VOLUMENAMESPACETYPE_COMPUTATIONAL VolumeNamespaceType = "Computational"
)

// AllowedVolumeNamespaceTypeEnumValues is all the allowed values of VolumeNamespaceType enum
var AllowedVolumeNamespaceTypeEnumValues = []VolumeNamespaceType{
	"Block",
	"KeyValue",
	"ZNS",
	"Computational",
}

// validVolumeNamespaceTypeEnumValue provides a map of VolumeNamespaceTypes for fast verification of use input
var validVolumeNamespaceTypeEnumValues = map[VolumeNamespaceType]struct{}{
	"Block":         {},
	"KeyValue":      {},
	"ZNS":           {},
	"Computational": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeNamespaceType) IsValid() bool {
	_, ok := validVolumeNamespaceTypeEnumValues[v]
	return ok
}

// NewVolumeNamespaceTypeFromValue returns a pointer to a valid VolumeNamespaceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeNamespaceTypeFromValue(v string) (VolumeNamespaceType, error) {
	ev := VolumeNamespaceType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for VolumeNamespaceType: valid values are %v", v, AllowedVolumeNamespaceTypeEnumValues)
}

// AssertVolumeNamespaceTypeRequired checks if the required fields are not zero-ed
func AssertVolumeNamespaceTypeRequired(obj VolumeNamespaceType) error {
	return nil
}

// AssertVolumeNamespaceTypeConstraints checks if the values respects the defined constraints
func AssertVolumeNamespaceTypeConstraints(obj VolumeNamespaceType) error {
	return nil
}
