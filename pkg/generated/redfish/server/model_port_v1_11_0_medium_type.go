// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PortV1110MediumType string

// List of PortV1110MediumType
const (
	PORTV1110MEDIUMTYPE_COPPER      PortV1110MediumType = "Copper"
	PORTV1110MEDIUMTYPE_FIBER_OPTIC PortV1110MediumType = "FiberOptic"
)

// AllowedPortV1110MediumTypeEnumValues is all the allowed values of PortV1110MediumType enum
var AllowedPortV1110MediumTypeEnumValues = []PortV1110MediumType{
	"Copper",
	"FiberOptic",
}

// validPortV1110MediumTypeEnumValue provides a map of PortV1110MediumTypes for fast verification of use input
var validPortV1110MediumTypeEnumValues = map[PortV1110MediumType]struct{}{
	"Copper":     {},
	"FiberOptic": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortV1110MediumType) IsValid() bool {
	_, ok := validPortV1110MediumTypeEnumValues[v]
	return ok
}

// NewPortV1110MediumTypeFromValue returns a pointer to a valid PortV1110MediumType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortV1110MediumTypeFromValue(v string) (PortV1110MediumType, error) {
	ev := PortV1110MediumType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PortV1110MediumType: valid values are %v", v, AllowedPortV1110MediumTypeEnumValues)
}

// AssertPortV1110MediumTypeRequired checks if the required fields are not zero-ed
func AssertPortV1110MediumTypeRequired(obj PortV1110MediumType) error {
	return nil
}

// AssertPortV1110MediumTypeConstraints checks if the values respects the defined constraints
func AssertPortV1110MediumTypeConstraints(obj PortV1110MediumType) error {
	return nil
}
