// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// NetworkDeviceFunctionV191FibreChannel - This type describes Fibre Channel capabilities, status, and configuration for a network device function.
type NetworkDeviceFunctionV191FibreChannel struct {

	// An indication of whether the FCoE Initialization Protocol (FIP) populates the FCoE VLAN ID.
	AllowFIPVLANDiscovery *bool `json:"AllowFIPVLANDiscovery,omitempty"`

	// An array of Fibre Channel boot targets configured for this network device function.
	BootTargets []NetworkDeviceFunctionV191BootTargets `json:"BootTargets,omitempty"`

	// The active FCoE VLAN ID.
	FCoEActiveVLANId *int64 `json:"FCoEActiveVLANId,omitempty"`

	// The locally configured FCoE VLAN ID.
	FCoELocalVLANId *int64 `json:"FCoELocalVLANId,omitempty"`

	// The Fibre Channel ID that the switch assigns for this interface.
	FibreChannelId *string `json:"FibreChannelId,omitempty"`

	// The permanent World Wide Node Name (WWNN) address assigned to this function.
	PermanentWWNN *string `json:"PermanentWWNN,omitempty" validate:"regexp=^([0-9A-Fa-f]{2}[:-]){7}([0-9A-Fa-f]{2})$"`

	// The permanent World Wide Port Name (WWPN) address assigned to this function.
	PermanentWWPN *string `json:"PermanentWWPN,omitempty"`

	// The currently configured World Wide Node Name (WWNN) address of this function.
	WWNN *string `json:"WWNN,omitempty" validate:"regexp=^([0-9A-Fa-f]{2}[:-]){7}([0-9A-Fa-f]{2})$"`

	WWNSource NetworkDeviceFunctionV191WwnSource `json:"WWNSource,omitempty"`

	// The currently configured World Wide Port Name (WWPN) address of this function.
	WWPN *string `json:"WWPN,omitempty" validate:"regexp=^([0-9A-Fa-f]{2}[:-]){7}([0-9A-Fa-f]{2})$"`
}

// AssertNetworkDeviceFunctionV191FibreChannelRequired checks if the required fields are not zero-ed
func AssertNetworkDeviceFunctionV191FibreChannelRequired(obj NetworkDeviceFunctionV191FibreChannel) error {
	for _, el := range obj.BootTargets {
		if err := AssertNetworkDeviceFunctionV191BootTargetsRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertNetworkDeviceFunctionV191FibreChannelConstraints checks if the values respects the defined constraints
func AssertNetworkDeviceFunctionV191FibreChannelConstraints(obj NetworkDeviceFunctionV191FibreChannel) error {
	for _, el := range obj.BootTargets {
		if err := AssertNetworkDeviceFunctionV191BootTargetsConstraints(el); err != nil {
			return err
		}
	}
	if obj.FCoEActiveVLANId != nil && *obj.FCoEActiveVLANId < 0 {
		return &ParsingError{Param: "FCoEActiveVLANId", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.FCoEActiveVLANId != nil && *obj.FCoEActiveVLANId > 4094 {
		return &ParsingError{Param: "FCoEActiveVLANId", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.FCoELocalVLANId != nil && *obj.FCoELocalVLANId < 0 {
		return &ParsingError{Param: "FCoELocalVLANId", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.FCoELocalVLANId != nil && *obj.FCoELocalVLANId > 4094 {
		return &ParsingError{Param: "FCoELocalVLANId", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
