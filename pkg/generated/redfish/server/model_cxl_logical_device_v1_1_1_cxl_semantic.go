// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type CxlLogicalDeviceV111CxlSemantic string

// List of CxlLogicalDeviceV111CxlSemantic
const (
	CXLLOGICALDEVICEV111CXLSEMANTIC_CX_LIO    CxlLogicalDeviceV111CxlSemantic = "CXLio"
	CXLLOGICALDEVICEV111CXLSEMANTIC_CX_LCACHE CxlLogicalDeviceV111CxlSemantic = "CXLcache"
	CXLLOGICALDEVICEV111CXLSEMANTIC_CX_LMEM   CxlLogicalDeviceV111CxlSemantic = "CXLmem"
)

// AllowedCxlLogicalDeviceV111CxlSemanticEnumValues is all the allowed values of CxlLogicalDeviceV111CxlSemantic enum
var AllowedCxlLogicalDeviceV111CxlSemanticEnumValues = []CxlLogicalDeviceV111CxlSemantic{
	"CXLio",
	"CXLcache",
	"CXLmem",
}

// validCxlLogicalDeviceV111CxlSemanticEnumValue provides a map of CxlLogicalDeviceV111CxlSemantics for fast verification of use input
var validCxlLogicalDeviceV111CxlSemanticEnumValues = map[CxlLogicalDeviceV111CxlSemantic]struct{}{
	"CXLio":    {},
	"CXLcache": {},
	"CXLmem":   {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CxlLogicalDeviceV111CxlSemantic) IsValid() bool {
	_, ok := validCxlLogicalDeviceV111CxlSemanticEnumValues[v]
	return ok
}

// NewCxlLogicalDeviceV111CxlSemanticFromValue returns a pointer to a valid CxlLogicalDeviceV111CxlSemantic
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCxlLogicalDeviceV111CxlSemanticFromValue(v string) (CxlLogicalDeviceV111CxlSemantic, error) {
	ev := CxlLogicalDeviceV111CxlSemantic(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for CxlLogicalDeviceV111CxlSemantic: valid values are %v", v, AllowedCxlLogicalDeviceV111CxlSemanticEnumValues)
}

// AssertCxlLogicalDeviceV111CxlSemanticRequired checks if the required fields are not zero-ed
func AssertCxlLogicalDeviceV111CxlSemanticRequired(obj CxlLogicalDeviceV111CxlSemantic) error {
	return nil
}

// AssertCxlLogicalDeviceV111CxlSemanticConstraints checks if the values respects the defined constraints
func AssertCxlLogicalDeviceV111CxlSemanticConstraints(obj CxlLogicalDeviceV111CxlSemantic) error {
	return nil
}
