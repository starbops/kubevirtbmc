// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// TrustedComponentV130Links - The links to other resources that are related to this resource.
type TrustedComponentV130Links struct {
	ActiveSoftwareImage OdataV4IdRef `json:"ActiveSoftwareImage,omitempty"`

	// An array of links to ComponentIntegrity resources for which the trusted component is responsible.
	ComponentIntegrity []OdataV4IdRef `json:"ComponentIntegrity,omitempty"`

	// The number of items in a collection.
	ComponentIntegrityodataCount int64 `json:"ComponentIntegrity@odata.count,omitempty"`

	// An array of links to resources that the target component protects.
	ComponentsProtected []OdataV4IdRef `json:"ComponentsProtected,omitempty"`

	// The number of items in a collection.
	ComponentsProtectedodataCount int64 `json:"ComponentsProtected@odata.count,omitempty"`

	IntegratedInto OdataV4IdRef `json:"IntegratedInto,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	Owner OdataV4IdRef `json:"Owner,omitempty"`

	// The images that are associated with this trusted component.
	SoftwareImages []OdataV4IdRef `json:"SoftwareImages,omitempty"`

	// The number of items in a collection.
	SoftwareImagesodataCount int64 `json:"SoftwareImages@odata.count,omitempty"`
}

// AssertTrustedComponentV130LinksRequired checks if the required fields are not zero-ed
func AssertTrustedComponentV130LinksRequired(obj TrustedComponentV130Links) error {
	if err := AssertOdataV4IdRefRequired(obj.ActiveSoftwareImage); err != nil {
		return err
	}
	for _, el := range obj.ComponentIntegrity {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ComponentsProtected {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.IntegratedInto); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Owner); err != nil {
		return err
	}
	for _, el := range obj.SoftwareImages {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertTrustedComponentV130LinksConstraints checks if the values respects the defined constraints
func AssertTrustedComponentV130LinksConstraints(obj TrustedComponentV130Links) error {
	if err := AssertOdataV4IdRefConstraints(obj.ActiveSoftwareImage); err != nil {
		return err
	}
	for _, el := range obj.ComponentIntegrity {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ComponentsProtected {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.IntegratedInto); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Owner); err != nil {
		return err
	}
	for _, el := range obj.SoftwareImages {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
