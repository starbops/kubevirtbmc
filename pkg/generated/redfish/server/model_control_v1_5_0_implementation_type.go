// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ControlV150ImplementationType string

// List of ControlV150ImplementationType
const (
	CONTROLV150IMPLEMENTATIONTYPE_PROGRAMMABLE ControlV150ImplementationType = "Programmable"
	CONTROLV150IMPLEMENTATIONTYPE_DIRECT       ControlV150ImplementationType = "Direct"
	CONTROLV150IMPLEMENTATIONTYPE_MONITORED    ControlV150ImplementationType = "Monitored"
)

// AllowedControlV150ImplementationTypeEnumValues is all the allowed values of ControlV150ImplementationType enum
var AllowedControlV150ImplementationTypeEnumValues = []ControlV150ImplementationType{
	"Programmable",
	"Direct",
	"Monitored",
}

// validControlV150ImplementationTypeEnumValue provides a map of ControlV150ImplementationTypes for fast verification of use input
var validControlV150ImplementationTypeEnumValues = map[ControlV150ImplementationType]struct{}{
	"Programmable": {},
	"Direct":       {},
	"Monitored":    {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ControlV150ImplementationType) IsValid() bool {
	_, ok := validControlV150ImplementationTypeEnumValues[v]
	return ok
}

// NewControlV150ImplementationTypeFromValue returns a pointer to a valid ControlV150ImplementationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewControlV150ImplementationTypeFromValue(v string) (ControlV150ImplementationType, error) {
	ev := ControlV150ImplementationType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ControlV150ImplementationType: valid values are %v", v, AllowedControlV150ImplementationTypeEnumValues)
}

// AssertControlV150ImplementationTypeRequired checks if the required fields are not zero-ed
func AssertControlV150ImplementationTypeRequired(obj ControlV150ImplementationType) error {
	return nil
}

// AssertControlV150ImplementationTypeConstraints checks if the values respects the defined constraints
func AssertControlV150ImplementationTypeConstraints(obj ControlV150ImplementationType) error {
	return nil
}
