// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// UpdateServiceV1130UpdateService - The UpdateService schema describes the update service and the properties for the service itself with links to collections of firmware and software inventory.  The update service also provides methods for updating software and firmware of the resources in a Redfish service.
type UpdateServiceV1130UpdateService struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions UpdateServiceV1130Actions `json:"Actions,omitempty"`

	ClientCertificates OdataV4IdRef `json:"ClientCertificates,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	FirmwareInventory OdataV4IdRef `json:"FirmwareInventory,omitempty"`

	// The URI used to perform an HTTP or HTTPS push update to the update service.  The format of the message is vendor-specific.
	HttpPushUri string `json:"HttpPushUri,omitempty"`

	HttpPushUriOptions UpdateServiceV1130HttpPushUriOptions `json:"HttpPushUriOptions,omitempty"`

	// An indication of whether a client has reserved the HttpPushUriOptions properties for software updates.
	HttpPushUriOptionsBusy *bool `json:"HttpPushUriOptionsBusy,omitempty"`

	// An array of URIs that indicate where to apply the update image.
	HttpPushUriTargets []*string `json:"HttpPushUriTargets,omitempty"`

	// An indication of whether any client has reserved the HttpPushUriTargets property.
	HttpPushUriTargetsBusy *bool `json:"HttpPushUriTargetsBusy,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The maximum size in bytes of the software update image that this service supports.
	MaxImageSizeBytes *int64 `json:"MaxImageSizeBytes,omitempty"`

	// The URI used to perform a Redfish Specification-defined Multipart HTTP or HTTPS push update to the update service.
	MultipartHttpPushUri string `json:"MultipartHttpPushUri,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PublicIdentitySSHKey OdataV4IdRef `json:"PublicIdentitySSHKey,omitempty"`

	RemoteServerCertificates OdataV4IdRef `json:"RemoteServerCertificates,omitempty"`

	RemoteServerSSHKeys OdataV4IdRef `json:"RemoteServerSSHKeys,omitempty"`

	// An indication of whether this service is enabled.
	ServiceEnabled *bool `json:"ServiceEnabled,omitempty"`

	SoftwareInventory OdataV4IdRef `json:"SoftwareInventory,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The image format types supported by the service.
	SupportedUpdateImageFormats []UpdateServiceV1130SupportedUpdateImageFormatType `json:"SupportedUpdateImageFormats,omitempty"`

	// An indication of whether the service will verify the certificate of the server referenced by the ImageURI property in SimpleUpdate prior to sending the transfer request.
	VerifyRemoteServerCertificate *bool `json:"VerifyRemoteServerCertificate,omitempty"`

	// An indication of whether the service will verify the SSH key of the server referenced by the ImageURI property in SimpleUpdate prior to sending the transfer request.
	VerifyRemoteServerSSHKey *bool `json:"VerifyRemoteServerSSHKey,omitempty"`
}

// AssertUpdateServiceV1130UpdateServiceRequired checks if the required fields are not zero-ed
func AssertUpdateServiceV1130UpdateServiceRequired(obj UpdateServiceV1130UpdateService) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertUpdateServiceV1130ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.ClientCertificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.FirmwareInventory); err != nil {
		return err
	}
	if err := AssertUpdateServiceV1130HttpPushUriOptionsRequired(obj.HttpPushUriOptions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.PublicIdentitySSHKey); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.RemoteServerCertificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.RemoteServerSSHKeys); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.SoftwareInventory); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertUpdateServiceV1130UpdateServiceConstraints checks if the values respects the defined constraints
func AssertUpdateServiceV1130UpdateServiceConstraints(obj UpdateServiceV1130UpdateService) error {
	if err := AssertUpdateServiceV1130ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.ClientCertificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.FirmwareInventory); err != nil {
		return err
	}
	if err := AssertUpdateServiceV1130HttpPushUriOptionsConstraints(obj.HttpPushUriOptions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.PublicIdentitySSHKey); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.RemoteServerCertificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.RemoteServerSSHKeys); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.SoftwareInventory); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
