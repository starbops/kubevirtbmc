// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type VolumeWriteHoleProtectionPolicyType string

// List of VolumeWriteHoleProtectionPolicyType
const (
	VOLUMEWRITEHOLEPROTECTIONPOLICYTYPE_OFF             VolumeWriteHoleProtectionPolicyType = "Off"
	VOLUMEWRITEHOLEPROTECTIONPOLICYTYPE_JOURNALING      VolumeWriteHoleProtectionPolicyType = "Journaling"
	VOLUMEWRITEHOLEPROTECTIONPOLICYTYPE_DISTRIBUTED_LOG VolumeWriteHoleProtectionPolicyType = "DistributedLog"
	VOLUMEWRITEHOLEPROTECTIONPOLICYTYPE_OEM             VolumeWriteHoleProtectionPolicyType = "Oem"
)

// AllowedVolumeWriteHoleProtectionPolicyTypeEnumValues is all the allowed values of VolumeWriteHoleProtectionPolicyType enum
var AllowedVolumeWriteHoleProtectionPolicyTypeEnumValues = []VolumeWriteHoleProtectionPolicyType{
	"Off",
	"Journaling",
	"DistributedLog",
	"Oem",
}

// validVolumeWriteHoleProtectionPolicyTypeEnumValue provides a map of VolumeWriteHoleProtectionPolicyTypes for fast verification of use input
var validVolumeWriteHoleProtectionPolicyTypeEnumValues = map[VolumeWriteHoleProtectionPolicyType]struct{}{
	"Off":            {},
	"Journaling":     {},
	"DistributedLog": {},
	"Oem":            {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeWriteHoleProtectionPolicyType) IsValid() bool {
	_, ok := validVolumeWriteHoleProtectionPolicyTypeEnumValues[v]
	return ok
}

// NewVolumeWriteHoleProtectionPolicyTypeFromValue returns a pointer to a valid VolumeWriteHoleProtectionPolicyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeWriteHoleProtectionPolicyTypeFromValue(v string) (VolumeWriteHoleProtectionPolicyType, error) {
	ev := VolumeWriteHoleProtectionPolicyType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for VolumeWriteHoleProtectionPolicyType: valid values are %v", v, AllowedVolumeWriteHoleProtectionPolicyTypeEnumValues)
}

// AssertVolumeWriteHoleProtectionPolicyTypeRequired checks if the required fields are not zero-ed
func AssertVolumeWriteHoleProtectionPolicyTypeRequired(obj VolumeWriteHoleProtectionPolicyType) error {
	return nil
}

// AssertVolumeWriteHoleProtectionPolicyTypeConstraints checks if the values respects the defined constraints
func AssertVolumeWriteHoleProtectionPolicyTypeConstraints(obj VolumeWriteHoleProtectionPolicyType) error {
	return nil
}
