// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// RedundancyV142RedundantGroup - The redundancy information for the devices in a redundancy group.
type RedundancyV142RedundantGroup struct {

	// The maximum number of devices supported in this redundancy group.
	MaxSupportedInGroup *int64 `json:"MaxSupportedInGroup,omitempty"`

	// The minimum number of devices needed for this group to be redundant.
	MinNeededInGroup *int64 `json:"MinNeededInGroup"`

	// The links to the devices included in this redundancy group.
	RedundancyGroup []OdataV4IdRef `json:"RedundancyGroup"`

	// The number of items in a collection.
	RedundancyGroupodataCount int64 `json:"RedundancyGroup@odata.count,omitempty"`

	RedundancyType *RedundancyV142RedundancyType `json:"RedundancyType"`

	Status ResourceStatus `json:"Status"`
}

// AssertRedundancyV142RedundantGroupRequired checks if the required fields are not zero-ed
func AssertRedundancyV142RedundantGroupRequired(obj RedundancyV142RedundantGroup) error {
	elements := map[string]interface{}{
		"MinNeededInGroup": obj.MinNeededInGroup,
		"RedundancyGroup":  obj.RedundancyGroup,
		"RedundancyType":   obj.RedundancyType,
		"Status":           obj.Status,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.RedundancyGroup {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertRedundancyV142RedundantGroupConstraints checks if the values respects the defined constraints
func AssertRedundancyV142RedundantGroupConstraints(obj RedundancyV142RedundantGroup) error {
	for _, el := range obj.RedundancyGroup {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
