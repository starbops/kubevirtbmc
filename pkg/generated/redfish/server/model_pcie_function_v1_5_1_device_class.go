// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PcieFunctionV151DeviceClass string

// List of PcieFunctionV151DeviceClass
const (
	PCIEFUNCTIONV151DEVICECLASS_UNCLASSIFIED_DEVICE                 PcieFunctionV151DeviceClass = "UnclassifiedDevice"
	PCIEFUNCTIONV151DEVICECLASS_MASS_STORAGE_CONTROLLER             PcieFunctionV151DeviceClass = "MassStorageController"
	PCIEFUNCTIONV151DEVICECLASS_NETWORK_CONTROLLER                  PcieFunctionV151DeviceClass = "NetworkController"
	PCIEFUNCTIONV151DEVICECLASS_DISPLAY_CONTROLLER                  PcieFunctionV151DeviceClass = "DisplayController"
	PCIEFUNCTIONV151DEVICECLASS_MULTIMEDIA_CONTROLLER               PcieFunctionV151DeviceClass = "MultimediaController"
	PCIEFUNCTIONV151DEVICECLASS_MEMORY_CONTROLLER                   PcieFunctionV151DeviceClass = "MemoryController"
	PCIEFUNCTIONV151DEVICECLASS_BRIDGE                              PcieFunctionV151DeviceClass = "Bridge"
	PCIEFUNCTIONV151DEVICECLASS_COMMUNICATION_CONTROLLER            PcieFunctionV151DeviceClass = "CommunicationController"
	PCIEFUNCTIONV151DEVICECLASS_GENERIC_SYSTEM_PERIPHERAL           PcieFunctionV151DeviceClass = "GenericSystemPeripheral"
	PCIEFUNCTIONV151DEVICECLASS_INPUT_DEVICE_CONTROLLER             PcieFunctionV151DeviceClass = "InputDeviceController"
	PCIEFUNCTIONV151DEVICECLASS_DOCKING_STATION                     PcieFunctionV151DeviceClass = "DockingStation"
	PCIEFUNCTIONV151DEVICECLASS_PROCESSOR                           PcieFunctionV151DeviceClass = "Processor"
	PCIEFUNCTIONV151DEVICECLASS_SERIAL_BUS_CONTROLLER               PcieFunctionV151DeviceClass = "SerialBusController"
	PCIEFUNCTIONV151DEVICECLASS_WIRELESS_CONTROLLER                 PcieFunctionV151DeviceClass = "WirelessController"
	PCIEFUNCTIONV151DEVICECLASS_INTELLIGENT_CONTROLLER              PcieFunctionV151DeviceClass = "IntelligentController"
	PCIEFUNCTIONV151DEVICECLASS_SATELLITE_COMMUNICATIONS_CONTROLLER PcieFunctionV151DeviceClass = "SatelliteCommunicationsController"
	PCIEFUNCTIONV151DEVICECLASS_ENCRYPTION_CONTROLLER               PcieFunctionV151DeviceClass = "EncryptionController"
	PCIEFUNCTIONV151DEVICECLASS_SIGNAL_PROCESSING_CONTROLLER        PcieFunctionV151DeviceClass = "SignalProcessingController"
	PCIEFUNCTIONV151DEVICECLASS_PROCESSING_ACCELERATORS             PcieFunctionV151DeviceClass = "ProcessingAccelerators"
	PCIEFUNCTIONV151DEVICECLASS_NON_ESSENTIAL_INSTRUMENTATION       PcieFunctionV151DeviceClass = "NonEssentialInstrumentation"
	PCIEFUNCTIONV151DEVICECLASS_COPROCESSOR                         PcieFunctionV151DeviceClass = "Coprocessor"
	PCIEFUNCTIONV151DEVICECLASS_UNASSIGNED_CLASS                    PcieFunctionV151DeviceClass = "UnassignedClass"
	PCIEFUNCTIONV151DEVICECLASS_OTHER                               PcieFunctionV151DeviceClass = "Other"
)

// AllowedPcieFunctionV151DeviceClassEnumValues is all the allowed values of PcieFunctionV151DeviceClass enum
var AllowedPcieFunctionV151DeviceClassEnumValues = []PcieFunctionV151DeviceClass{
	"UnclassifiedDevice",
	"MassStorageController",
	"NetworkController",
	"DisplayController",
	"MultimediaController",
	"MemoryController",
	"Bridge",
	"CommunicationController",
	"GenericSystemPeripheral",
	"InputDeviceController",
	"DockingStation",
	"Processor",
	"SerialBusController",
	"WirelessController",
	"IntelligentController",
	"SatelliteCommunicationsController",
	"EncryptionController",
	"SignalProcessingController",
	"ProcessingAccelerators",
	"NonEssentialInstrumentation",
	"Coprocessor",
	"UnassignedClass",
	"Other",
}

// validPcieFunctionV151DeviceClassEnumValue provides a map of PcieFunctionV151DeviceClasss for fast verification of use input
var validPcieFunctionV151DeviceClassEnumValues = map[PcieFunctionV151DeviceClass]struct{}{
	"UnclassifiedDevice":                {},
	"MassStorageController":             {},
	"NetworkController":                 {},
	"DisplayController":                 {},
	"MultimediaController":              {},
	"MemoryController":                  {},
	"Bridge":                            {},
	"CommunicationController":           {},
	"GenericSystemPeripheral":           {},
	"InputDeviceController":             {},
	"DockingStation":                    {},
	"Processor":                         {},
	"SerialBusController":               {},
	"WirelessController":                {},
	"IntelligentController":             {},
	"SatelliteCommunicationsController": {},
	"EncryptionController":              {},
	"SignalProcessingController":        {},
	"ProcessingAccelerators":            {},
	"NonEssentialInstrumentation":       {},
	"Coprocessor":                       {},
	"UnassignedClass":                   {},
	"Other":                             {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PcieFunctionV151DeviceClass) IsValid() bool {
	_, ok := validPcieFunctionV151DeviceClassEnumValues[v]
	return ok
}

// NewPcieFunctionV151DeviceClassFromValue returns a pointer to a valid PcieFunctionV151DeviceClass
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPcieFunctionV151DeviceClassFromValue(v string) (PcieFunctionV151DeviceClass, error) {
	ev := PcieFunctionV151DeviceClass(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PcieFunctionV151DeviceClass: valid values are %v", v, AllowedPcieFunctionV151DeviceClassEnumValues)
}

// AssertPcieFunctionV151DeviceClassRequired checks if the required fields are not zero-ed
func AssertPcieFunctionV151DeviceClassRequired(obj PcieFunctionV151DeviceClass) error {
	return nil
}

// AssertPcieFunctionV151DeviceClassConstraints checks if the values respects the defined constraints
func AssertPcieFunctionV151DeviceClassConstraints(obj PcieFunctionV151DeviceClass) error {
	return nil
}
