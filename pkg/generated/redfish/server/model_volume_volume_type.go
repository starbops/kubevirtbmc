// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type VolumeVolumeType string

// List of VolumeVolumeType
const (
	VOLUMEVOLUMETYPE_RAW_DEVICE                  VolumeVolumeType = "RawDevice"
	VOLUMEVOLUMETYPE_NON_REDUNDANT               VolumeVolumeType = "NonRedundant"
	VOLUMEVOLUMETYPE_MIRRORED                    VolumeVolumeType = "Mirrored"
	VOLUMEVOLUMETYPE_STRIPED_WITH_PARITY         VolumeVolumeType = "StripedWithParity"
	VOLUMEVOLUMETYPE_SPANNED_MIRRORS             VolumeVolumeType = "SpannedMirrors"
	VOLUMEVOLUMETYPE_SPANNED_STRIPES_WITH_PARITY VolumeVolumeType = "SpannedStripesWithParity"
)

// AllowedVolumeVolumeTypeEnumValues is all the allowed values of VolumeVolumeType enum
var AllowedVolumeVolumeTypeEnumValues = []VolumeVolumeType{
	"RawDevice",
	"NonRedundant",
	"Mirrored",
	"StripedWithParity",
	"SpannedMirrors",
	"SpannedStripesWithParity",
}

// validVolumeVolumeTypeEnumValue provides a map of VolumeVolumeTypes for fast verification of use input
var validVolumeVolumeTypeEnumValues = map[VolumeVolumeType]struct{}{
	"RawDevice":                {},
	"NonRedundant":             {},
	"Mirrored":                 {},
	"StripedWithParity":        {},
	"SpannedMirrors":           {},
	"SpannedStripesWithParity": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeVolumeType) IsValid() bool {
	_, ok := validVolumeVolumeTypeEnumValues[v]
	return ok
}

// NewVolumeVolumeTypeFromValue returns a pointer to a valid VolumeVolumeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeVolumeTypeFromValue(v string) (VolumeVolumeType, error) {
	ev := VolumeVolumeType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for VolumeVolumeType: valid values are %v", v, AllowedVolumeVolumeTypeEnumValues)
}

// AssertVolumeVolumeTypeRequired checks if the required fields are not zero-ed
func AssertVolumeVolumeTypeRequired(obj VolumeVolumeType) error {
	return nil
}

// AssertVolumeVolumeTypeConstraints checks if the values respects the defined constraints
func AssertVolumeVolumeTypeConstraints(obj VolumeVolumeType) error {
	return nil
}
