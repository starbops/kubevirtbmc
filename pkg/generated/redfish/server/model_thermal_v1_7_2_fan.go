// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

type ThermalV172Fan struct {

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	Actions ThermalV172FanActions `json:"Actions,omitempty"`

	Assembly OdataV4IdRef `json:"Assembly,omitempty"`

	// The name of the fan.
	// Deprecated
	FanName *string `json:"FanName,omitempty"`

	// An indication of whether this device can be inserted or removed while the equipment is in operation.
	HotPluggable *bool `json:"HotPluggable,omitempty"`

	IndicatorLED ResourceIndicatorLed `json:"IndicatorLED,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// The value at which the reading is below normal range but not yet fatal.
	LowerThresholdCritical *int64 `json:"LowerThresholdCritical,omitempty"`

	// The value at which the reading is below normal range and fatal.
	LowerThresholdFatal *int64 `json:"LowerThresholdFatal,omitempty"`

	// The value at which the reading is below normal range.
	LowerThresholdNonCritical *int64 `json:"LowerThresholdNonCritical,omitempty"`

	// The manufacturer of this fan.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// Maximum value for this sensor.
	MaxReadingRange *int64 `json:"MaxReadingRange,omitempty"`

	// The unique identifier for the member within an array.
	MemberId string `json:"MemberId"`

	// Minimum value for this sensor.
	MinReadingRange *int64 `json:"MinReadingRange,omitempty"`

	// The model number for this fan.
	Model *string `json:"Model,omitempty"`

	// Name of the fan.
	Name *string `json:"Name,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The part number for this fan.
	PartNumber *string `json:"PartNumber,omitempty"`

	PhysicalContext PhysicalContextPhysicalContext `json:"PhysicalContext,omitempty"`

	// The fan speed.
	Reading *int64 `json:"Reading,omitempty"`

	ReadingUnits ThermalV172ReadingUnits `json:"ReadingUnits,omitempty"`

	// The set of redundancy groups for this fan.
	Redundancy []RedundancyRedundancy `json:"Redundancy,omitempty"`

	// The number of items in a collection.
	RedundancyodataCount int64 `json:"Redundancy@odata.count,omitempty"`

	// An array of links to resources or objects that this fan services.
	RelatedItem []OdataV4IdRef `json:"RelatedItem,omitempty"`

	// The number of items in a collection.
	RelatedItemodataCount int64 `json:"RelatedItem@odata.count,omitempty"`

	// The numerical identifier for this fan speed sensor.
	SensorNumber *int64 `json:"SensorNumber,omitempty"`

	// The serial number for this fan.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	// The spare part number for this fan.
	SparePartNumber *string `json:"SparePartNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The value at which the reading is above normal range but not yet fatal.
	UpperThresholdCritical *int64 `json:"UpperThresholdCritical,omitempty"`

	// The value at which the reading is above normal range and fatal.
	UpperThresholdFatal *int64 `json:"UpperThresholdFatal,omitempty"`

	// The value at which the reading is above normal range.
	UpperThresholdNonCritical *int64 `json:"UpperThresholdNonCritical,omitempty"`
}

// AssertThermalV172FanRequired checks if the required fields are not zero-ed
func AssertThermalV172FanRequired(obj ThermalV172Fan) error {
	elements := map[string]interface{}{
		"@odata.id": obj.OdataId,
		"MemberId":  obj.MemberId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertThermalV172FanActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Assembly); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RelatedItem {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertThermalV172FanConstraints checks if the values respects the defined constraints
func AssertThermalV172FanConstraints(obj ThermalV172Fan) error {
	if err := AssertThermalV172FanActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Assembly); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RelatedItem {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
