// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type LogEntryV1160SensorType string

// List of LogEntryV1160SensorType
const (
	LOGENTRYV1160SENSORTYPE_PLATFORM_SECURITY_VIOLATION_ATTEMPT LogEntryV1160SensorType = "Platform Security Violation Attempt"
	LOGENTRYV1160SENSORTYPE_TEMPERATURE                         LogEntryV1160SensorType = "Temperature"
	LOGENTRYV1160SENSORTYPE_VOLTAGE                             LogEntryV1160SensorType = "Voltage"
	LOGENTRYV1160SENSORTYPE_CURRENT                             LogEntryV1160SensorType = "Current"
	LOGENTRYV1160SENSORTYPE_FAN                                 LogEntryV1160SensorType = "Fan"
	LOGENTRYV1160SENSORTYPE_PHYSICAL_CHASSIS_SECURITY           LogEntryV1160SensorType = "Physical Chassis Security"
	LOGENTRYV1160SENSORTYPE_PROCESSOR                           LogEntryV1160SensorType = "Processor"
	LOGENTRYV1160SENSORTYPE_POWER_SUPPLY___CONVERTER            LogEntryV1160SensorType = "Power Supply / Converter"
	LOGENTRYV1160SENSORTYPE_POWER_UNIT                          LogEntryV1160SensorType = "PowerUnit"
	LOGENTRYV1160SENSORTYPE_COOLING_DEVICE                      LogEntryV1160SensorType = "CoolingDevice"
	LOGENTRYV1160SENSORTYPE_OTHER_UNITS_BASED_SENSOR            LogEntryV1160SensorType = "Other Units-based Sensor"
	LOGENTRYV1160SENSORTYPE_MEMORY                              LogEntryV1160SensorType = "Memory"
	LOGENTRYV1160SENSORTYPE_DRIVE_SLOT_BAY                      LogEntryV1160SensorType = "Drive Slot/Bay"
	LOGENTRYV1160SENSORTYPE_POST_MEMORY_RESIZE                  LogEntryV1160SensorType = "POST Memory Resize"
	LOGENTRYV1160SENSORTYPE_SYSTEM_FIRMWARE_PROGRESS            LogEntryV1160SensorType = "System Firmware Progress"
	LOGENTRYV1160SENSORTYPE_EVENT_LOGGING_DISABLED              LogEntryV1160SensorType = "Event Logging Disabled"
	LOGENTRYV1160SENSORTYPE_SYSTEM_EVENT                        LogEntryV1160SensorType = "System Event"
	LOGENTRYV1160SENSORTYPE_CRITICAL_INTERRUPT                  LogEntryV1160SensorType = "Critical Interrupt"
	LOGENTRYV1160SENSORTYPE_BUTTON_SWITCH                       LogEntryV1160SensorType = "Button/Switch"
	LOGENTRYV1160SENSORTYPE_MODULE_BOARD                        LogEntryV1160SensorType = "Module/Board"
	LOGENTRYV1160SENSORTYPE_MICROCONTROLLER_COPROCESSOR         LogEntryV1160SensorType = "Microcontroller/Coprocessor"
	LOGENTRYV1160SENSORTYPE_ADD_IN_CARD                         LogEntryV1160SensorType = "Add-in Card"
	LOGENTRYV1160SENSORTYPE_CHASSIS                             LogEntryV1160SensorType = "Chassis"
	LOGENTRYV1160SENSORTYPE_CHIP_SET                            LogEntryV1160SensorType = "ChipSet"
	LOGENTRYV1160SENSORTYPE_OTHER_FRU                           LogEntryV1160SensorType = "Other FRU"
	LOGENTRYV1160SENSORTYPE_CABLE_INTERCONNECT                  LogEntryV1160SensorType = "Cable/Interconnect"
	LOGENTRYV1160SENSORTYPE_TERMINATOR                          LogEntryV1160SensorType = "Terminator"
	LOGENTRYV1160SENSORTYPE_SYSTEM_BOOT_RESTART                 LogEntryV1160SensorType = "SystemBoot/Restart"
	LOGENTRYV1160SENSORTYPE_BOOT_ERROR                          LogEntryV1160SensorType = "Boot Error"
	LOGENTRYV1160SENSORTYPE_BASE_OS_BOOT_INSTALLATION_STATUS    LogEntryV1160SensorType = "BaseOSBoot/InstallationStatus"
	LOGENTRYV1160SENSORTYPE_OS_STOP_SHUTDOWN                    LogEntryV1160SensorType = "OS Stop/Shutdown"
	LOGENTRYV1160SENSORTYPE_SLOT_CONNECTOR                      LogEntryV1160SensorType = "Slot/Connector"
	LOGENTRYV1160SENSORTYPE_SYSTEM_ACPI_POWER_STATE             LogEntryV1160SensorType = "System ACPI PowerState"
	LOGENTRYV1160SENSORTYPE_WATCHDOG                            LogEntryV1160SensorType = "Watchdog"
	LOGENTRYV1160SENSORTYPE_PLATFORM_ALERT                      LogEntryV1160SensorType = "Platform Alert"
	LOGENTRYV1160SENSORTYPE_ENTITY_PRESENCE                     LogEntryV1160SensorType = "Entity Presence"
	LOGENTRYV1160SENSORTYPE_MONITOR_ASIC_IC                     LogEntryV1160SensorType = "Monitor ASIC/IC"
	LOGENTRYV1160SENSORTYPE_LAN                                 LogEntryV1160SensorType = "LAN"
	LOGENTRYV1160SENSORTYPE_MANAGEMENT_SUBSYSTEM_HEALTH         LogEntryV1160SensorType = "Management Subsystem Health"
	LOGENTRYV1160SENSORTYPE_BATTERY                             LogEntryV1160SensorType = "Battery"
	LOGENTRYV1160SENSORTYPE_SESSION_AUDIT                       LogEntryV1160SensorType = "Session Audit"
	LOGENTRYV1160SENSORTYPE_VERSION_CHANGE                      LogEntryV1160SensorType = "Version Change"
	LOGENTRYV1160SENSORTYPE_FRU_STATE                           LogEntryV1160SensorType = "FRUState"
	LOGENTRYV1160SENSORTYPE_OEM                                 LogEntryV1160SensorType = "OEM"
)

// AllowedLogEntryV1160SensorTypeEnumValues is all the allowed values of LogEntryV1160SensorType enum
var AllowedLogEntryV1160SensorTypeEnumValues = []LogEntryV1160SensorType{
	"Platform Security Violation Attempt",
	"Temperature",
	"Voltage",
	"Current",
	"Fan",
	"Physical Chassis Security",
	"Processor",
	"Power Supply / Converter",
	"PowerUnit",
	"CoolingDevice",
	"Other Units-based Sensor",
	"Memory",
	"Drive Slot/Bay",
	"POST Memory Resize",
	"System Firmware Progress",
	"Event Logging Disabled",
	"System Event",
	"Critical Interrupt",
	"Button/Switch",
	"Module/Board",
	"Microcontroller/Coprocessor",
	"Add-in Card",
	"Chassis",
	"ChipSet",
	"Other FRU",
	"Cable/Interconnect",
	"Terminator",
	"SystemBoot/Restart",
	"Boot Error",
	"BaseOSBoot/InstallationStatus",
	"OS Stop/Shutdown",
	"Slot/Connector",
	"System ACPI PowerState",
	"Watchdog",
	"Platform Alert",
	"Entity Presence",
	"Monitor ASIC/IC",
	"LAN",
	"Management Subsystem Health",
	"Battery",
	"Session Audit",
	"Version Change",
	"FRUState",
	"OEM",
}

// validLogEntryV1160SensorTypeEnumValue provides a map of LogEntryV1160SensorTypes for fast verification of use input
var validLogEntryV1160SensorTypeEnumValues = map[LogEntryV1160SensorType]struct{}{
	"Platform Security Violation Attempt": {},
	"Temperature":                         {},
	"Voltage":                             {},
	"Current":                             {},
	"Fan":                                 {},
	"Physical Chassis Security":           {},
	"Processor":                           {},
	"Power Supply / Converter":            {},
	"PowerUnit":                           {},
	"CoolingDevice":                       {},
	"Other Units-based Sensor":            {},
	"Memory":                              {},
	"Drive Slot/Bay":                      {},
	"POST Memory Resize":                  {},
	"System Firmware Progress":            {},
	"Event Logging Disabled":              {},
	"System Event":                        {},
	"Critical Interrupt":                  {},
	"Button/Switch":                       {},
	"Module/Board":                        {},
	"Microcontroller/Coprocessor":         {},
	"Add-in Card":                         {},
	"Chassis":                             {},
	"ChipSet":                             {},
	"Other FRU":                           {},
	"Cable/Interconnect":                  {},
	"Terminator":                          {},
	"SystemBoot/Restart":                  {},
	"Boot Error":                          {},
	"BaseOSBoot/InstallationStatus":       {},
	"OS Stop/Shutdown":                    {},
	"Slot/Connector":                      {},
	"System ACPI PowerState":              {},
	"Watchdog":                            {},
	"Platform Alert":                      {},
	"Entity Presence":                     {},
	"Monitor ASIC/IC":                     {},
	"LAN":                                 {},
	"Management Subsystem Health":         {},
	"Battery":                             {},
	"Session Audit":                       {},
	"Version Change":                      {},
	"FRUState":                            {},
	"OEM":                                 {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogEntryV1160SensorType) IsValid() bool {
	_, ok := validLogEntryV1160SensorTypeEnumValues[v]
	return ok
}

// NewLogEntryV1160SensorTypeFromValue returns a pointer to a valid LogEntryV1160SensorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogEntryV1160SensorTypeFromValue(v string) (LogEntryV1160SensorType, error) {
	ev := LogEntryV1160SensorType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for LogEntryV1160SensorType: valid values are %v", v, AllowedLogEntryV1160SensorTypeEnumValues)
}

// AssertLogEntryV1160SensorTypeRequired checks if the required fields are not zero-ed
func AssertLogEntryV1160SensorTypeRequired(obj LogEntryV1160SensorType) error {
	return nil
}

// AssertLogEntryV1160SensorTypeConstraints checks if the values respects the defined constraints
func AssertLogEntryV1160SensorTypeConstraints(obj LogEntryV1160SensorType) error {
	return nil
}
