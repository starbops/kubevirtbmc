// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import "time"

type ResourceStatusConditionsInner struct {
	LogEntry OdataV4IdRef `json:"LogEntry,omitempty"`

	// The human-readable message for this condition.
	Message string `json:"Message,omitempty"`

	// An array of message arguments that are substituted for the arguments in the message when looked up in the message registry.
	MessageArgs []string `json:"MessageArgs,omitempty"`

	// The identifier for the message.
	MessageId string `json:"MessageId"`

	OriginOfCondition OdataV4IdRef `json:"OriginOfCondition,omitempty"`

	// Suggestions on how to resolve the condition.
	Resolution string `json:"Resolution,omitempty"`

	// The list of recommended steps to resolve the condition.
	ResolutionSteps []ResolutionStepResolutionStep `json:"ResolutionSteps,omitempty"`

	Severity ResourceHealth `json:"Severity,omitempty"`

	// The time the condition occurred.
	Timestamp time.Time `json:"Timestamp,omitempty"`

	// The source of authentication for the username property associated with the condition.
	UserAuthenticationSource *string `json:"UserAuthenticationSource,omitempty"`

	// The username of the account associated with the condition.
	Username *string `json:"Username,omitempty"`
}

// AssertResourceStatusConditionsInnerRequired checks if the required fields are not zero-ed
func AssertResourceStatusConditionsInnerRequired(obj ResourceStatusConditionsInner) error {
	elements := map[string]interface{}{
		"MessageId": obj.MessageId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertOdataV4IdRefRequired(obj.LogEntry); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.OriginOfCondition); err != nil {
		return err
	}
	for _, el := range obj.ResolutionSteps {
		if err := AssertResolutionStepResolutionStepRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertResourceStatusConditionsInnerConstraints checks if the values respects the defined constraints
func AssertResourceStatusConditionsInnerConstraints(obj ResourceStatusConditionsInner) error {
	if err := AssertOdataV4IdRefConstraints(obj.LogEntry); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.OriginOfCondition); err != nil {
		return err
	}
	for _, el := range obj.ResolutionSteps {
		if err := AssertResolutionStepResolutionStepConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
