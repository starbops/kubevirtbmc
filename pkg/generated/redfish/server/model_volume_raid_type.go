// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type VolumeRaidType string

// List of VolumeRaidType
const (
	VOLUMERAIDTYPE_RAID0         VolumeRaidType = "RAID0"
	VOLUMERAIDTYPE_RAID1         VolumeRaidType = "RAID1"
	VOLUMERAIDTYPE_RAID3         VolumeRaidType = "RAID3"
	VOLUMERAIDTYPE_RAID4         VolumeRaidType = "RAID4"
	VOLUMERAIDTYPE_RAID5         VolumeRaidType = "RAID5"
	VOLUMERAIDTYPE_RAID6         VolumeRaidType = "RAID6"
	VOLUMERAIDTYPE_RAID10        VolumeRaidType = "RAID10"
	VOLUMERAIDTYPE_RAID01        VolumeRaidType = "RAID01"
	VOLUMERAIDTYPE_RAID6_TP      VolumeRaidType = "RAID6TP"
	VOLUMERAIDTYPE_RAID1_E       VolumeRaidType = "RAID1E"
	VOLUMERAIDTYPE_RAID50        VolumeRaidType = "RAID50"
	VOLUMERAIDTYPE_RAID60        VolumeRaidType = "RAID60"
	VOLUMERAIDTYPE_RAID00        VolumeRaidType = "RAID00"
	VOLUMERAIDTYPE_RAID10_E      VolumeRaidType = "RAID10E"
	VOLUMERAIDTYPE_RAID1_TRIPLE  VolumeRaidType = "RAID1Triple"
	VOLUMERAIDTYPE_RAID10_TRIPLE VolumeRaidType = "RAID10Triple"
	VOLUMERAIDTYPE_NONE          VolumeRaidType = "None"
)

// AllowedVolumeRaidTypeEnumValues is all the allowed values of VolumeRaidType enum
var AllowedVolumeRaidTypeEnumValues = []VolumeRaidType{
	"RAID0",
	"RAID1",
	"RAID3",
	"RAID4",
	"RAID5",
	"RAID6",
	"RAID10",
	"RAID01",
	"RAID6TP",
	"RAID1E",
	"RAID50",
	"RAID60",
	"RAID00",
	"RAID10E",
	"RAID1Triple",
	"RAID10Triple",
	"None",
}

// validVolumeRaidTypeEnumValue provides a map of VolumeRaidTypes for fast verification of use input
var validVolumeRaidTypeEnumValues = map[VolumeRaidType]struct{}{
	"RAID0":        {},
	"RAID1":        {},
	"RAID3":        {},
	"RAID4":        {},
	"RAID5":        {},
	"RAID6":        {},
	"RAID10":       {},
	"RAID01":       {},
	"RAID6TP":      {},
	"RAID1E":       {},
	"RAID50":       {},
	"RAID60":       {},
	"RAID00":       {},
	"RAID10E":      {},
	"RAID1Triple":  {},
	"RAID10Triple": {},
	"None":         {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeRaidType) IsValid() bool {
	_, ok := validVolumeRaidTypeEnumValues[v]
	return ok
}

// NewVolumeRaidTypeFromValue returns a pointer to a valid VolumeRaidType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeRaidTypeFromValue(v string) (VolumeRaidType, error) {
	ev := VolumeRaidType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for VolumeRaidType: valid values are %v", v, AllowedVolumeRaidTypeEnumValues)
}

// AssertVolumeRaidTypeRequired checks if the required fields are not zero-ed
func AssertVolumeRaidTypeRequired(obj VolumeRaidType) error {
	return nil
}

// AssertVolumeRaidTypeConstraints checks if the values respects the defined constraints
func AssertVolumeRaidTypeConstraints(obj VolumeRaidType) error {
	return nil
}
