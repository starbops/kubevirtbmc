// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// PcieDeviceV1130Slot - The PCIe slot associated with a PCIe device.
type PcieDeviceV1130Slot struct {

	// An indication of whether this PCIe slot supports hotplug.
	HotPluggable *bool `json:"HotPluggable,omitempty"`

	LaneSplitting PcieDeviceV1130LaneSplittingType `json:"LaneSplitting,omitempty"`

	// The number of PCIe lanes supported by this slot.
	Lanes *int64 `json:"Lanes,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	PCIeType PcieDevicePcieTypes `json:"PCIeType,omitempty"`

	SlotType PcieDeviceV1130SlotType `json:"SlotType,omitempty"`
}

// AssertPcieDeviceV1130SlotRequired checks if the required fields are not zero-ed
func AssertPcieDeviceV1130SlotRequired(obj PcieDeviceV1130Slot) error {
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	return nil
}

// AssertPcieDeviceV1130SlotConstraints checks if the values respects the defined constraints
func AssertPcieDeviceV1130SlotConstraints(obj PcieDeviceV1130Slot) error {
	if obj.Lanes != nil && *obj.Lanes > 32 {
		return &ParsingError{Param: "Lanes", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	return nil
}
