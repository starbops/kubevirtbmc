// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// OutletGroupV112OutletGroup - The OutletGroup schema contains definitions for an electrical outlet group.
type OutletGroupV112OutletGroup struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions OutletGroupV112Actions `json:"Actions,omitempty"`

	// Indicates whether the configuration is locked.
	ConfigurationLocked bool `json:"ConfigurationLocked,omitempty"`

	// The creator of this outlet group.
	CreatedBy *string `json:"CreatedBy,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	EnergykWh SensorSensorEnergykWhExcerpt `json:"EnergykWh,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links OutletGroupV112Links `json:"Links,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// Indicates whether power control requests are locked.
	PowerControlLocked bool `json:"PowerControlLocked,omitempty"`

	// The number of seconds to delay power on after a PowerControl action to cycle power.  Zero seconds indicates no delay.
	PowerCycleDelaySeconds *float32 `json:"PowerCycleDelaySeconds,omitempty"`

	// Indicates if the outlet group can be powered.
	PowerEnabled *bool `json:"PowerEnabled,omitempty"`

	// The number of seconds to delay power off after a PowerControl action.  Zero seconds indicates no delay to power off.
	PowerOffDelaySeconds *float32 `json:"PowerOffDelaySeconds,omitempty"`

	// The number of seconds to delay power up after a power cycle or a PowerControl action.  Zero seconds indicates no delay to power up.
	PowerOnDelaySeconds *float32 `json:"PowerOnDelaySeconds,omitempty"`

	// The number of seconds to delay power on after power has been restored.  Zero seconds indicates no delay.
	PowerRestoreDelaySeconds *float32 `json:"PowerRestoreDelaySeconds,omitempty"`

	PowerRestorePolicy CircuitPowerRestorePolicyTypes `json:"PowerRestorePolicy,omitempty"`

	PowerState ResourcePowerState `json:"PowerState,omitempty"`

	// Indicates whether the power state is undergoing a delayed transition.
	PowerStateInTransition bool `json:"PowerStateInTransition,omitempty"`

	PowerWatts SensorSensorPowerExcerpt `json:"PowerWatts,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertOutletGroupV112OutletGroupRequired checks if the required fields are not zero-ed
func AssertOutletGroupV112OutletGroupRequired(obj OutletGroupV112OutletGroup) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertOutletGroupV112ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertSensorSensorEnergykWhExcerptRequired(obj.EnergykWh); err != nil {
		return err
	}
	if err := AssertOutletGroupV112LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertSensorSensorPowerExcerptRequired(obj.PowerWatts); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertOutletGroupV112OutletGroupConstraints checks if the values respects the defined constraints
func AssertOutletGroupV112OutletGroupConstraints(obj OutletGroupV112OutletGroup) error {
	if err := AssertOutletGroupV112ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertSensorSensorEnergykWhExcerptConstraints(obj.EnergykWh); err != nil {
		return err
	}
	if err := AssertOutletGroupV112LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertSensorSensorPowerExcerptConstraints(obj.PowerWatts); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
