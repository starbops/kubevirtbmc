// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type AllowDenyV102IpAddressType string

// List of AllowDenyV102IpAddressType
const (
	ALLOWDENYV102IPADDRESSTYPE_IPV4 AllowDenyV102IpAddressType = "IPv4"
	ALLOWDENYV102IPADDRESSTYPE_IPV6 AllowDenyV102IpAddressType = "IPv6"
)

// AllowedAllowDenyV102IpAddressTypeEnumValues is all the allowed values of AllowDenyV102IpAddressType enum
var AllowedAllowDenyV102IpAddressTypeEnumValues = []AllowDenyV102IpAddressType{
	"IPv4",
	"IPv6",
}

// validAllowDenyV102IpAddressTypeEnumValue provides a map of AllowDenyV102IpAddressTypes for fast verification of use input
var validAllowDenyV102IpAddressTypeEnumValues = map[AllowDenyV102IpAddressType]struct{}{
	"IPv4": {},
	"IPv6": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AllowDenyV102IpAddressType) IsValid() bool {
	_, ok := validAllowDenyV102IpAddressTypeEnumValues[v]
	return ok
}

// NewAllowDenyV102IpAddressTypeFromValue returns a pointer to a valid AllowDenyV102IpAddressType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAllowDenyV102IpAddressTypeFromValue(v string) (AllowDenyV102IpAddressType, error) {
	ev := AllowDenyV102IpAddressType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for AllowDenyV102IpAddressType: valid values are %v", v, AllowedAllowDenyV102IpAddressTypeEnumValues)
}

// AssertAllowDenyV102IpAddressTypeRequired checks if the required fields are not zero-ed
func AssertAllowDenyV102IpAddressTypeRequired(obj AllowDenyV102IpAddressType) error {
	return nil
}

// AssertAllowDenyV102IpAddressTypeConstraints checks if the values respects the defined constraints
func AssertAllowDenyV102IpAddressTypeConstraints(obj AllowDenyV102IpAddressType) error {
	return nil
}
