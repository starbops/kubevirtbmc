// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ControlV150ControlMode string

// List of ControlV150ControlMode
const (
	CONTROLV150CONTROLMODE_AUTOMATIC ControlV150ControlMode = "Automatic"
	CONTROLV150CONTROLMODE_OVERRIDE  ControlV150ControlMode = "Override"
	CONTROLV150CONTROLMODE_MANUAL    ControlV150ControlMode = "Manual"
	CONTROLV150CONTROLMODE_DISABLED  ControlV150ControlMode = "Disabled"
)

// AllowedControlV150ControlModeEnumValues is all the allowed values of ControlV150ControlMode enum
var AllowedControlV150ControlModeEnumValues = []ControlV150ControlMode{
	"Automatic",
	"Override",
	"Manual",
	"Disabled",
}

// validControlV150ControlModeEnumValue provides a map of ControlV150ControlModes for fast verification of use input
var validControlV150ControlModeEnumValues = map[ControlV150ControlMode]struct{}{
	"Automatic": {},
	"Override":  {},
	"Manual":    {},
	"Disabled":  {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ControlV150ControlMode) IsValid() bool {
	_, ok := validControlV150ControlModeEnumValues[v]
	return ok
}

// NewControlV150ControlModeFromValue returns a pointer to a valid ControlV150ControlMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewControlV150ControlModeFromValue(v string) (ControlV150ControlMode, error) {
	ev := ControlV150ControlMode(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ControlV150ControlMode: valid values are %v", v, AllowedControlV150ControlModeEnumValues)
}

// AssertControlV150ControlModeRequired checks if the required fields are not zero-ed
func AssertControlV150ControlModeRequired(obj ControlV150ControlMode) error {
	return nil
}

// AssertControlV150ControlModeConstraints checks if the values respects the defined constraints
func AssertControlV150ControlModeConstraints(obj ControlV150ControlMode) error {
	return nil
}
