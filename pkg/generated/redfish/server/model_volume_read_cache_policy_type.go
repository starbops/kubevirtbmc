// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type VolumeReadCachePolicyType string

// List of VolumeReadCachePolicyType
const (
	VOLUMEREADCACHEPOLICYTYPE_READ_AHEAD          VolumeReadCachePolicyType = "ReadAhead"
	VOLUMEREADCACHEPOLICYTYPE_ADAPTIVE_READ_AHEAD VolumeReadCachePolicyType = "AdaptiveReadAhead"
	VOLUMEREADCACHEPOLICYTYPE_OFF                 VolumeReadCachePolicyType = "Off"
)

// AllowedVolumeReadCachePolicyTypeEnumValues is all the allowed values of VolumeReadCachePolicyType enum
var AllowedVolumeReadCachePolicyTypeEnumValues = []VolumeReadCachePolicyType{
	"ReadAhead",
	"AdaptiveReadAhead",
	"Off",
}

// validVolumeReadCachePolicyTypeEnumValue provides a map of VolumeReadCachePolicyTypes for fast verification of use input
var validVolumeReadCachePolicyTypeEnumValues = map[VolumeReadCachePolicyType]struct{}{
	"ReadAhead":         {},
	"AdaptiveReadAhead": {},
	"Off":               {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeReadCachePolicyType) IsValid() bool {
	_, ok := validVolumeReadCachePolicyTypeEnumValues[v]
	return ok
}

// NewVolumeReadCachePolicyTypeFromValue returns a pointer to a valid VolumeReadCachePolicyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeReadCachePolicyTypeFromValue(v string) (VolumeReadCachePolicyType, error) {
	ev := VolumeReadCachePolicyType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for VolumeReadCachePolicyType: valid values are %v", v, AllowedVolumeReadCachePolicyTypeEnumValues)
}

// AssertVolumeReadCachePolicyTypeRequired checks if the required fields are not zero-ed
func AssertVolumeReadCachePolicyTypeRequired(obj VolumeReadCachePolicyType) error {
	return nil
}

// AssertVolumeReadCachePolicyTypeConstraints checks if the values respects the defined constraints
func AssertVolumeReadCachePolicyTypeConstraints(obj VolumeReadCachePolicyType) error {
	return nil
}
