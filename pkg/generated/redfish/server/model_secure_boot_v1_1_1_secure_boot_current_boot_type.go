// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type SecureBootV111SecureBootCurrentBootType string

// List of SecureBootV111SecureBootCurrentBootType
const (
	SECUREBOOTV111SECUREBOOTCURRENTBOOTTYPE_ENABLED  SecureBootV111SecureBootCurrentBootType = "Enabled"
	SECUREBOOTV111SECUREBOOTCURRENTBOOTTYPE_DISABLED SecureBootV111SecureBootCurrentBootType = "Disabled"
)

// AllowedSecureBootV111SecureBootCurrentBootTypeEnumValues is all the allowed values of SecureBootV111SecureBootCurrentBootType enum
var AllowedSecureBootV111SecureBootCurrentBootTypeEnumValues = []SecureBootV111SecureBootCurrentBootType{
	"Enabled",
	"Disabled",
}

// validSecureBootV111SecureBootCurrentBootTypeEnumValue provides a map of SecureBootV111SecureBootCurrentBootTypes for fast verification of use input
var validSecureBootV111SecureBootCurrentBootTypeEnumValues = map[SecureBootV111SecureBootCurrentBootType]struct{}{
	"Enabled":  {},
	"Disabled": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecureBootV111SecureBootCurrentBootType) IsValid() bool {
	_, ok := validSecureBootV111SecureBootCurrentBootTypeEnumValues[v]
	return ok
}

// NewSecureBootV111SecureBootCurrentBootTypeFromValue returns a pointer to a valid SecureBootV111SecureBootCurrentBootType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecureBootV111SecureBootCurrentBootTypeFromValue(v string) (SecureBootV111SecureBootCurrentBootType, error) {
	ev := SecureBootV111SecureBootCurrentBootType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for SecureBootV111SecureBootCurrentBootType: valid values are %v", v, AllowedSecureBootV111SecureBootCurrentBootTypeEnumValues)
}

// AssertSecureBootV111SecureBootCurrentBootTypeRequired checks if the required fields are not zero-ed
func AssertSecureBootV111SecureBootCurrentBootTypeRequired(obj SecureBootV111SecureBootCurrentBootType) error {
	return nil
}

// AssertSecureBootV111SecureBootCurrentBootTypeConstraints checks if the values respects the defined constraints
func AssertSecureBootV111SecureBootCurrentBootTypeConstraints(obj SecureBootV111SecureBootCurrentBootType) error {
	return nil
}
