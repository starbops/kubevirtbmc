// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
	"time"
)

// BatteryV122Battery - The Battery schema describes a battery unit, such as those used to provide systems with power during a power-loss event.  It also describes the location, such as a slot, socket, or bay, where a unit can be installed by populating a resource instance with an absent state if a unit is not present.
type BatteryV122Battery struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions BatteryV122Actions `json:"Actions,omitempty"`

	Assembly OdataV4IdRef `json:"Assembly,omitempty"`

	// The actual maximum capacity of this battery in amp-hour units.
	CapacityActualAmpHours *float32 `json:"CapacityActualAmpHours,omitempty"`

	// The actual maximum capacity of this battery in watt-hour units.
	CapacityActualWattHours *float32 `json:"CapacityActualWattHours,omitempty"`

	// The rated maximum capacity of this battery in amp-hour units.
	CapacityRatedAmpHours *float32 `json:"CapacityRatedAmpHours,omitempty"`

	// The rated maximum capacity of this battery in watt-hour units.
	CapacityRatedWattHours *float32 `json:"CapacityRatedWattHours,omitempty"`

	ChargeState BatteryV122ChargeState `json:"ChargeState,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The firmware version for this battery.
	FirmwareVersion *string `json:"FirmwareVersion,omitempty"`

	// An indication of whether this device can be inserted or removed while the equipment is in operation.
	HotPluggable *bool `json:"HotPluggable,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links BatteryV122Links `json:"Links,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive,omitempty"`

	// The manufacturer of this battery.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// The maximum charge rate of this battery in amp units.
	MaxChargeRateAmps *float32 `json:"MaxChargeRateAmps,omitempty"`

	// The maximum charge voltage of this battery.
	MaxChargeVoltage *float32 `json:"MaxChargeVoltage,omitempty"`

	// The maximum discharge rate of this battery in amp units.
	MaxDischargeRateAmps *float32 `json:"MaxDischargeRateAmps,omitempty"`

	Metrics OdataV4IdRef `json:"Metrics,omitempty"`

	// The model number for this battery.
	Model *string `json:"Model,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The part number for this battery.
	PartNumber *string `json:"PartNumber,omitempty"`

	// The production or manufacturing date of this battery.
	ProductionDate *time.Time `json:"ProductionDate,omitempty"`

	// An indication of whether this component can be independently replaced as allowed by the vendor's replacement policy.
	Replaceable *bool `json:"Replaceable,omitempty"`

	// The serial number for this battery.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	// The spare part number for this battery.
	SparePartNumber *string `json:"SparePartNumber,omitempty"`

	StateOfHealthPercent SensorSensorExcerpt `json:"StateOfHealthPercent,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The hardware version of this battery.
	Version *string `json:"Version,omitempty"`
}

// AssertBatteryV122BatteryRequired checks if the required fields are not zero-ed
func AssertBatteryV122BatteryRequired(obj BatteryV122Battery) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertBatteryV122ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Assembly); err != nil {
		return err
	}
	if err := AssertBatteryV122LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Metrics); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.StateOfHealthPercent); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertBatteryV122BatteryConstraints checks if the values respects the defined constraints
func AssertBatteryV122BatteryConstraints(obj BatteryV122Battery) error {
	if err := AssertBatteryV122ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Assembly); err != nil {
		return err
	}
	if obj.CapacityActualAmpHours != nil && *obj.CapacityActualAmpHours < 0 {
		return &ParsingError{Param: "CapacityActualAmpHours", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.CapacityActualWattHours != nil && *obj.CapacityActualWattHours < 0 {
		return &ParsingError{Param: "CapacityActualWattHours", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.CapacityRatedAmpHours != nil && *obj.CapacityRatedAmpHours < 0 {
		return &ParsingError{Param: "CapacityRatedAmpHours", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.CapacityRatedWattHours != nil && *obj.CapacityRatedWattHours < 0 {
		return &ParsingError{Param: "CapacityRatedWattHours", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertBatteryV122LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if obj.MaxChargeRateAmps != nil && *obj.MaxChargeRateAmps < 0 {
		return &ParsingError{Param: "MaxChargeRateAmps", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.MaxChargeVoltage != nil && *obj.MaxChargeVoltage < 0 {
		return &ParsingError{Param: "MaxChargeVoltage", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.MaxDischargeRateAmps != nil && *obj.MaxDischargeRateAmps < 0 {
		return &ParsingError{Param: "MaxDischargeRateAmps", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertOdataV4IdRefConstraints(obj.Metrics); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptConstraints(obj.StateOfHealthPercent); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
