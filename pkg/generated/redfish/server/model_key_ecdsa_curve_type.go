// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type KeyEcdsaCurveType string

// List of KeyEcdsaCurveType
const (
	KEYECDSACURVETYPE_NISTP256 KeyEcdsaCurveType = "NISTP256"
	KEYECDSACURVETYPE_NISTP384 KeyEcdsaCurveType = "NISTP384"
	KEYECDSACURVETYPE_NISTP521 KeyEcdsaCurveType = "NISTP521"
	KEYECDSACURVETYPE_NISTK163 KeyEcdsaCurveType = "NISTK163"
	KEYECDSACURVETYPE_NISTP192 KeyEcdsaCurveType = "NISTP192"
	KEYECDSACURVETYPE_NISTP224 KeyEcdsaCurveType = "NISTP224"
	KEYECDSACURVETYPE_NISTK233 KeyEcdsaCurveType = "NISTK233"
	KEYECDSACURVETYPE_NISTB233 KeyEcdsaCurveType = "NISTB233"
	KEYECDSACURVETYPE_NISTK283 KeyEcdsaCurveType = "NISTK283"
	KEYECDSACURVETYPE_NISTK409 KeyEcdsaCurveType = "NISTK409"
	KEYECDSACURVETYPE_NISTB409 KeyEcdsaCurveType = "NISTB409"
	KEYECDSACURVETYPE_NISTT571 KeyEcdsaCurveType = "NISTT571"
)

// AllowedKeyEcdsaCurveTypeEnumValues is all the allowed values of KeyEcdsaCurveType enum
var AllowedKeyEcdsaCurveTypeEnumValues = []KeyEcdsaCurveType{
	"NISTP256",
	"NISTP384",
	"NISTP521",
	"NISTK163",
	"NISTP192",
	"NISTP224",
	"NISTK233",
	"NISTB233",
	"NISTK283",
	"NISTK409",
	"NISTB409",
	"NISTT571",
}

// validKeyEcdsaCurveTypeEnumValue provides a map of KeyEcdsaCurveTypes for fast verification of use input
var validKeyEcdsaCurveTypeEnumValues = map[KeyEcdsaCurveType]struct{}{
	"NISTP256": {},
	"NISTP384": {},
	"NISTP521": {},
	"NISTK163": {},
	"NISTP192": {},
	"NISTP224": {},
	"NISTK233": {},
	"NISTB233": {},
	"NISTK283": {},
	"NISTK409": {},
	"NISTB409": {},
	"NISTT571": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyEcdsaCurveType) IsValid() bool {
	_, ok := validKeyEcdsaCurveTypeEnumValues[v]
	return ok
}

// NewKeyEcdsaCurveTypeFromValue returns a pointer to a valid KeyEcdsaCurveType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyEcdsaCurveTypeFromValue(v string) (KeyEcdsaCurveType, error) {
	ev := KeyEcdsaCurveType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for KeyEcdsaCurveType: valid values are %v", v, AllowedKeyEcdsaCurveTypeEnumValues)
}

// AssertKeyEcdsaCurveTypeRequired checks if the required fields are not zero-ed
func AssertKeyEcdsaCurveTypeRequired(obj KeyEcdsaCurveType) error {
	return nil
}

// AssertKeyEcdsaCurveTypeConstraints checks if the values respects the defined constraints
func AssertKeyEcdsaCurveTypeConstraints(obj KeyEcdsaCurveType) error {
	return nil
}
