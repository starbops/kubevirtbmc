// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2024.3
 */

package server

import (
	"fmt"
)

type ActionInfoV142ParameterTypes string

// List of ActionInfoV142ParameterTypes
const (
	ACTIONINFOV142PARAMETERTYPES_BOOLEAN      ActionInfoV142ParameterTypes = "Boolean"
	ACTIONINFOV142PARAMETERTYPES_NUMBER       ActionInfoV142ParameterTypes = "Number"
	ACTIONINFOV142PARAMETERTYPES_NUMBER_ARRAY ActionInfoV142ParameterTypes = "NumberArray"
	ACTIONINFOV142PARAMETERTYPES_STRING       ActionInfoV142ParameterTypes = "String"
	ACTIONINFOV142PARAMETERTYPES_STRING_ARRAY ActionInfoV142ParameterTypes = "StringArray"
	ACTIONINFOV142PARAMETERTYPES_OBJECT       ActionInfoV142ParameterTypes = "Object"
	ACTIONINFOV142PARAMETERTYPES_OBJECT_ARRAY ActionInfoV142ParameterTypes = "ObjectArray"
)

// AllowedActionInfoV142ParameterTypesEnumValues is all the allowed values of ActionInfoV142ParameterTypes enum
var AllowedActionInfoV142ParameterTypesEnumValues = []ActionInfoV142ParameterTypes{
	"Boolean",
	"Number",
	"NumberArray",
	"String",
	"StringArray",
	"Object",
	"ObjectArray",
}

// validActionInfoV142ParameterTypesEnumValue provides a map of ActionInfoV142ParameterTypess for fast verification of use input
var validActionInfoV142ParameterTypesEnumValues = map[ActionInfoV142ParameterTypes]struct{}{
	"Boolean":     {},
	"Number":      {},
	"NumberArray": {},
	"String":      {},
	"StringArray": {},
	"Object":      {},
	"ObjectArray": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActionInfoV142ParameterTypes) IsValid() bool {
	_, ok := validActionInfoV142ParameterTypesEnumValues[v]
	return ok
}

// NewActionInfoV142ParameterTypesFromValue returns a pointer to a valid ActionInfoV142ParameterTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActionInfoV142ParameterTypesFromValue(v string) (ActionInfoV142ParameterTypes, error) {
	ev := ActionInfoV142ParameterTypes(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ActionInfoV142ParameterTypes: valid values are %v", v, AllowedActionInfoV142ParameterTypesEnumValues)
}

// AssertActionInfoV142ParameterTypesRequired checks if the required fields are not zero-ed
func AssertActionInfoV142ParameterTypesRequired(obj ActionInfoV142ParameterTypes) error {
	return nil
}

// AssertActionInfoV142ParameterTypesConstraints checks if the values respects the defined constraints
func AssertActionInfoV142ParameterTypesConstraints(obj ActionInfoV142ParameterTypes) error {
	return nil
}
