// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PowerSupplyV153PowerSupplyType string

// List of PowerSupplyV153PowerSupplyType
const (
	POWERSUPPLYV153POWERSUPPLYTYPE_AC           PowerSupplyV153PowerSupplyType = "AC"
	POWERSUPPLYV153POWERSUPPLYTYPE_DC           PowerSupplyV153PowerSupplyType = "DC"
	POWERSUPPLYV153POWERSUPPLYTYPE_A_COR_DC     PowerSupplyV153PowerSupplyType = "ACorDC"
	POWERSUPPLYV153POWERSUPPLYTYPE_DC_REGULATOR PowerSupplyV153PowerSupplyType = "DCRegulator"
)

// AllowedPowerSupplyV153PowerSupplyTypeEnumValues is all the allowed values of PowerSupplyV153PowerSupplyType enum
var AllowedPowerSupplyV153PowerSupplyTypeEnumValues = []PowerSupplyV153PowerSupplyType{
	"AC",
	"DC",
	"ACorDC",
	"DCRegulator",
}

// validPowerSupplyV153PowerSupplyTypeEnumValue provides a map of PowerSupplyV153PowerSupplyTypes for fast verification of use input
var validPowerSupplyV153PowerSupplyTypeEnumValues = map[PowerSupplyV153PowerSupplyType]struct{}{
	"AC":          {},
	"DC":          {},
	"ACorDC":      {},
	"DCRegulator": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerSupplyV153PowerSupplyType) IsValid() bool {
	_, ok := validPowerSupplyV153PowerSupplyTypeEnumValues[v]
	return ok
}

// NewPowerSupplyV153PowerSupplyTypeFromValue returns a pointer to a valid PowerSupplyV153PowerSupplyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerSupplyV153PowerSupplyTypeFromValue(v string) (PowerSupplyV153PowerSupplyType, error) {
	ev := PowerSupplyV153PowerSupplyType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PowerSupplyV153PowerSupplyType: valid values are %v", v, AllowedPowerSupplyV153PowerSupplyTypeEnumValues)
}

// AssertPowerSupplyV153PowerSupplyTypeRequired checks if the required fields are not zero-ed
func AssertPowerSupplyV153PowerSupplyTypeRequired(obj PowerSupplyV153PowerSupplyType) error {
	return nil
}

// AssertPowerSupplyV153PowerSupplyTypeConstraints checks if the values respects the defined constraints
func AssertPowerSupplyV153PowerSupplyTypeConstraints(obj PowerSupplyV153PowerSupplyType) error {
	return nil
}
