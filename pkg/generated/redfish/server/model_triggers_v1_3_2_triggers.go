// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// TriggersV132Triggers - The Triggers schema describes a trigger that applies to metrics.
type TriggersV132Triggers struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions TriggersV132Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	DiscreteTriggerCondition TriggersV132DiscreteTriggerConditionEnum `json:"DiscreteTriggerCondition,omitempty"`

	// The list of discrete triggers.
	DiscreteTriggers []TriggersV132DiscreteTrigger `json:"DiscreteTriggers,omitempty"`

	// The array of MessageIds that specify when a trigger condition is met based on an event.
	EventTriggers []*string `json:"EventTriggers,omitempty"`

	// The duration the sensor value must not violate the threshold before the threshold is deactivated.
	HysteresisDuration *string `json:"HysteresisDuration,omitempty" validate:"regexp=^P(\\\\d+D)?(T(\\\\d+H)?(\\\\d+M)?(\\\\d+(.\\\\d+)?S)?)?$"`

	// The reading offset from the threshold value required to clear the threshold.
	HysteresisReading *float32 `json:"HysteresisReading,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links TriggersV132Links `json:"Links,omitempty"`

	// The label for the metric definitions that contain the property identifiers for this trigger.  It matches the Id property of the corresponding metric definition.
	MetricIds []*string `json:"MetricIds,omitempty"`

	// An array of URIs with wildcards and property identifiers for this trigger.  Each wildcard is replaced with its corresponding entry in the Wildcard array property.
	MetricProperties []*string `json:"MetricProperties,omitempty"`

	MetricType TriggersV132MetricTypeEnum `json:"MetricType,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	NumericThresholds TriggersV132Thresholds `json:"NumericThresholds,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The actions that the trigger initiates.
	TriggerActions []TriggersV132TriggerActionEnum `json:"TriggerActions,omitempty"`

	// The wildcards and their substitution values for the entries in the MetricProperties array property.
	Wildcards []TriggersV132Wildcard `json:"Wildcards,omitempty"`
}

// AssertTriggersV132TriggersRequired checks if the required fields are not zero-ed
func AssertTriggersV132TriggersRequired(obj TriggersV132Triggers) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertTriggersV132ActionsRequired(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.DiscreteTriggers {
		if err := AssertTriggersV132DiscreteTriggerRequired(el); err != nil {
			return err
		}
	}
	if err := AssertTriggersV132LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertTriggersV132ThresholdsRequired(obj.NumericThresholds); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.Wildcards {
		if err := AssertTriggersV132WildcardRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertTriggersV132TriggersConstraints checks if the values respects the defined constraints
func AssertTriggersV132TriggersConstraints(obj TriggersV132Triggers) error {
	if err := AssertTriggersV132ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.DiscreteTriggers {
		if err := AssertTriggersV132DiscreteTriggerConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertTriggersV132LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertTriggersV132ThresholdsConstraints(obj.NumericThresholds); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.Wildcards {
		if err := AssertTriggersV132WildcardConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
