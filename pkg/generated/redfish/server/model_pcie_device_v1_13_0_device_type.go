// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PcieDeviceV1130DeviceType string

// List of PcieDeviceV1130DeviceType
const (
	PCIEDEVICEV1130DEVICETYPE_SINGLE_FUNCTION PcieDeviceV1130DeviceType = "SingleFunction"
	PCIEDEVICEV1130DEVICETYPE_MULTI_FUNCTION  PcieDeviceV1130DeviceType = "MultiFunction"
	PCIEDEVICEV1130DEVICETYPE_SIMULATED       PcieDeviceV1130DeviceType = "Simulated"
	PCIEDEVICEV1130DEVICETYPE_RETIMER         PcieDeviceV1130DeviceType = "Retimer"
)

// AllowedPcieDeviceV1130DeviceTypeEnumValues is all the allowed values of PcieDeviceV1130DeviceType enum
var AllowedPcieDeviceV1130DeviceTypeEnumValues = []PcieDeviceV1130DeviceType{
	"SingleFunction",
	"MultiFunction",
	"Simulated",
	"Retimer",
}

// validPcieDeviceV1130DeviceTypeEnumValue provides a map of PcieDeviceV1130DeviceTypes for fast verification of use input
var validPcieDeviceV1130DeviceTypeEnumValues = map[PcieDeviceV1130DeviceType]struct{}{
	"SingleFunction": {},
	"MultiFunction":  {},
	"Simulated":      {},
	"Retimer":        {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PcieDeviceV1130DeviceType) IsValid() bool {
	_, ok := validPcieDeviceV1130DeviceTypeEnumValues[v]
	return ok
}

// NewPcieDeviceV1130DeviceTypeFromValue returns a pointer to a valid PcieDeviceV1130DeviceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPcieDeviceV1130DeviceTypeFromValue(v string) (PcieDeviceV1130DeviceType, error) {
	ev := PcieDeviceV1130DeviceType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PcieDeviceV1130DeviceType: valid values are %v", v, AllowedPcieDeviceV1130DeviceTypeEnumValues)
}

// AssertPcieDeviceV1130DeviceTypeRequired checks if the required fields are not zero-ed
func AssertPcieDeviceV1130DeviceTypeRequired(obj PcieDeviceV1130DeviceType) error {
	return nil
}

// AssertPcieDeviceV1130DeviceTypeConstraints checks if the values respects the defined constraints
func AssertPcieDeviceV1130DeviceTypeConstraints(obj PcieDeviceV1130DeviceType) error {
	return nil
}
