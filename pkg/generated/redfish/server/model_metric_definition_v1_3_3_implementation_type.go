// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type MetricDefinitionV133ImplementationType string

// List of MetricDefinitionV133ImplementationType
const (
	METRICDEFINITIONV133IMPLEMENTATIONTYPE_PHYSICAL_SENSOR MetricDefinitionV133ImplementationType = "PhysicalSensor"
	METRICDEFINITIONV133IMPLEMENTATIONTYPE_CALCULATED      MetricDefinitionV133ImplementationType = "Calculated"
	METRICDEFINITIONV133IMPLEMENTATIONTYPE_SYNTHESIZED     MetricDefinitionV133ImplementationType = "Synthesized"
	METRICDEFINITIONV133IMPLEMENTATIONTYPE_DIGITAL_METER   MetricDefinitionV133ImplementationType = "DigitalMeter"
)

// AllowedMetricDefinitionV133ImplementationTypeEnumValues is all the allowed values of MetricDefinitionV133ImplementationType enum
var AllowedMetricDefinitionV133ImplementationTypeEnumValues = []MetricDefinitionV133ImplementationType{
	"PhysicalSensor",
	"Calculated",
	"Synthesized",
	"DigitalMeter",
}

// validMetricDefinitionV133ImplementationTypeEnumValue provides a map of MetricDefinitionV133ImplementationTypes for fast verification of use input
var validMetricDefinitionV133ImplementationTypeEnumValues = map[MetricDefinitionV133ImplementationType]struct{}{
	"PhysicalSensor": {},
	"Calculated":     {},
	"Synthesized":    {},
	"DigitalMeter":   {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricDefinitionV133ImplementationType) IsValid() bool {
	_, ok := validMetricDefinitionV133ImplementationTypeEnumValues[v]
	return ok
}

// NewMetricDefinitionV133ImplementationTypeFromValue returns a pointer to a valid MetricDefinitionV133ImplementationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricDefinitionV133ImplementationTypeFromValue(v string) (MetricDefinitionV133ImplementationType, error) {
	ev := MetricDefinitionV133ImplementationType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for MetricDefinitionV133ImplementationType: valid values are %v", v, AllowedMetricDefinitionV133ImplementationTypeEnumValues)
}

// AssertMetricDefinitionV133ImplementationTypeRequired checks if the required fields are not zero-ed
func AssertMetricDefinitionV133ImplementationTypeRequired(obj MetricDefinitionV133ImplementationType) error {
	return nil
}

// AssertMetricDefinitionV133ImplementationTypeConstraints checks if the values respects the defined constraints
func AssertMetricDefinitionV133ImplementationTypeConstraints(obj MetricDefinitionV133ImplementationType) error {
	return nil
}
