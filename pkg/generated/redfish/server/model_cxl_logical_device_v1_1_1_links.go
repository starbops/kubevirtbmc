// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// CxlLogicalDeviceV111Links - The links to other resources that are related to this resource.
type CxlLogicalDeviceV111Links struct {

	// An array of links to the endpoints associated with this CXL logical device.
	Endpoints []OdataV4IdRef `json:"Endpoints,omitempty"`

	// The number of items in a collection.
	EndpointsodataCount int64 `json:"Endpoints@odata.count,omitempty"`

	// An array of links to the memory chunks owned by this CXL logical device.
	MemoryChunks []OdataV4IdRef `json:"MemoryChunks,omitempty"`

	// The number of items in a collection.
	MemoryChunksodataCount int64 `json:"MemoryChunks@odata.count,omitempty"`

	// An array of links to the memory domains associated with this CXL logical device.
	MemoryDomains []OdataV4IdRef `json:"MemoryDomains,omitempty"`

	// The number of items in a collection.
	MemoryDomainsodataCount int64 `json:"MemoryDomains@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An array of links to the PCIe functions assigned to this CXL logical device.
	PCIeFunctions []OdataV4IdRef `json:"PCIeFunctions,omitempty"`

	// The number of items in a collection.
	PCIeFunctionsodataCount int64 `json:"PCIeFunctions@odata.count,omitempty"`
}

// AssertCxlLogicalDeviceV111LinksRequired checks if the required fields are not zero-ed
func AssertCxlLogicalDeviceV111LinksRequired(obj CxlLogicalDeviceV111Links) error {
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MemoryChunks {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MemoryDomains {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PCIeFunctions {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertCxlLogicalDeviceV111LinksConstraints checks if the values respects the defined constraints
func AssertCxlLogicalDeviceV111LinksConstraints(obj CxlLogicalDeviceV111Links) error {
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MemoryChunks {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MemoryDomains {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PCIeFunctions {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
