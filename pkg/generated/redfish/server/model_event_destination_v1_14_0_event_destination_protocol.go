// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type EventDestinationV1140EventDestinationProtocol string

// List of EventDestinationV1140EventDestinationProtocol
const (
	EVENTDESTINATIONV1140EVENTDESTINATIONPROTOCOL_REDFISH     EventDestinationV1140EventDestinationProtocol = "Redfish"
	EVENTDESTINATIONV1140EVENTDESTINATIONPROTOCOL_KAFKA       EventDestinationV1140EventDestinationProtocol = "Kafka"
	EVENTDESTINATIONV1140EVENTDESTINATIONPROTOCOL_SNMPV1      EventDestinationV1140EventDestinationProtocol = "SNMPv1"
	EVENTDESTINATIONV1140EVENTDESTINATIONPROTOCOL_SNMPV2C     EventDestinationV1140EventDestinationProtocol = "SNMPv2c"
	EVENTDESTINATIONV1140EVENTDESTINATIONPROTOCOL_SNMPV3      EventDestinationV1140EventDestinationProtocol = "SNMPv3"
	EVENTDESTINATIONV1140EVENTDESTINATIONPROTOCOL_SMTP        EventDestinationV1140EventDestinationProtocol = "SMTP"
	EVENTDESTINATIONV1140EVENTDESTINATIONPROTOCOL_SYSLOG_TLS  EventDestinationV1140EventDestinationProtocol = "SyslogTLS"
	EVENTDESTINATIONV1140EVENTDESTINATIONPROTOCOL_SYSLOG_TCP  EventDestinationV1140EventDestinationProtocol = "SyslogTCP"
	EVENTDESTINATIONV1140EVENTDESTINATIONPROTOCOL_SYSLOG_UDP  EventDestinationV1140EventDestinationProtocol = "SyslogUDP"
	EVENTDESTINATIONV1140EVENTDESTINATIONPROTOCOL_SYSLOG_RELP EventDestinationV1140EventDestinationProtocol = "SyslogRELP"
	EVENTDESTINATIONV1140EVENTDESTINATIONPROTOCOL_OEM         EventDestinationV1140EventDestinationProtocol = "OEM"
)

// AllowedEventDestinationV1140EventDestinationProtocolEnumValues is all the allowed values of EventDestinationV1140EventDestinationProtocol enum
var AllowedEventDestinationV1140EventDestinationProtocolEnumValues = []EventDestinationV1140EventDestinationProtocol{
	"Redfish",
	"Kafka",
	"SNMPv1",
	"SNMPv2c",
	"SNMPv3",
	"SMTP",
	"SyslogTLS",
	"SyslogTCP",
	"SyslogUDP",
	"SyslogRELP",
	"OEM",
}

// validEventDestinationV1140EventDestinationProtocolEnumValue provides a map of EventDestinationV1140EventDestinationProtocols for fast verification of use input
var validEventDestinationV1140EventDestinationProtocolEnumValues = map[EventDestinationV1140EventDestinationProtocol]struct{}{
	"Redfish":    {},
	"Kafka":      {},
	"SNMPv1":     {},
	"SNMPv2c":    {},
	"SNMPv3":     {},
	"SMTP":       {},
	"SyslogTLS":  {},
	"SyslogTCP":  {},
	"SyslogUDP":  {},
	"SyslogRELP": {},
	"OEM":        {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventDestinationV1140EventDestinationProtocol) IsValid() bool {
	_, ok := validEventDestinationV1140EventDestinationProtocolEnumValues[v]
	return ok
}

// NewEventDestinationV1140EventDestinationProtocolFromValue returns a pointer to a valid EventDestinationV1140EventDestinationProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventDestinationV1140EventDestinationProtocolFromValue(v string) (EventDestinationV1140EventDestinationProtocol, error) {
	ev := EventDestinationV1140EventDestinationProtocol(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for EventDestinationV1140EventDestinationProtocol: valid values are %v", v, AllowedEventDestinationV1140EventDestinationProtocolEnumValues)
}

// AssertEventDestinationV1140EventDestinationProtocolRequired checks if the required fields are not zero-ed
func AssertEventDestinationV1140EventDestinationProtocolRequired(obj EventDestinationV1140EventDestinationProtocol) error {
	return nil
}

// AssertEventDestinationV1140EventDestinationProtocolConstraints checks if the values respects the defined constraints
func AssertEventDestinationV1140EventDestinationProtocolConstraints(obj EventDestinationV1140EventDestinationProtocol) error {
	return nil
}
