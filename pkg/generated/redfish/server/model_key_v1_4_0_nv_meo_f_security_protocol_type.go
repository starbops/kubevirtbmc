// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// KeyV140NvMeoFSecurityProtocolType : The NVMe security protocols that a key protects.
type KeyV140NvMeoFSecurityProtocolType string

// List of KeyV140NvMeoFSecurityProtocolType
const (
	KEYV140NVMEOFSECURITYPROTOCOLTYPE_DHHC    KeyV140NvMeoFSecurityProtocolType = "DHHC"
	KEYV140NVMEOFSECURITYPROTOCOLTYPE_TLS_PSK KeyV140NvMeoFSecurityProtocolType = "TLS_PSK"
	KEYV140NVMEOFSECURITYPROTOCOLTYPE_OEM     KeyV140NvMeoFSecurityProtocolType = "OEM"
)

// AllowedKeyV140NvMeoFSecurityProtocolTypeEnumValues is all the allowed values of KeyV140NvMeoFSecurityProtocolType enum
var AllowedKeyV140NvMeoFSecurityProtocolTypeEnumValues = []KeyV140NvMeoFSecurityProtocolType{
	"DHHC",
	"TLS_PSK",
	"OEM",
}

// validKeyV140NvMeoFSecurityProtocolTypeEnumValue provides a map of KeyV140NvMeoFSecurityProtocolTypes for fast verification of use input
var validKeyV140NvMeoFSecurityProtocolTypeEnumValues = map[KeyV140NvMeoFSecurityProtocolType]struct{}{
	"DHHC":    {},
	"TLS_PSK": {},
	"OEM":     {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyV140NvMeoFSecurityProtocolType) IsValid() bool {
	_, ok := validKeyV140NvMeoFSecurityProtocolTypeEnumValues[v]
	return ok
}

// NewKeyV140NvMeoFSecurityProtocolTypeFromValue returns a pointer to a valid KeyV140NvMeoFSecurityProtocolType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyV140NvMeoFSecurityProtocolTypeFromValue(v string) (KeyV140NvMeoFSecurityProtocolType, error) {
	ev := KeyV140NvMeoFSecurityProtocolType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for KeyV140NvMeoFSecurityProtocolType: valid values are %v", v, AllowedKeyV140NvMeoFSecurityProtocolTypeEnumValues)
}

// AssertKeyV140NvMeoFSecurityProtocolTypeRequired checks if the required fields are not zero-ed
func AssertKeyV140NvMeoFSecurityProtocolTypeRequired(obj KeyV140NvMeoFSecurityProtocolType) error {
	return nil
}

// AssertKeyV140NvMeoFSecurityProtocolTypeConstraints checks if the values respects the defined constraints
func AssertKeyV140NvMeoFSecurityProtocolTypeConstraints(obj KeyV140NvMeoFSecurityProtocolType) error {
	return nil
}
