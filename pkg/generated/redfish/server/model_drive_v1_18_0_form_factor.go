// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type DriveV1180FormFactor string

// List of DriveV1180FormFactor
const (
	DRIVEV1180FORMFACTOR_DRIVE3_5              DriveV1180FormFactor = "Drive3_5"
	DRIVEV1180FORMFACTOR_DRIVE2_5              DriveV1180FormFactor = "Drive2_5"
	DRIVEV1180FORMFACTOR_EDSFF                 DriveV1180FormFactor = "EDSFF"
	DRIVEV1180FORMFACTOR_EDSFF_1_U_LONG        DriveV1180FormFactor = "EDSFF_1U_Long"
	DRIVEV1180FORMFACTOR_EDSFF_1_U_SHORT       DriveV1180FormFactor = "EDSFF_1U_Short"
	DRIVEV1180FORMFACTOR_EDSFF_E3_SHORT        DriveV1180FormFactor = "EDSFF_E3_Short"
	DRIVEV1180FORMFACTOR_EDSFF_E3_LONG         DriveV1180FormFactor = "EDSFF_E3_Long"
	DRIVEV1180FORMFACTOR_M2                    DriveV1180FormFactor = "M2"
	DRIVEV1180FORMFACTOR_M2_2230               DriveV1180FormFactor = "M2_2230"
	DRIVEV1180FORMFACTOR_M2_2242               DriveV1180FormFactor = "M2_2242"
	DRIVEV1180FORMFACTOR_M2_2260               DriveV1180FormFactor = "M2_2260"
	DRIVEV1180FORMFACTOR_M2_2280               DriveV1180FormFactor = "M2_2280"
	DRIVEV1180FORMFACTOR_M2_22110              DriveV1180FormFactor = "M2_22110"
	DRIVEV1180FORMFACTOR_U2                    DriveV1180FormFactor = "U2"
	DRIVEV1180FORMFACTOR_PCIE_SLOT_FULL_LENGTH DriveV1180FormFactor = "PCIeSlotFullLength"
	DRIVEV1180FORMFACTOR_PCIE_SLOT_LOW_PROFILE DriveV1180FormFactor = "PCIeSlotLowProfile"
	DRIVEV1180FORMFACTOR_PCIE_HALF_LENGTH      DriveV1180FormFactor = "PCIeHalfLength"
	DRIVEV1180FORMFACTOR_OEM                   DriveV1180FormFactor = "OEM"
)

// AllowedDriveV1180FormFactorEnumValues is all the allowed values of DriveV1180FormFactor enum
var AllowedDriveV1180FormFactorEnumValues = []DriveV1180FormFactor{
	"Drive3_5",
	"Drive2_5",
	"EDSFF",
	"EDSFF_1U_Long",
	"EDSFF_1U_Short",
	"EDSFF_E3_Short",
	"EDSFF_E3_Long",
	"M2",
	"M2_2230",
	"M2_2242",
	"M2_2260",
	"M2_2280",
	"M2_22110",
	"U2",
	"PCIeSlotFullLength",
	"PCIeSlotLowProfile",
	"PCIeHalfLength",
	"OEM",
}

// validDriveV1180FormFactorEnumValue provides a map of DriveV1180FormFactors for fast verification of use input
var validDriveV1180FormFactorEnumValues = map[DriveV1180FormFactor]struct{}{
	"Drive3_5":           {},
	"Drive2_5":           {},
	"EDSFF":              {},
	"EDSFF_1U_Long":      {},
	"EDSFF_1U_Short":     {},
	"EDSFF_E3_Short":     {},
	"EDSFF_E3_Long":      {},
	"M2":                 {},
	"M2_2230":            {},
	"M2_2242":            {},
	"M2_2260":            {},
	"M2_2280":            {},
	"M2_22110":           {},
	"U2":                 {},
	"PCIeSlotFullLength": {},
	"PCIeSlotLowProfile": {},
	"PCIeHalfLength":     {},
	"OEM":                {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DriveV1180FormFactor) IsValid() bool {
	_, ok := validDriveV1180FormFactorEnumValues[v]
	return ok
}

// NewDriveV1180FormFactorFromValue returns a pointer to a valid DriveV1180FormFactor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDriveV1180FormFactorFromValue(v string) (DriveV1180FormFactor, error) {
	ev := DriveV1180FormFactor(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for DriveV1180FormFactor: valid values are %v", v, AllowedDriveV1180FormFactorEnumValues)
}

// AssertDriveV1180FormFactorRequired checks if the required fields are not zero-ed
func AssertDriveV1180FormFactorRequired(obj DriveV1180FormFactor) error {
	return nil
}

// AssertDriveV1180FormFactorConstraints checks if the values respects the defined constraints
func AssertDriveV1180FormFactorConstraints(obj DriveV1180FormFactor) error {
	return nil
}
