// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// FabricAdapterV152FabricAdapter - A fabric adapter represents the physical fabric adapter capable of connecting to an interconnect fabric.  Examples include, but are not limited to, Ethernet, NVMe over Fabrics, Gen-Z, and SAS fabric adapters.
type FabricAdapterV152FabricAdapter struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	// The manufacturer name for the ASIC of this fabric adapter.
	ASICManufacturer *string `json:"ASICManufacturer,omitempty"`

	// The part number for the ASIC on this fabric adapter.
	ASICPartNumber *string `json:"ASICPartNumber,omitempty"`

	// The revision identifier for the ASIC on this fabric adapter.
	ASICRevisionIdentifier *string `json:"ASICRevisionIdentifier,omitempty"`

	Actions FabricAdapterV152Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	FabricType ProtocolProtocol `json:"FabricType,omitempty"`

	// An array of fabric types supported by this fabric adapter.
	FabricTypeCapabilities []ProtocolProtocol `json:"FabricTypeCapabilities,omitempty"`

	// The firmware version of this fabric adapter.
	FirmwareVersion *string `json:"FirmwareVersion,omitempty"`

	GenZ FabricAdapterV152GenZ `json:"GenZ,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links FabricAdapterV152Links `json:"Links,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive,omitempty"`

	// The manufacturer or OEM of this fabric adapter.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// The model string for this fabric adapter.
	Model *string `json:"Model,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PCIeInterface PcieDevicePcieInterface `json:"PCIeInterface,omitempty"`

	// The part number for this fabric adapter.
	PartNumber *string `json:"PartNumber,omitempty"`

	Ports OdataV4IdRef `json:"Ports,omitempty"`

	// The manufacturer SKU for this fabric adapter.
	SKU *string `json:"SKU,omitempty"`

	// The serial number for this fabric adapter.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	// The spare part number for this fabric adapter.
	SparePartNumber *string `json:"SparePartNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	UUID string `json:"UUID,omitempty" validate:"regexp=^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
}

// AssertFabricAdapterV152FabricAdapterRequired checks if the required fields are not zero-ed
func AssertFabricAdapterV152FabricAdapterRequired(obj FabricAdapterV152FabricAdapter) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertFabricAdapterV152ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertFabricAdapterV152GenZRequired(obj.GenZ); err != nil {
		return err
	}
	if err := AssertFabricAdapterV152LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertPcieDevicePcieInterfaceRequired(obj.PCIeInterface); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Ports); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertFabricAdapterV152FabricAdapterConstraints checks if the values respects the defined constraints
func AssertFabricAdapterV152FabricAdapterConstraints(obj FabricAdapterV152FabricAdapter) error {
	if err := AssertFabricAdapterV152ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertFabricAdapterV152GenZConstraints(obj.GenZ); err != nil {
		return err
	}
	if err := AssertFabricAdapterV152LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if err := AssertPcieDevicePcieInterfaceConstraints(obj.PCIeInterface); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Ports); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
