// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type SoftwareInventoryV1101VersionScheme string

// List of SoftwareInventoryV1101VersionScheme
const (
	SOFTWAREINVENTORYV1101VERSIONSCHEME_SEM_VER              SoftwareInventoryV1101VersionScheme = "SemVer"
	SOFTWAREINVENTORYV1101VERSIONSCHEME_DOT_INTEGER_NOTATION SoftwareInventoryV1101VersionScheme = "DotIntegerNotation"
	SOFTWAREINVENTORYV1101VERSIONSCHEME_OEM                  SoftwareInventoryV1101VersionScheme = "OEM"
)

// AllowedSoftwareInventoryV1101VersionSchemeEnumValues is all the allowed values of SoftwareInventoryV1101VersionScheme enum
var AllowedSoftwareInventoryV1101VersionSchemeEnumValues = []SoftwareInventoryV1101VersionScheme{
	"SemVer",
	"DotIntegerNotation",
	"OEM",
}

// validSoftwareInventoryV1101VersionSchemeEnumValue provides a map of SoftwareInventoryV1101VersionSchemes for fast verification of use input
var validSoftwareInventoryV1101VersionSchemeEnumValues = map[SoftwareInventoryV1101VersionScheme]struct{}{
	"SemVer":             {},
	"DotIntegerNotation": {},
	"OEM":                {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SoftwareInventoryV1101VersionScheme) IsValid() bool {
	_, ok := validSoftwareInventoryV1101VersionSchemeEnumValues[v]
	return ok
}

// NewSoftwareInventoryV1101VersionSchemeFromValue returns a pointer to a valid SoftwareInventoryV1101VersionScheme
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSoftwareInventoryV1101VersionSchemeFromValue(v string) (SoftwareInventoryV1101VersionScheme, error) {
	ev := SoftwareInventoryV1101VersionScheme(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for SoftwareInventoryV1101VersionScheme: valid values are %v", v, AllowedSoftwareInventoryV1101VersionSchemeEnumValues)
}

// AssertSoftwareInventoryV1101VersionSchemeRequired checks if the required fields are not zero-ed
func AssertSoftwareInventoryV1101VersionSchemeRequired(obj SoftwareInventoryV1101VersionScheme) error {
	return nil
}

// AssertSoftwareInventoryV1101VersionSchemeConstraints checks if the values respects the defined constraints
func AssertSoftwareInventoryV1101VersionSchemeConstraints(obj SoftwareInventoryV1101VersionScheme) error {
	return nil
}
