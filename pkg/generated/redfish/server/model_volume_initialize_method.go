// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type VolumeInitializeMethod string

// List of VolumeInitializeMethod
const (
	VOLUMEINITIALIZEMETHOD_SKIP       VolumeInitializeMethod = "Skip"
	VOLUMEINITIALIZEMETHOD_BACKGROUND VolumeInitializeMethod = "Background"
	VOLUMEINITIALIZEMETHOD_FOREGROUND VolumeInitializeMethod = "Foreground"
)

// AllowedVolumeInitializeMethodEnumValues is all the allowed values of VolumeInitializeMethod enum
var AllowedVolumeInitializeMethodEnumValues = []VolumeInitializeMethod{
	"Skip",
	"Background",
	"Foreground",
}

// validVolumeInitializeMethodEnumValue provides a map of VolumeInitializeMethods for fast verification of use input
var validVolumeInitializeMethodEnumValues = map[VolumeInitializeMethod]struct{}{
	"Skip":       {},
	"Background": {},
	"Foreground": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeInitializeMethod) IsValid() bool {
	_, ok := validVolumeInitializeMethodEnumValues[v]
	return ok
}

// NewVolumeInitializeMethodFromValue returns a pointer to a valid VolumeInitializeMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeInitializeMethodFromValue(v string) (VolumeInitializeMethod, error) {
	ev := VolumeInitializeMethod(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for VolumeInitializeMethod: valid values are %v", v, AllowedVolumeInitializeMethodEnumValues)
}

// AssertVolumeInitializeMethodRequired checks if the required fields are not zero-ed
func AssertVolumeInitializeMethodRequired(obj VolumeInitializeMethod) error {
	return nil
}

// AssertVolumeInitializeMethodConstraints checks if the values respects the defined constraints
func AssertVolumeInitializeMethodConstraints(obj VolumeInitializeMethod) error {
	return nil
}
