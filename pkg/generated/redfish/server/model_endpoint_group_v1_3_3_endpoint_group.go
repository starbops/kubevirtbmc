// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// EndpointGroupV133EndpointGroup - The EndpointGroup schema describes a group of endpoints that are managed as a unit.
type EndpointGroupV133EndpointGroup struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	AccessState EndpointGroupAccessState `json:"AccessState,omitempty"`

	Actions EndpointGroupV133Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The endpoints in this endpoint group.
	// Deprecated
	Endpoints []OdataV4IdRef `json:"Endpoints,omitempty"`

	// The number of items in a collection.
	EndpointsodataCount int64 `json:"Endpoints@odata.count,omitempty"`

	GroupType EndpointGroupV133GroupType `json:"GroupType,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Identifier ResourceIdentifier `json:"Identifier,omitempty"`

	Links EndpointGroupV133Links `json:"Links,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An indication if access to the resources through the endpoint group is preferred.
	// Deprecated
	Preferred *bool `json:"Preferred,omitempty"`

	// The SCSI-defined identifier for this group.
	TargetEndpointGroupIdentifier *int64 `json:"TargetEndpointGroupIdentifier,omitempty"`
}

// AssertEndpointGroupV133EndpointGroupRequired checks if the required fields are not zero-ed
func AssertEndpointGroupV133EndpointGroupRequired(obj EndpointGroupV133EndpointGroup) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertEndpointGroupV133ActionsRequired(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceIdentifierRequired(obj.Identifier); err != nil {
		return err
	}
	if err := AssertEndpointGroupV133LinksRequired(obj.Links); err != nil {
		return err
	}
	return nil
}

// AssertEndpointGroupV133EndpointGroupConstraints checks if the values respects the defined constraints
func AssertEndpointGroupV133EndpointGroupConstraints(obj EndpointGroupV133EndpointGroup) error {
	if err := AssertEndpointGroupV133ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceIdentifierConstraints(obj.Identifier); err != nil {
		return err
	}
	if err := AssertEndpointGroupV133LinksConstraints(obj.Links); err != nil {
		return err
	}
	return nil
}
