// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// NetworkAdapterV1100NetworkAdapter - The NetworkAdapter schema represents a physical network adapter capable of connecting to a computer network.  Examples include but are not limited to Ethernet, Fibre Channel, and converged network adapters.
type NetworkAdapterV1100NetworkAdapter struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions NetworkAdapterV1100Actions `json:"Actions,omitempty"`

	Assembly OdataV4IdRef `json:"Assembly,omitempty"`

	Certificates OdataV4IdRef `json:"Certificates,omitempty"`

	// The set of network controllers ASICs that make up this NetworkAdapter.
	Controllers []NetworkAdapterV1100Controllers `json:"Controllers,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	EnvironmentMetrics OdataV4IdRef `json:"EnvironmentMetrics,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The durable names for the network adapter.
	Identifiers []ResourceIdentifier `json:"Identifiers,omitempty"`

	// Enable or disable LLDP globally for an adapter.
	LLDPEnabled bool `json:"LLDPEnabled,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// The manufacturer or OEM of this network adapter.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// An array of DSP0274-defined measurement blocks.
	// Deprecated
	Measurements []SoftwareInventoryMeasurementBlock `json:"Measurements,omitempty"`

	Metrics OdataV4IdRef `json:"Metrics,omitempty"`

	// The model string for this network adapter.
	Model *string `json:"Model,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	NetworkDeviceFunctions OdataV4IdRef `json:"NetworkDeviceFunctions,omitempty"`

	NetworkPorts OdataV4IdRef `json:"NetworkPorts,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// Part number for this network adapter.
	PartNumber *string `json:"PartNumber,omitempty"`

	Ports OdataV4IdRef `json:"Ports,omitempty"`

	Processors OdataV4IdRef `json:"Processors,omitempty"`

	// The manufacturer SKU for this network adapter.
	SKU *string `json:"SKU,omitempty"`

	// The serial number for this network adapter.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertNetworkAdapterV1100NetworkAdapterRequired checks if the required fields are not zero-ed
func AssertNetworkAdapterV1100NetworkAdapterRequired(obj NetworkAdapterV1100NetworkAdapter) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertNetworkAdapterV1100ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Assembly); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Certificates); err != nil {
		return err
	}
	for _, el := range obj.Controllers {
		if err := AssertNetworkAdapterV1100ControllersRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.EnvironmentMetrics); err != nil {
		return err
	}
	for _, el := range obj.Identifiers {
		if err := AssertResourceIdentifierRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	for _, el := range obj.Measurements {
		if err := AssertSoftwareInventoryMeasurementBlockRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.Metrics); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.NetworkDeviceFunctions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.NetworkPorts); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Ports); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Processors); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertNetworkAdapterV1100NetworkAdapterConstraints checks if the values respects the defined constraints
func AssertNetworkAdapterV1100NetworkAdapterConstraints(obj NetworkAdapterV1100NetworkAdapter) error {
	if err := AssertNetworkAdapterV1100ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Assembly); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Certificates); err != nil {
		return err
	}
	for _, el := range obj.Controllers {
		if err := AssertNetworkAdapterV1100ControllersConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.EnvironmentMetrics); err != nil {
		return err
	}
	for _, el := range obj.Identifiers {
		if err := AssertResourceIdentifierConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	for _, el := range obj.Measurements {
		if err := AssertSoftwareInventoryMeasurementBlockConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.Metrics); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.NetworkDeviceFunctions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.NetworkPorts); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Ports); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Processors); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
