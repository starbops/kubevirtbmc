// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PowerV172InputType string

// List of PowerV172InputType
const (
	POWERV172INPUTTYPE_AC PowerV172InputType = "AC"
	POWERV172INPUTTYPE_DC PowerV172InputType = "DC"
)

// AllowedPowerV172InputTypeEnumValues is all the allowed values of PowerV172InputType enum
var AllowedPowerV172InputTypeEnumValues = []PowerV172InputType{
	"AC",
	"DC",
}

// validPowerV172InputTypeEnumValue provides a map of PowerV172InputTypes for fast verification of use input
var validPowerV172InputTypeEnumValues = map[PowerV172InputType]struct{}{
	"AC": {},
	"DC": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerV172InputType) IsValid() bool {
	_, ok := validPowerV172InputTypeEnumValues[v]
	return ok
}

// NewPowerV172InputTypeFromValue returns a pointer to a valid PowerV172InputType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerV172InputTypeFromValue(v string) (PowerV172InputType, error) {
	ev := PowerV172InputType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PowerV172InputType: valid values are %v", v, AllowedPowerV172InputTypeEnumValues)
}

// AssertPowerV172InputTypeRequired checks if the required fields are not zero-ed
func AssertPowerV172InputTypeRequired(obj PowerV172InputType) error {
	return nil
}

// AssertPowerV172InputTypeConstraints checks if the values respects the defined constraints
func AssertPowerV172InputTypeConstraints(obj PowerV172InputType) error {
	return nil
}
