// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2024.3
 */

package server

import (
	"fmt"
)

type OperatingSystemV102VirtualMachineEngineTypes string

// List of OperatingSystemV102VirtualMachineEngineTypes
const (
	OPERATINGSYSTEMV102VIRTUALMACHINEENGINETYPES_V_MWARE_ESX OperatingSystemV102VirtualMachineEngineTypes = "VMwareESX"
	OPERATINGSYSTEMV102VIRTUALMACHINEENGINETYPES_HYPER_V     OperatingSystemV102VirtualMachineEngineTypes = "HyperV"
	OPERATINGSYSTEMV102VIRTUALMACHINEENGINETYPES_XEN         OperatingSystemV102VirtualMachineEngineTypes = "Xen"
	OPERATINGSYSTEMV102VIRTUALMACHINEENGINETYPES_KVM         OperatingSystemV102VirtualMachineEngineTypes = "KVM"
	OPERATINGSYSTEMV102VIRTUALMACHINEENGINETYPES_QEMU        OperatingSystemV102VirtualMachineEngineTypes = "QEMU"
	OPERATINGSYSTEMV102VIRTUALMACHINEENGINETYPES_VIRTUAL_BOX OperatingSystemV102VirtualMachineEngineTypes = "VirtualBox"
	OPERATINGSYSTEMV102VIRTUALMACHINEENGINETYPES_POWER_VM    OperatingSystemV102VirtualMachineEngineTypes = "PowerVM"
)

// AllowedOperatingSystemV102VirtualMachineEngineTypesEnumValues is all the allowed values of OperatingSystemV102VirtualMachineEngineTypes enum
var AllowedOperatingSystemV102VirtualMachineEngineTypesEnumValues = []OperatingSystemV102VirtualMachineEngineTypes{
	"VMwareESX",
	"HyperV",
	"Xen",
	"KVM",
	"QEMU",
	"VirtualBox",
	"PowerVM",
}

// validOperatingSystemV102VirtualMachineEngineTypesEnumValue provides a map of OperatingSystemV102VirtualMachineEngineTypess for fast verification of use input
var validOperatingSystemV102VirtualMachineEngineTypesEnumValues = map[OperatingSystemV102VirtualMachineEngineTypes]struct{}{
	"VMwareESX":  {},
	"HyperV":     {},
	"Xen":        {},
	"KVM":        {},
	"QEMU":       {},
	"VirtualBox": {},
	"PowerVM":    {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OperatingSystemV102VirtualMachineEngineTypes) IsValid() bool {
	_, ok := validOperatingSystemV102VirtualMachineEngineTypesEnumValues[v]
	return ok
}

// NewOperatingSystemV102VirtualMachineEngineTypesFromValue returns a pointer to a valid OperatingSystemV102VirtualMachineEngineTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOperatingSystemV102VirtualMachineEngineTypesFromValue(v string) (OperatingSystemV102VirtualMachineEngineTypes, error) {
	ev := OperatingSystemV102VirtualMachineEngineTypes(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for OperatingSystemV102VirtualMachineEngineTypes: valid values are %v", v, AllowedOperatingSystemV102VirtualMachineEngineTypesEnumValues)
}

// AssertOperatingSystemV102VirtualMachineEngineTypesRequired checks if the required fields are not zero-ed
func AssertOperatingSystemV102VirtualMachineEngineTypesRequired(obj OperatingSystemV102VirtualMachineEngineTypes) error {
	return nil
}

// AssertOperatingSystemV102VirtualMachineEngineTypesConstraints checks if the values respects the defined constraints
func AssertOperatingSystemV102VirtualMachineEngineTypesConstraints(obj OperatingSystemV102VirtualMachineEngineTypes) error {
	return nil
}
