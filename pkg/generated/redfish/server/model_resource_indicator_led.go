// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ResourceIndicatorLed string

// List of ResourceIndicatorLed
const (
	RESOURCEINDICATORLED_LIT      ResourceIndicatorLed = "Lit"
	RESOURCEINDICATORLED_BLINKING ResourceIndicatorLed = "Blinking"
	RESOURCEINDICATORLED_OFF      ResourceIndicatorLed = "Off"
)

// AllowedResourceIndicatorLedEnumValues is all the allowed values of ResourceIndicatorLed enum
var AllowedResourceIndicatorLedEnumValues = []ResourceIndicatorLed{
	"Lit",
	"Blinking",
	"Off",
}

// validResourceIndicatorLedEnumValue provides a map of ResourceIndicatorLeds for fast verification of use input
var validResourceIndicatorLedEnumValues = map[ResourceIndicatorLed]struct{}{
	"Lit":      {},
	"Blinking": {},
	"Off":      {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceIndicatorLed) IsValid() bool {
	_, ok := validResourceIndicatorLedEnumValues[v]
	return ok
}

// NewResourceIndicatorLedFromValue returns a pointer to a valid ResourceIndicatorLed
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceIndicatorLedFromValue(v string) (ResourceIndicatorLed, error) {
	ev := ResourceIndicatorLed(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ResourceIndicatorLed: valid values are %v", v, AllowedResourceIndicatorLedEnumValues)
}

// AssertResourceIndicatorLedRequired checks if the required fields are not zero-ed
func AssertResourceIndicatorLedRequired(obj ResourceIndicatorLed) error {
	return nil
}

// AssertResourceIndicatorLedConstraints checks if the values respects the defined constraints
func AssertResourceIndicatorLedConstraints(obj ResourceIndicatorLed) error {
	return nil
}
