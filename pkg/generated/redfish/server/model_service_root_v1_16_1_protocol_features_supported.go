// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// ServiceRootV1161ProtocolFeaturesSupported - The information about protocol features that the service supports.
type ServiceRootV1161ProtocolFeaturesSupported struct {
	DeepOperations ServiceRootV1161DeepOperations `json:"DeepOperations,omitempty"`

	// An indication of whether the service supports the `excerpt` query parameter.
	ExcerptQuery bool `json:"ExcerptQuery,omitempty"`

	ExpandQuery ServiceRootV1161Expand `json:"ExpandQuery,omitempty"`

	// An indication of whether the service supports the `$filter` query parameter.
	FilterQuery bool `json:"FilterQuery,omitempty"`

	// An indication of whether the service supports multiple outstanding HTTP requests.
	MultipleHTTPRequests bool `json:"MultipleHTTPRequests,omitempty"`

	// An indication of whether the service supports the `only` query parameter.
	OnlyMemberQuery bool `json:"OnlyMemberQuery,omitempty"`

	// An indication of whether the service supports the `$select` query parameter.
	SelectQuery bool `json:"SelectQuery,omitempty"`
}

// AssertServiceRootV1161ProtocolFeaturesSupportedRequired checks if the required fields are not zero-ed
func AssertServiceRootV1161ProtocolFeaturesSupportedRequired(obj ServiceRootV1161ProtocolFeaturesSupported) error {
	if err := AssertServiceRootV1161DeepOperationsRequired(obj.DeepOperations); err != nil {
		return err
	}
	if err := AssertServiceRootV1161ExpandRequired(obj.ExpandQuery); err != nil {
		return err
	}
	return nil
}

// AssertServiceRootV1161ProtocolFeaturesSupportedConstraints checks if the values respects the defined constraints
func AssertServiceRootV1161ProtocolFeaturesSupportedConstraints(obj ServiceRootV1161ProtocolFeaturesSupported) error {
	if err := AssertServiceRootV1161DeepOperationsConstraints(obj.DeepOperations); err != nil {
		return err
	}
	if err := AssertServiceRootV1161ExpandConstraints(obj.ExpandQuery); err != nil {
		return err
	}
	return nil
}
