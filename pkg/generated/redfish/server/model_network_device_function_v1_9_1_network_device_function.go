// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// NetworkDeviceFunctionV191NetworkDeviceFunction - The NetworkDeviceFunction schema represents a logical interface that a network adapter exposes.
type NetworkDeviceFunctionV191NetworkDeviceFunction struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions NetworkDeviceFunctionV191Actions `json:"Actions,omitempty"`

	AllowDeny OdataV4IdRef `json:"AllowDeny,omitempty"`

	// An array of physical ports to which this network device function can be assigned.
	AssignablePhysicalNetworkPorts []OdataV4IdRef `json:"AssignablePhysicalNetworkPorts,omitempty"`

	// The number of items in a collection.
	AssignablePhysicalNetworkPortsodataCount int64 `json:"AssignablePhysicalNetworkPorts@odata.count,omitempty"`

	// An array of physical ports to which this network device function can be assigned.
	// Deprecated
	AssignablePhysicalPorts []OdataV4IdRef `json:"AssignablePhysicalPorts,omitempty"`

	// The number of items in a collection.
	AssignablePhysicalPortsodataCount int64 `json:"AssignablePhysicalPorts@odata.count,omitempty"`

	BootMode NetworkDeviceFunctionV191BootMode `json:"BootMode,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// An indication of whether the network device function is enabled.
	DeviceEnabled *bool `json:"DeviceEnabled,omitempty"`

	Ethernet NetworkDeviceFunctionV191Ethernet `json:"Ethernet,omitempty"`

	FibreChannel NetworkDeviceFunctionV191FibreChannel `json:"FibreChannel,omitempty"`

	HTTPBoot NetworkDeviceFunctionV191HttpBoot `json:"HTTPBoot,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	InfiniBand NetworkDeviceFunctionV191InfiniBand `json:"InfiniBand,omitempty"`

	// The byte and packet limits for this network device function.
	Limits []NetworkDeviceFunctionV191Limit `json:"Limits,omitempty"`

	Links NetworkDeviceFunctionV191Links `json:"Links,omitempty"`

	// The number of virtual functions that are available for this network device function.
	MaxVirtualFunctions *int64 `json:"MaxVirtualFunctions,omitempty"`

	Metrics OdataV4IdRef `json:"Metrics,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// An array of capabilities for this network device function.
	NetDevFuncCapabilities []NetworkDeviceFunctionV191NetworkDeviceTechnology `json:"NetDevFuncCapabilities,omitempty"`

	NetDevFuncType NetworkDeviceFunctionV191NetworkDeviceTechnology `json:"NetDevFuncType,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PhysicalNetworkPortAssignment OdataV4IdRef `json:"PhysicalNetworkPortAssignment,omitempty"`

	PhysicalPortAssignment OdataV4IdRef `json:"PhysicalPortAssignment,omitempty"`

	// Indicates if Source Address Validation Improvement (SAVI) is enabled for this network device function.
	SAVIEnabled *bool `json:"SAVIEnabled,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// An indication of whether single root input/output virtualization (SR-IOV) virtual functions are enabled for this network device function.
	VirtualFunctionsEnabled *bool `json:"VirtualFunctionsEnabled,omitempty"`

	ISCSIBoot NetworkDeviceFunctionV191IScsiBoot `json:"iSCSIBoot,omitempty"`
}

// AssertNetworkDeviceFunctionV191NetworkDeviceFunctionRequired checks if the required fields are not zero-ed
func AssertNetworkDeviceFunctionV191NetworkDeviceFunctionRequired(obj NetworkDeviceFunctionV191NetworkDeviceFunction) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertNetworkDeviceFunctionV191ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.AllowDeny); err != nil {
		return err
	}
	for _, el := range obj.AssignablePhysicalNetworkPorts {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AssignablePhysicalPorts {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertNetworkDeviceFunctionV191EthernetRequired(obj.Ethernet); err != nil {
		return err
	}
	if err := AssertNetworkDeviceFunctionV191FibreChannelRequired(obj.FibreChannel); err != nil {
		return err
	}
	if err := AssertNetworkDeviceFunctionV191HttpBootRequired(obj.HTTPBoot); err != nil {
		return err
	}
	if err := AssertNetworkDeviceFunctionV191InfiniBandRequired(obj.InfiniBand); err != nil {
		return err
	}
	for _, el := range obj.Limits {
		if err := AssertNetworkDeviceFunctionV191LimitRequired(el); err != nil {
			return err
		}
	}
	if err := AssertNetworkDeviceFunctionV191LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Metrics); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.PhysicalNetworkPortAssignment); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.PhysicalPortAssignment); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	if err := AssertNetworkDeviceFunctionV191IScsiBootRequired(obj.ISCSIBoot); err != nil {
		return err
	}
	return nil
}

// AssertNetworkDeviceFunctionV191NetworkDeviceFunctionConstraints checks if the values respects the defined constraints
func AssertNetworkDeviceFunctionV191NetworkDeviceFunctionConstraints(obj NetworkDeviceFunctionV191NetworkDeviceFunction) error {
	if err := AssertNetworkDeviceFunctionV191ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.AllowDeny); err != nil {
		return err
	}
	for _, el := range obj.AssignablePhysicalNetworkPorts {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AssignablePhysicalPorts {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertNetworkDeviceFunctionV191EthernetConstraints(obj.Ethernet); err != nil {
		return err
	}
	if err := AssertNetworkDeviceFunctionV191FibreChannelConstraints(obj.FibreChannel); err != nil {
		return err
	}
	if err := AssertNetworkDeviceFunctionV191HttpBootConstraints(obj.HTTPBoot); err != nil {
		return err
	}
	if err := AssertNetworkDeviceFunctionV191InfiniBandConstraints(obj.InfiniBand); err != nil {
		return err
	}
	for _, el := range obj.Limits {
		if err := AssertNetworkDeviceFunctionV191LimitConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertNetworkDeviceFunctionV191LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Metrics); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.PhysicalNetworkPortAssignment); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.PhysicalPortAssignment); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if err := AssertNetworkDeviceFunctionV191IScsiBootConstraints(obj.ISCSIBoot); err != nil {
		return err
	}
	return nil
}
