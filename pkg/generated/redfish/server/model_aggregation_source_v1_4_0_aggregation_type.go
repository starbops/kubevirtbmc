// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type AggregationSourceV140AggregationType string

// List of AggregationSourceV140AggregationType
const (
	AGGREGATIONSOURCEV140AGGREGATIONTYPE_NOTIFICATIONS_ONLY AggregationSourceV140AggregationType = "NotificationsOnly"
	AGGREGATIONSOURCEV140AGGREGATIONTYPE_FULL               AggregationSourceV140AggregationType = "Full"
)

// AllowedAggregationSourceV140AggregationTypeEnumValues is all the allowed values of AggregationSourceV140AggregationType enum
var AllowedAggregationSourceV140AggregationTypeEnumValues = []AggregationSourceV140AggregationType{
	"NotificationsOnly",
	"Full",
}

// validAggregationSourceV140AggregationTypeEnumValue provides a map of AggregationSourceV140AggregationTypes for fast verification of use input
var validAggregationSourceV140AggregationTypeEnumValues = map[AggregationSourceV140AggregationType]struct{}{
	"NotificationsOnly": {},
	"Full":              {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AggregationSourceV140AggregationType) IsValid() bool {
	_, ok := validAggregationSourceV140AggregationTypeEnumValues[v]
	return ok
}

// NewAggregationSourceV140AggregationTypeFromValue returns a pointer to a valid AggregationSourceV140AggregationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggregationSourceV140AggregationTypeFromValue(v string) (AggregationSourceV140AggregationType, error) {
	ev := AggregationSourceV140AggregationType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for AggregationSourceV140AggregationType: valid values are %v", v, AllowedAggregationSourceV140AggregationTypeEnumValues)
}

// AssertAggregationSourceV140AggregationTypeRequired checks if the required fields are not zero-ed
func AssertAggregationSourceV140AggregationTypeRequired(obj AggregationSourceV140AggregationType) error {
	return nil
}

// AssertAggregationSourceV140AggregationTypeConstraints checks if the values respects the defined constraints
func AssertAggregationSourceV140AggregationTypeConstraints(obj AggregationSourceV140AggregationType) error {
	return nil
}
