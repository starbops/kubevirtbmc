// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PcieFunctionV151FunctionType string

// List of PcieFunctionV151FunctionType
const (
	PCIEFUNCTIONV151FUNCTIONTYPE_PHYSICAL PcieFunctionV151FunctionType = "Physical"
	PCIEFUNCTIONV151FUNCTIONTYPE_VIRTUAL  PcieFunctionV151FunctionType = "Virtual"
)

// AllowedPcieFunctionV151FunctionTypeEnumValues is all the allowed values of PcieFunctionV151FunctionType enum
var AllowedPcieFunctionV151FunctionTypeEnumValues = []PcieFunctionV151FunctionType{
	"Physical",
	"Virtual",
}

// validPcieFunctionV151FunctionTypeEnumValue provides a map of PcieFunctionV151FunctionTypes for fast verification of use input
var validPcieFunctionV151FunctionTypeEnumValues = map[PcieFunctionV151FunctionType]struct{}{
	"Physical": {},
	"Virtual":  {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PcieFunctionV151FunctionType) IsValid() bool {
	_, ok := validPcieFunctionV151FunctionTypeEnumValues[v]
	return ok
}

// NewPcieFunctionV151FunctionTypeFromValue returns a pointer to a valid PcieFunctionV151FunctionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPcieFunctionV151FunctionTypeFromValue(v string) (PcieFunctionV151FunctionType, error) {
	ev := PcieFunctionV151FunctionType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PcieFunctionV151FunctionType: valid values are %v", v, AllowedPcieFunctionV151FunctionTypeEnumValues)
}

// AssertPcieFunctionV151FunctionTypeRequired checks if the required fields are not zero-ed
func AssertPcieFunctionV151FunctionTypeRequired(obj PcieFunctionV151FunctionType) error {
	return nil
}

// AssertPcieFunctionV151FunctionTypeConstraints checks if the values respects the defined constraints
func AssertPcieFunctionV151FunctionTypeConstraints(obj PcieFunctionV151FunctionType) error {
	return nil
}
