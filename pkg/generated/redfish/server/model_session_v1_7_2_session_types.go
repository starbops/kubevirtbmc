// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2024.3
 */

package server

import (
	"fmt"
)

type SessionV172SessionTypes string

// List of SessionV172SessionTypes
const (
	SESSIONV172SESSIONTYPES_HOST_CONSOLE        SessionV172SessionTypes = "HostConsole"
	SESSIONV172SESSIONTYPES_MANAGER_CONSOLE     SessionV172SessionTypes = "ManagerConsole"
	SESSIONV172SESSIONTYPES_IPMI                SessionV172SessionTypes = "IPMI"
	SESSIONV172SESSIONTYPES_KVMIP               SessionV172SessionTypes = "KVMIP"
	SESSIONV172SESSIONTYPES_OEM                 SessionV172SessionTypes = "OEM"
	SESSIONV172SESSIONTYPES_REDFISH             SessionV172SessionTypes = "Redfish"
	SESSIONV172SESSIONTYPES_VIRTUAL_MEDIA       SessionV172SessionTypes = "VirtualMedia"
	SESSIONV172SESSIONTYPES_WEB_UI              SessionV172SessionTypes = "WebUI"
	SESSIONV172SESSIONTYPES_OUTBOUND_CONNECTION SessionV172SessionTypes = "OutboundConnection"
)

// AllowedSessionV172SessionTypesEnumValues is all the allowed values of SessionV172SessionTypes enum
var AllowedSessionV172SessionTypesEnumValues = []SessionV172SessionTypes{
	"HostConsole",
	"ManagerConsole",
	"IPMI",
	"KVMIP",
	"OEM",
	"Redfish",
	"VirtualMedia",
	"WebUI",
	"OutboundConnection",
}

// validSessionV172SessionTypesEnumValue provides a map of SessionV172SessionTypess for fast verification of use input
var validSessionV172SessionTypesEnumValues = map[SessionV172SessionTypes]struct{}{
	"HostConsole":        {},
	"ManagerConsole":     {},
	"IPMI":               {},
	"KVMIP":              {},
	"OEM":                {},
	"Redfish":            {},
	"VirtualMedia":       {},
	"WebUI":              {},
	"OutboundConnection": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SessionV172SessionTypes) IsValid() bool {
	_, ok := validSessionV172SessionTypesEnumValues[v]
	return ok
}

// NewSessionV172SessionTypesFromValue returns a pointer to a valid SessionV172SessionTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSessionV172SessionTypesFromValue(v string) (SessionV172SessionTypes, error) {
	ev := SessionV172SessionTypes(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for SessionV172SessionTypes: valid values are %v", v, AllowedSessionV172SessionTypesEnumValues)
}

// AssertSessionV172SessionTypesRequired checks if the required fields are not zero-ed
func AssertSessionV172SessionTypesRequired(obj SessionV172SessionTypes) error {
	return nil
}

// AssertSessionV172SessionTypesConstraints checks if the values respects the defined constraints
func AssertSessionV172SessionTypesConstraints(obj SessionV172SessionTypes) error {
	return nil
}
