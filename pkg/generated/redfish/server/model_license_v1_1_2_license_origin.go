// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type LicenseV112LicenseOrigin string

// List of LicenseV112LicenseOrigin
const (
	LICENSEV112LICENSEORIGIN_BUILT_IN  LicenseV112LicenseOrigin = "BuiltIn"
	LICENSEV112LICENSEORIGIN_INSTALLED LicenseV112LicenseOrigin = "Installed"
)

// AllowedLicenseV112LicenseOriginEnumValues is all the allowed values of LicenseV112LicenseOrigin enum
var AllowedLicenseV112LicenseOriginEnumValues = []LicenseV112LicenseOrigin{
	"BuiltIn",
	"Installed",
}

// validLicenseV112LicenseOriginEnumValue provides a map of LicenseV112LicenseOrigins for fast verification of use input
var validLicenseV112LicenseOriginEnumValues = map[LicenseV112LicenseOrigin]struct{}{
	"BuiltIn":   {},
	"Installed": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LicenseV112LicenseOrigin) IsValid() bool {
	_, ok := validLicenseV112LicenseOriginEnumValues[v]
	return ok
}

// NewLicenseV112LicenseOriginFromValue returns a pointer to a valid LicenseV112LicenseOrigin
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLicenseV112LicenseOriginFromValue(v string) (LicenseV112LicenseOrigin, error) {
	ev := LicenseV112LicenseOrigin(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for LicenseV112LicenseOrigin: valid values are %v", v, AllowedLicenseV112LicenseOriginEnumValues)
}

// AssertLicenseV112LicenseOriginRequired checks if the required fields are not zero-ed
func AssertLicenseV112LicenseOriginRequired(obj LicenseV112LicenseOrigin) error {
	return nil
}

// AssertLicenseV112LicenseOriginConstraints checks if the values respects the defined constraints
func AssertLicenseV112LicenseOriginConstraints(obj LicenseV112LicenseOrigin) error {
	return nil
}
