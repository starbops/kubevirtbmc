// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// PcieSlotsV160PcieSlot - This type defines information for a PCIe slot.
type PcieSlotsV160PcieSlot struct {

	// An indication of whether this PCIe slot supports hotplug.
	HotPluggable *bool `json:"HotPluggable,omitempty"`

	// The number of PCIe lanes supported by this slot.
	Lanes *int64 `json:"Lanes,omitempty"`

	Links PcieSlotsV160PcieLinks `json:"Links,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PCIeType PcieDevicePcieTypes `json:"PCIeType,omitempty"`

	SlotType PcieSlotsV160SlotTypes `json:"SlotType,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertPcieSlotsV160PcieSlotRequired checks if the required fields are not zero-ed
func AssertPcieSlotsV160PcieSlotRequired(obj PcieSlotsV160PcieSlot) error {
	if err := AssertPcieSlotsV160PcieLinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertPcieSlotsV160PcieSlotConstraints checks if the values respects the defined constraints
func AssertPcieSlotsV160PcieSlotConstraints(obj PcieSlotsV160PcieSlot) error {
	if obj.Lanes != nil && *obj.Lanes > 32 {
		return &ParsingError{Param: "Lanes", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if err := AssertPcieSlotsV160PcieLinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
