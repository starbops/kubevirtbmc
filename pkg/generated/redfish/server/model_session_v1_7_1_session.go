// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"time"
)

// SessionV171Session - The Session resource describes a single connection (session) between a client and a Redfish service instance.
type SessionV171Session struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions SessionV171Actions `json:"Actions,omitempty"`

	// The IP address of the client that created the session.
	ClientOriginIPAddress *string `json:"ClientOriginIPAddress,omitempty"`

	// A client-supplied string that is stored with the session.
	Context *string `json:"Context,omitempty"`

	// The date and time when the session was created.
	CreatedTime *time.Time `json:"CreatedTime,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links SessionV171Links `json:"Links,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The active OEM-defined session type.
	OemSessionType *string `json:"OemSessionType,omitempty"`

	// The password for this session.  The value is `null` in responses.
	Password *string `json:"Password,omitempty"`

	// The Redfish roles that contain the privileges of this session.
	Roles []*string `json:"Roles,omitempty"`

	SessionType SessionV171SessionTypes `json:"SessionType,omitempty"`

	// The multi-factor authentication token for this session.  The value is `null` in responses.
	Token *string `json:"Token,omitempty"`

	// The username for the account for this session.
	UserName *string `json:"UserName,omitempty"`
}

// AssertSessionV171SessionRequired checks if the required fields are not zero-ed
func AssertSessionV171SessionRequired(obj SessionV171Session) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSessionV171ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertSessionV171LinksRequired(obj.Links); err != nil {
		return err
	}
	return nil
}

// AssertSessionV171SessionConstraints checks if the values respects the defined constraints
func AssertSessionV171SessionConstraints(obj SessionV171Session) error {
	if err := AssertSessionV171ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertSessionV171LinksConstraints(obj.Links); err != nil {
		return err
	}
	return nil
}
