// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"time"
)

// LogEntryV1170LogEntry - The `LogEntry` schema defines the record format for a log.  It is designed for Redfish event logs, OEM-specific log formats, and the IPMI System Event Log (SEL).  The `EntryType` field indicates the type of log and the resource includes several additional properties dependent on the `EntryType`.
type LogEntryV1170LogEntry struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions LogEntryV1170Actions `json:"Actions,omitempty"`

	// The size of the additional data for this log entry.
	AdditionalDataSizeBytes *int64 `json:"AdditionalDataSizeBytes,omitempty"`

	// The URI at which to access the additional data for this log entry, such as diagnostic data, image captures, or other files.
	AdditionalDataURI *string `json:"AdditionalDataURI,omitempty"`

	CPER LogEntryV1170Cper `json:"CPER,omitempty"`

	CXLEntryType LogEntryV1170CxlEntryType `json:"CXLEntryType,omitempty"`

	// The date and time when the log entry was created.
	Created time.Time `json:"Created,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// A Base64-encoded set of diagnostic data associated with this log entry.
	DiagnosticData *string `json:"DiagnosticData,omitempty"`

	DiagnosticDataType *LogEntryV1170LogDiagnosticDataTypes `json:"DiagnosticDataType,omitempty"`

	EntryCode *LogEntryV1170LogEntryCode `json:"EntryCode,omitempty"`

	EntryType LogEntryV1170LogEntryType `json:"EntryType"`

	// An identifier that correlates events with the same cause.
	EventGroupId *int64 `json:"EventGroupId,omitempty"`

	// The unique instance identifier for an event.
	EventId string `json:"EventId,omitempty"`

	// The date and time when the event occurred.
	EventTimestamp time.Time `json:"EventTimestamp,omitempty"`

	// Deprecated
	EventType EventEventType `json:"EventType,omitempty"`

	// The timestamp of the first overflow captured after this log entry.
	FirstOverflowTimestamp time.Time `json:"FirstOverflowTimestamp,omitempty"`

	// An identifier of the device that has generated the IPMI SEL Event Record.
	GeneratorId *string `json:"GeneratorId,omitempty" validate:"regexp=^0[xX](([a-fA-F]|[0-9]){2}){2}$"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The timestamp of the last overflow captured after this log entry.
	LastOverflowTimestamp time.Time `json:"LastOverflowTimestamp,omitempty"`

	Links LogEntryV1170Links `json:"Links,omitempty"`

	// The message of the log entry.  This property decodes from the entry type.  If the entry type is `Event`, this property contains a message.  If the entry type is `SEL`, this property contains an SEL-specific message.  If the entry type is `CXL`, this property contains a CXL event record.  Otherwise, this property contains an OEM-specific log entry.  In most cases, this property contains the actual log entry.
	Message *string `json:"Message,omitempty"`

	// An array of message arguments that are substituted for the arguments in the message when looked up in the message registry.
	MessageArgs []string `json:"MessageArgs,omitempty"`

	// The `MessageId`, event data, or OEM-specific information.  This property decodes from the entry type.  If the entry type is `Event`, this property contains a Redfish Specification-defined `MessageId`.  If the entry type is `SEL`, this property contains the Event Data.  Otherwise, this property contains OEM-specific information.
	MessageId string `json:"MessageId,omitempty"`

	// The date and time when the log entry was last modified.
	Modified time.Time `json:"Modified,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM-defined type of data available in the `DiagnosticData` property or retrieved from the URI specified by the `AdditionalDataURI` property.
	OEMDiagnosticDataType *string `json:"OEMDiagnosticDataType,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The OEM-specific entry code, if the `LogEntryCode` type is `OEM`.
	OemLogEntryCode *string `json:"OemLogEntryCode,omitempty"`

	// The OEM-specific format of the entry.  If the entry type is `Oem`, this property contains more information about the record format from the OEM.
	OemRecordFormat *string `json:"OemRecordFormat,omitempty"`

	// The OEM-specific sensor type if the sensor type is `OEM`.
	OemSensorType *string `json:"OemSensorType,omitempty"`

	// The source of the log entry.
	Originator string `json:"Originator,omitempty"`

	OriginatorType LogEntryV1170OriginatorTypes `json:"OriginatorType,omitempty"`

	// The count of overflow errors that occurred after this log entry.
	OverflowErrorCount int64 `json:"OverflowErrorCount,omitempty"`

	// Indicates whether the log entry is persistent across a cold reset of the device.
	Persistency bool `json:"Persistency,omitempty"`

	// Used to provide suggestions on how to resolve the situation that caused the log entry.
	Resolution string `json:"Resolution,omitempty"`

	// The list of recommended steps to resolve the cause of the log entry.
	ResolutionSteps []ResolutionStepResolutionStep `json:"ResolutionSteps,omitempty"`

	// Indicates if the cause of the log entry has been resolved or repaired.
	Resolved *bool `json:"Resolved,omitempty"`

	// The IPMI-defined sensor number.
	SensorNumber *int64 `json:"SensorNumber,omitempty"`

	SensorType *LogEntryV1170SensorType `json:"SensorType,omitempty"`

	// Indicates if the log entry has been sent to the service provider.
	ServiceProviderNotified *bool `json:"ServiceProviderNotified,omitempty"`

	Severity *LogEntryV1170EventSeverity `json:"Severity,omitempty"`

	// Indicates this log entry is equivalent to a more specific log entry within the same `EventGroupId`.
	SpecificEventExistsInGroup bool `json:"SpecificEventExistsInGroup,omitempty"`

	// The source of authentication for the username property associated with the log entry.
	UserAuthenticationSource *string `json:"UserAuthenticationSource,omitempty"`

	// The username of the account associated with the log entry.
	Username *string `json:"Username,omitempty"`
}

// AssertLogEntryV1170LogEntryRequired checks if the required fields are not zero-ed
func AssertLogEntryV1170LogEntryRequired(obj LogEntryV1170LogEntry) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"EntryType":   obj.EntryType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertLogEntryV1170ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertLogEntryV1170CperRequired(obj.CPER); err != nil {
		return err
	}
	if err := AssertLogEntryV1170LinksRequired(obj.Links); err != nil {
		return err
	}
	for _, el := range obj.ResolutionSteps {
		if err := AssertResolutionStepResolutionStepRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertLogEntryV1170LogEntryConstraints checks if the values respects the defined constraints
func AssertLogEntryV1170LogEntryConstraints(obj LogEntryV1170LogEntry) error {
	if err := AssertLogEntryV1170ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertLogEntryV1170CperConstraints(obj.CPER); err != nil {
		return err
	}
	if err := AssertLogEntryV1170LinksConstraints(obj.Links); err != nil {
		return err
	}
	for _, el := range obj.ResolutionSteps {
		if err := AssertResolutionStepResolutionStepConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
