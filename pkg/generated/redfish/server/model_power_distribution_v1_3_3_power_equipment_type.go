// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PowerDistributionV133PowerEquipmentType string

// List of PowerDistributionV133PowerEquipmentType
const (
	POWERDISTRIBUTIONV133POWEREQUIPMENTTYPE_RACK_PDU                  PowerDistributionV133PowerEquipmentType = "RackPDU"
	POWERDISTRIBUTIONV133POWEREQUIPMENTTYPE_FLOOR_PDU                 PowerDistributionV133PowerEquipmentType = "FloorPDU"
	POWERDISTRIBUTIONV133POWEREQUIPMENTTYPE_MANUAL_TRANSFER_SWITCH    PowerDistributionV133PowerEquipmentType = "ManualTransferSwitch"
	POWERDISTRIBUTIONV133POWEREQUIPMENTTYPE_AUTOMATIC_TRANSFER_SWITCH PowerDistributionV133PowerEquipmentType = "AutomaticTransferSwitch"
	POWERDISTRIBUTIONV133POWEREQUIPMENTTYPE_SWITCHGEAR                PowerDistributionV133PowerEquipmentType = "Switchgear"
	POWERDISTRIBUTIONV133POWEREQUIPMENTTYPE_POWER_SHELF               PowerDistributionV133PowerEquipmentType = "PowerShelf"
	POWERDISTRIBUTIONV133POWEREQUIPMENTTYPE_BUS                       PowerDistributionV133PowerEquipmentType = "Bus"
	POWERDISTRIBUTIONV133POWEREQUIPMENTTYPE_BATTERY_SHELF             PowerDistributionV133PowerEquipmentType = "BatteryShelf"
)

// AllowedPowerDistributionV133PowerEquipmentTypeEnumValues is all the allowed values of PowerDistributionV133PowerEquipmentType enum
var AllowedPowerDistributionV133PowerEquipmentTypeEnumValues = []PowerDistributionV133PowerEquipmentType{
	"RackPDU",
	"FloorPDU",
	"ManualTransferSwitch",
	"AutomaticTransferSwitch",
	"Switchgear",
	"PowerShelf",
	"Bus",
	"BatteryShelf",
}

// validPowerDistributionV133PowerEquipmentTypeEnumValue provides a map of PowerDistributionV133PowerEquipmentTypes for fast verification of use input
var validPowerDistributionV133PowerEquipmentTypeEnumValues = map[PowerDistributionV133PowerEquipmentType]struct{}{
	"RackPDU":                 {},
	"FloorPDU":                {},
	"ManualTransferSwitch":    {},
	"AutomaticTransferSwitch": {},
	"Switchgear":              {},
	"PowerShelf":              {},
	"Bus":                     {},
	"BatteryShelf":            {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerDistributionV133PowerEquipmentType) IsValid() bool {
	_, ok := validPowerDistributionV133PowerEquipmentTypeEnumValues[v]
	return ok
}

// NewPowerDistributionV133PowerEquipmentTypeFromValue returns a pointer to a valid PowerDistributionV133PowerEquipmentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerDistributionV133PowerEquipmentTypeFromValue(v string) (PowerDistributionV133PowerEquipmentType, error) {
	ev := PowerDistributionV133PowerEquipmentType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PowerDistributionV133PowerEquipmentType: valid values are %v", v, AllowedPowerDistributionV133PowerEquipmentTypeEnumValues)
}

// AssertPowerDistributionV133PowerEquipmentTypeRequired checks if the required fields are not zero-ed
func AssertPowerDistributionV133PowerEquipmentTypeRequired(obj PowerDistributionV133PowerEquipmentType) error {
	return nil
}

// AssertPowerDistributionV133PowerEquipmentTypeConstraints checks if the values respects the defined constraints
func AssertPowerDistributionV133PowerEquipmentTypeConstraints(obj PowerDistributionV133PowerEquipmentType) error {
	return nil
}
