// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// VirtualMediaV163VirtualMedia - The VirtualMedia schema contains properties related to the monitor and control of an instance of virtual media, such as a remote CD, DVD, or USB device.  A manager for a system or device provides virtual media functionality.
type VirtualMediaV163VirtualMedia struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions VirtualMediaV163Actions `json:"Actions,omitempty"`

	Certificates OdataV4IdRef `json:"Certificates,omitempty"`

	ClientCertificates OdataV4IdRef `json:"ClientCertificates,omitempty"`

	ConnectedVia VirtualMediaV163ConnectedVia `json:"ConnectedVia,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	EjectPolicy VirtualMediaV163EjectPolicy `json:"EjectPolicy,omitempty"`

	// Timeout value before the virtual media is automatically ejected.
	EjectTimeout *string `json:"EjectTimeout,omitempty" validate:"regexp=^P(\\\\d+D)?(T(\\\\d+H)?(\\\\d+M)?(\\\\d+(.\\\\d+)?S)?)?$"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The URI of the location of the selected image.
	Image *string `json:"Image,omitempty"`

	// The current image name.
	ImageName *string `json:"ImageName,omitempty"`

	// An indication of whether virtual media is inserted into the virtual device.
	Inserted *bool `json:"Inserted,omitempty"`

	// The media types supported as virtual media.
	MediaTypes []VirtualMediaV163MediaType `json:"MediaTypes,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The password to access the Image parameter-specified URI.  This property is`null` in responses.
	Password *string `json:"Password,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	TransferMethod VirtualMediaV163TransferMethod `json:"TransferMethod,omitempty"`

	TransferProtocolType VirtualMediaV163TransferProtocolType `json:"TransferProtocolType,omitempty"`

	// The user name to access the Image parameter-specified URI.
	UserName *string `json:"UserName,omitempty"`

	// An indication of whether the service will verify the certificate of the server referenced by the Image property prior to completing the remote media connection.
	VerifyCertificate *bool `json:"VerifyCertificate,omitempty"`

	// An indication of whether the media is write-protected.
	WriteProtected *bool `json:"WriteProtected,omitempty"`
}

// AssertVirtualMediaV163VirtualMediaRequired checks if the required fields are not zero-ed
func AssertVirtualMediaV163VirtualMediaRequired(obj VirtualMediaV163VirtualMedia) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertVirtualMediaV163ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Certificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.ClientCertificates); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertVirtualMediaV163VirtualMediaConstraints checks if the values respects the defined constraints
func AssertVirtualMediaV163VirtualMediaConstraints(obj VirtualMediaV163VirtualMedia) error {
	if err := AssertVirtualMediaV163ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Certificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.ClientCertificates); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
