// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// PcieDeviceV1130PcieDevice - The PCIeDevice schema describes the properties of a PCIe device that is attached to a system.  It also describes the location, such as a slot, socket, or bay, where a unit can be installed, by populating a resource instance with an absent state if a unit is not present.
type PcieDeviceV1130PcieDevice struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions PcieDeviceV1130Actions `json:"Actions,omitempty"`

	Assembly OdataV4IdRef `json:"Assembly,omitempty"`

	// The user-assigned asset tag for this PCIe device.
	AssetTag *string `json:"AssetTag,omitempty"`

	CXLDevice PcieDeviceV1130CxlDevice `json:"CXLDevice,omitempty"`

	CXLLogicalDevices OdataV4IdRef `json:"CXLLogicalDevices,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	DeviceType PcieDeviceV1130DeviceType `json:"DeviceType,omitempty"`

	EnvironmentMetrics OdataV4IdRef `json:"EnvironmentMetrics,omitempty"`

	// The version of firmware for this PCIe device.
	FirmwareVersion *string `json:"FirmwareVersion,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links PcieDeviceV1130Links `json:"Links,omitempty"`

	// An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive,omitempty"`

	// The manufacturer of this PCIe device.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// The model number for the PCIe device.
	Model *string `json:"Model,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PCIeFunctions OdataV4IdRef `json:"PCIeFunctions,omitempty"`

	PCIeInterface PcieDeviceV1130PcieInterface `json:"PCIeInterface,omitempty"`

	// The part number for this PCIe device.
	PartNumber *string `json:"PartNumber,omitempty"`

	// An indication of whether the PCIe device is prepared by the system for removal.
	ReadyToRemove *bool `json:"ReadyToRemove,omitempty"`

	// The SKU for this PCIe device.
	SKU *string `json:"SKU,omitempty"`

	// The serial number for this PCIe device.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	Slot PcieDeviceV1130Slot `json:"Slot,omitempty"`

	// The spare part number of the PCIe device.
	SparePartNumber *string `json:"SparePartNumber,omitempty"`

	// The staged firmware version for this PCIe device; this firmware is not yet active.
	StagedVersion string `json:"StagedVersion,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	UUID string `json:"UUID,omitempty" validate:"regexp=^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`
}

// AssertPcieDeviceV1130PcieDeviceRequired checks if the required fields are not zero-ed
func AssertPcieDeviceV1130PcieDeviceRequired(obj PcieDeviceV1130PcieDevice) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPcieDeviceV1130ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Assembly); err != nil {
		return err
	}
	if err := AssertPcieDeviceV1130CxlDeviceRequired(obj.CXLDevice); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.CXLLogicalDevices); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.EnvironmentMetrics); err != nil {
		return err
	}
	if err := AssertPcieDeviceV1130LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.PCIeFunctions); err != nil {
		return err
	}
	if err := AssertPcieDeviceV1130PcieInterfaceRequired(obj.PCIeInterface); err != nil {
		return err
	}
	if err := AssertPcieDeviceV1130SlotRequired(obj.Slot); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertPcieDeviceV1130PcieDeviceConstraints checks if the values respects the defined constraints
func AssertPcieDeviceV1130PcieDeviceConstraints(obj PcieDeviceV1130PcieDevice) error {
	if err := AssertPcieDeviceV1130ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Assembly); err != nil {
		return err
	}
	if err := AssertPcieDeviceV1130CxlDeviceConstraints(obj.CXLDevice); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.CXLLogicalDevices); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.EnvironmentMetrics); err != nil {
		return err
	}
	if err := AssertPcieDeviceV1130LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.PCIeFunctions); err != nil {
		return err
	}
	if err := AssertPcieDeviceV1130PcieInterfaceConstraints(obj.PCIeInterface); err != nil {
		return err
	}
	if err := AssertPcieDeviceV1130SlotConstraints(obj.Slot); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
