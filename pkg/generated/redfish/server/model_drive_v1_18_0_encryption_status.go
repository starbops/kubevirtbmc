// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type DriveV1180EncryptionStatus string

// List of DriveV1180EncryptionStatus
const (
	DRIVEV1180ENCRYPTIONSTATUS_UNECRYPTED  DriveV1180EncryptionStatus = "Unecrypted"
	DRIVEV1180ENCRYPTIONSTATUS_UNLOCKED    DriveV1180EncryptionStatus = "Unlocked"
	DRIVEV1180ENCRYPTIONSTATUS_LOCKED      DriveV1180EncryptionStatus = "Locked"
	DRIVEV1180ENCRYPTIONSTATUS_FOREIGN     DriveV1180EncryptionStatus = "Foreign"
	DRIVEV1180ENCRYPTIONSTATUS_UNENCRYPTED DriveV1180EncryptionStatus = "Unencrypted"
)

// AllowedDriveV1180EncryptionStatusEnumValues is all the allowed values of DriveV1180EncryptionStatus enum
var AllowedDriveV1180EncryptionStatusEnumValues = []DriveV1180EncryptionStatus{
	"Unecrypted",
	"Unlocked",
	"Locked",
	"Foreign",
	"Unencrypted",
}

// validDriveV1180EncryptionStatusEnumValue provides a map of DriveV1180EncryptionStatuss for fast verification of use input
var validDriveV1180EncryptionStatusEnumValues = map[DriveV1180EncryptionStatus]struct{}{
	"Unecrypted":  {},
	"Unlocked":    {},
	"Locked":      {},
	"Foreign":     {},
	"Unencrypted": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DriveV1180EncryptionStatus) IsValid() bool {
	_, ok := validDriveV1180EncryptionStatusEnumValues[v]
	return ok
}

// NewDriveV1180EncryptionStatusFromValue returns a pointer to a valid DriveV1180EncryptionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDriveV1180EncryptionStatusFromValue(v string) (DriveV1180EncryptionStatus, error) {
	ev := DriveV1180EncryptionStatus(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for DriveV1180EncryptionStatus: valid values are %v", v, AllowedDriveV1180EncryptionStatusEnumValues)
}

// AssertDriveV1180EncryptionStatusRequired checks if the required fields are not zero-ed
func AssertDriveV1180EncryptionStatusRequired(obj DriveV1180EncryptionStatus) error {
	return nil
}

// AssertDriveV1180EncryptionStatusConstraints checks if the values respects the defined constraints
func AssertDriveV1180EncryptionStatusConstraints(obj DriveV1180EncryptionStatus) error {
	return nil
}
