// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// CableV122Cable - The Cable schema contains properties that describe a cable connecting endpoints of a chassis, port, or any other cable-compatible endpoint.
type CableV122Cable struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions CableV122Actions `json:"Actions,omitempty"`

	Assembly OdataV4IdRef `json:"Assembly,omitempty"`

	// The user-assigned asset tag for this cable.
	AssetTag *string `json:"AssetTag,omitempty"`

	CableClass CableV122CableClass `json:"CableClass,omitempty"`

	CableStatus CableV122CableStatus `json:"CableStatus,omitempty"`

	// The type of this cable.
	CableType *string `json:"CableType,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The connector types this cable supports.
	DownstreamConnectorTypes []CableV122ConnectorType `json:"DownstreamConnectorTypes,omitempty"`

	// The identifier for the downstream resource.
	DownstreamName *string `json:"DownstreamName,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The length of the cable in meters.
	LengthMeters *float32 `json:"LengthMeters,omitempty"`

	Links CableV122Links `json:"Links,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// The manufacturer of this cable.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// The model number of the cable.
	Model *string `json:"Model,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The part number for this cable.
	PartNumber *string `json:"PartNumber,omitempty"`

	// The SKU for this cable.
	SKU *string `json:"SKU,omitempty"`

	// The serial number for this cable.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The connector types this cable supports.
	UpstreamConnectorTypes []CableV122ConnectorType `json:"UpstreamConnectorTypes,omitempty"`

	// The identifier for the downstream resource.
	UpstreamName *string `json:"UpstreamName,omitempty"`

	// The description of this cable.
	UserDescription *string `json:"UserDescription,omitempty"`

	// A user-assigned label.
	UserLabel string `json:"UserLabel,omitempty"`

	// The manufacturer of this cable.
	Vendor *string `json:"Vendor,omitempty"`
}

// AssertCableV122CableRequired checks if the required fields are not zero-ed
func AssertCableV122CableRequired(obj CableV122Cable) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCableV122ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Assembly); err != nil {
		return err
	}
	if err := AssertCableV122LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertCableV122CableConstraints checks if the values respects the defined constraints
func AssertCableV122CableConstraints(obj CableV122Cable) error {
	if err := AssertCableV122ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Assembly); err != nil {
		return err
	}
	if err := AssertCableV122LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
