// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"time"
)

// ManagerAccountV1120ManagerAccount - The ManagerAccount schema defines the user accounts that are owned by a manager.  Changes to a manager account might affect the current Redfish service connection if this manager is responsible for the Redfish service.
type ManagerAccountV1120ManagerAccount struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	// Indicates the date and time when this account expires.  If `null`, the account never expires.
	AccountExpiration *time.Time `json:"AccountExpiration,omitempty"`

	// The list of services in the manager that the account is allowed to access.
	AccountTypes []ManagerAccountAccountTypes `json:"AccountTypes"`

	Actions ManagerAccountV1120Actions `json:"Actions,omitempty"`

	Certificates OdataV4IdRef `json:"Certificates,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The email address associated with this account.
	EmailAddress *string `json:"EmailAddress,omitempty"`

	// An indication of whether an account is enabled.  An administrator can disable it without deleting the user information.  If `true`, the account is enabled and the user can log in.  If `false`, the account is disabled and, in the future, the user cannot log in.
	Enabled bool `json:"Enabled,omitempty"`

	// An indication of whether this account is a bootstrap account for the host interface.
	HostBootstrapAccount bool `json:"HostBootstrapAccount,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Keys OdataV4IdRef `json:"Keys,omitempty"`

	Links ManagerAccountV1120Links `json:"Links,omitempty"`

	// An indication of whether the account service automatically locked the account because the lockout threshold was exceeded.  To manually unlock the account before the lockout duration period, an administrator can change the property to `false` to clear the lockout condition.
	Locked bool `json:"Locked,omitempty"`

	MFABypass AccountServiceMfaBypass `json:"MFABypass,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM account types.
	OEMAccountTypes []*string `json:"OEMAccountTypes,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The address used to receive one-time passcode messages for multi-factor authentication.
	OneTimePasscodeDeliveryAddress *string `json:"OneTimePasscodeDeliveryAddress,omitempty"`

	// The password.  Use this property with a PATCH or PUT to write the password for the account.  This property is `null` in responses.
	Password *string `json:"Password,omitempty"`

	// An indication of whether the service requires that the password for this account be changed before further access to the account is allowed.
	PasswordChangeRequired *bool `json:"PasswordChangeRequired,omitempty"`

	// Indicates the date and time when this account password expires.  If `null`, the account password never expires.
	PasswordExpiration *time.Time `json:"PasswordExpiration,omitempty"`

	// The contact phone number associated with this account.
	PhoneNumber *string `json:"PhoneNumber,omitempty"`

	// The role for this account.
	RoleId string `json:"RoleId,omitempty"`

	SNMP ManagerAccountV1120SnmpUserInfo `json:"SNMP,omitempty"`

	// Indicates if the service needs to use the account types exactly as specified when the account is created or updated.
	StrictAccountTypes *bool `json:"StrictAccountTypes,omitempty"`

	// The user name for the account.
	UserName string `json:"UserName,omitempty"`
}

// AssertManagerAccountV1120ManagerAccountRequired checks if the required fields are not zero-ed
func AssertManagerAccountV1120ManagerAccountRequired(obj ManagerAccountV1120ManagerAccount) error {
	elements := map[string]interface{}{
		"@odata.id":    obj.OdataId,
		"@odata.type":  obj.OdataType,
		"AccountTypes": obj.AccountTypes,
		"Id":           obj.Id,
		"Name":         obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertManagerAccountV1120ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Certificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Keys); err != nil {
		return err
	}
	if err := AssertManagerAccountV1120LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertAccountServiceMfaBypassRequired(obj.MFABypass); err != nil {
		return err
	}
	if err := AssertManagerAccountV1120SnmpUserInfoRequired(obj.SNMP); err != nil {
		return err
	}
	return nil
}

// AssertManagerAccountV1120ManagerAccountConstraints checks if the values respects the defined constraints
func AssertManagerAccountV1120ManagerAccountConstraints(obj ManagerAccountV1120ManagerAccount) error {
	if err := AssertManagerAccountV1120ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Certificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Keys); err != nil {
		return err
	}
	if err := AssertManagerAccountV1120LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertAccountServiceMfaBypassConstraints(obj.MFABypass); err != nil {
		return err
	}
	if err := AssertManagerAccountV1120SnmpUserInfoConstraints(obj.SNMP); err != nil {
		return err
	}
	return nil
}
