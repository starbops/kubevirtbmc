// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// StorageReplicaInfoReplicaUpdateMode : Values of ReplicaUpdateMode describe whether the target elements will be updated synchronously or asynchronously.
type StorageReplicaInfoReplicaUpdateMode string

// List of StorageReplicaInfoReplicaUpdateMode
const (
	STORAGEREPLICAINFOREPLICAUPDATEMODE_ACTIVE       StorageReplicaInfoReplicaUpdateMode = "Active"
	STORAGEREPLICAINFOREPLICAUPDATEMODE_SYNCHRONOUS  StorageReplicaInfoReplicaUpdateMode = "Synchronous"
	STORAGEREPLICAINFOREPLICAUPDATEMODE_ASYNCHRONOUS StorageReplicaInfoReplicaUpdateMode = "Asynchronous"
	STORAGEREPLICAINFOREPLICAUPDATEMODE_ADAPTIVE     StorageReplicaInfoReplicaUpdateMode = "Adaptive"
)

// AllowedStorageReplicaInfoReplicaUpdateModeEnumValues is all the allowed values of StorageReplicaInfoReplicaUpdateMode enum
var AllowedStorageReplicaInfoReplicaUpdateModeEnumValues = []StorageReplicaInfoReplicaUpdateMode{
	"Active",
	"Synchronous",
	"Asynchronous",
	"Adaptive",
}

// validStorageReplicaInfoReplicaUpdateModeEnumValue provides a map of StorageReplicaInfoReplicaUpdateModes for fast verification of use input
var validStorageReplicaInfoReplicaUpdateModeEnumValues = map[StorageReplicaInfoReplicaUpdateMode]struct{}{
	"Active":       {},
	"Synchronous":  {},
	"Asynchronous": {},
	"Adaptive":     {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StorageReplicaInfoReplicaUpdateMode) IsValid() bool {
	_, ok := validStorageReplicaInfoReplicaUpdateModeEnumValues[v]
	return ok
}

// NewStorageReplicaInfoReplicaUpdateModeFromValue returns a pointer to a valid StorageReplicaInfoReplicaUpdateMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStorageReplicaInfoReplicaUpdateModeFromValue(v string) (StorageReplicaInfoReplicaUpdateMode, error) {
	ev := StorageReplicaInfoReplicaUpdateMode(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for StorageReplicaInfoReplicaUpdateMode: valid values are %v", v, AllowedStorageReplicaInfoReplicaUpdateModeEnumValues)
}

// AssertStorageReplicaInfoReplicaUpdateModeRequired checks if the required fields are not zero-ed
func AssertStorageReplicaInfoReplicaUpdateModeRequired(obj StorageReplicaInfoReplicaUpdateMode) error {
	return nil
}

// AssertStorageReplicaInfoReplicaUpdateModeConstraints checks if the values respects the defined constraints
func AssertStorageReplicaInfoReplicaUpdateModeConstraints(obj StorageReplicaInfoReplicaUpdateMode) error {
	return nil
}
