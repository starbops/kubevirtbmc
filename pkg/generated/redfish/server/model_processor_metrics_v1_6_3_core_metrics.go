// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// ProcessorMetricsV163CoreMetrics - The processor core metrics.
type ProcessorMetricsV163CoreMetrics struct {

	// The C-state residency of this core in the processor.
	CStateResidency []ProcessorMetricsV163CStateResidency `json:"CStateResidency,omitempty"`

	// The cache metrics of this core in the processor.
	CoreCache []ProcessorMetricsV163CacheMetrics `json:"CoreCache,omitempty"`

	// The processor core identifier.
	CoreId *string `json:"CoreId,omitempty"`

	// The number of correctable core errors.
	CorrectableCoreErrorCount *int64 `json:"CorrectableCoreErrorCount,omitempty"`

	// The number of correctable errors of all other components.
	CorrectableOtherErrorCount *int64 `json:"CorrectableOtherErrorCount,omitempty"`

	// The number of stalled cycles due to I/O operations.
	IOStallCount *float32 `json:"IOStallCount,omitempty"`

	// The number of instructions per clock cycle of this core.
	InstructionsPerCycle *float32 `json:"InstructionsPerCycle,omitempty"`

	// The number of stalled cycles due to memory operations.
	MemoryStallCount *float32 `json:"MemoryStallCount,omitempty"`

	// The number of uncorrectable core errors.
	UncorrectableCoreErrorCount *int64 `json:"UncorrectableCoreErrorCount,omitempty"`

	// The number of uncorrectable errors of all other components.
	UncorrectableOtherErrorCount *int64 `json:"UncorrectableOtherErrorCount,omitempty"`

	// The unhalted cycles count of this core.
	UnhaltedCycles *float32 `json:"UnhaltedCycles,omitempty"`
}

// AssertProcessorMetricsV163CoreMetricsRequired checks if the required fields are not zero-ed
func AssertProcessorMetricsV163CoreMetricsRequired(obj ProcessorMetricsV163CoreMetrics) error {
	for _, el := range obj.CStateResidency {
		if err := AssertProcessorMetricsV163CStateResidencyRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CoreCache {
		if err := AssertProcessorMetricsV163CacheMetricsRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertProcessorMetricsV163CoreMetricsConstraints checks if the values respects the defined constraints
func AssertProcessorMetricsV163CoreMetricsConstraints(obj ProcessorMetricsV163CoreMetrics) error {
	for _, el := range obj.CStateResidency {
		if err := AssertProcessorMetricsV163CStateResidencyConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CoreCache {
		if err := AssertProcessorMetricsV163CacheMetricsConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
