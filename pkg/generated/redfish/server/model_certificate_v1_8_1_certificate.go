// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"time"
)

// CertificateV181Certificate - The Certificate schema describes a certificate that proves the identity of a component, account, or service.
type CertificateV181Certificate struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions CertificateV181Actions `json:"Actions,omitempty"`

	// The string for the certificate.
	CertificateString *string `json:"CertificateString,omitempty"`

	CertificateType CertificateCertificateType `json:"CertificateType,omitempty"`

	// The types or purposes for this certificate.
	CertificateUsageTypes []CertificateV181CertificateUsageType `json:"CertificateUsageTypes,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The fingerprint of the certificate.
	Fingerprint string `json:"Fingerprint,omitempty" validate:"regexp=^([0-9A-Fa-f]{2}:){0,}([0-9A-Fa-f]{2})$"`

	// The hash algorithm for the fingerprint of the certificate.
	FingerprintHashAlgorithm string `json:"FingerprintHashAlgorithm,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Issuer CertificateV181Identifier `json:"Issuer,omitempty"`

	// The key usage extension, which defines the purpose of the public keys in this certificate.
	KeyUsage []CertificateKeyUsage `json:"KeyUsage,omitempty"`

	Links CertificateV181Links `json:"Links,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	SPDM CertificateV181Spdm `json:"SPDM,omitempty"`

	// The serial number of the certificate.
	SerialNumber string `json:"SerialNumber,omitempty" validate:"regexp=^([0-9A-Fa-f]{2}:){0,}([0-9A-Fa-f]{2})$"`

	// The algorithm used for creating the signature of the certificate.
	SignatureAlgorithm string `json:"SignatureAlgorithm,omitempty"`

	Subject CertificateV181Identifier `json:"Subject,omitempty"`

	// The UEFI signature owner for this certificate.
	UefiSignatureOwner *string `json:"UefiSignatureOwner,omitempty" validate:"regexp=^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`

	// The date when the certificate is no longer valid.
	ValidNotAfter time.Time `json:"ValidNotAfter,omitempty"`

	// The date when the certificate becomes valid.
	ValidNotBefore time.Time `json:"ValidNotBefore,omitempty"`
}

// AssertCertificateV181CertificateRequired checks if the required fields are not zero-ed
func AssertCertificateV181CertificateRequired(obj CertificateV181Certificate) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCertificateV181ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertCertificateV181IdentifierRequired(obj.Issuer); err != nil {
		return err
	}
	if err := AssertCertificateV181LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertCertificateV181SpdmRequired(obj.SPDM); err != nil {
		return err
	}
	if err := AssertCertificateV181IdentifierRequired(obj.Subject); err != nil {
		return err
	}
	return nil
}

// AssertCertificateV181CertificateConstraints checks if the values respects the defined constraints
func AssertCertificateV181CertificateConstraints(obj CertificateV181Certificate) error {
	if err := AssertCertificateV181ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertCertificateV181IdentifierConstraints(obj.Issuer); err != nil {
		return err
	}
	if err := AssertCertificateV181LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertCertificateV181SpdmConstraints(obj.SPDM); err != nil {
		return err
	}
	if err := AssertCertificateV181IdentifierConstraints(obj.Subject); err != nil {
		return err
	}
	return nil
}
