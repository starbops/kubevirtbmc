// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// BatteryMetricsV103BatteryMetrics - The BatteryMetrics schema contains definitions for the metrics of a battery unit.
type BatteryMetricsV103BatteryMetrics struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions BatteryMetricsV103Actions `json:"Actions,omitempty"`

	// The cell voltages (V) for this battery.
	CellVoltages []SensorSensorVoltageExcerpt `json:"CellVoltages,omitempty"`

	// The number of items in a collection.
	CellVoltagesodataCount int64 `json:"CellVoltages@odata.count,omitempty"`

	ChargePercent SensorSensorExcerpt `json:"ChargePercent,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The number of discharges this battery has sustained.
	DischargeCycles *float32 `json:"DischargeCycles,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	InputCurrentAmps SensorSensorCurrentExcerpt `json:"InputCurrentAmps,omitempty"`

	InputVoltage SensorSensorVoltageExcerpt `json:"InputVoltage,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The output currents (A) for this battery.
	OutputCurrentAmps []SensorSensorCurrentExcerpt `json:"OutputCurrentAmps,omitempty"`

	// The number of items in a collection.
	OutputCurrentAmpsodataCount int64 `json:"OutputCurrentAmps@odata.count,omitempty"`

	// The output voltages (V) for this battery.
	OutputVoltages []SensorSensorVoltageExcerpt `json:"OutputVoltages,omitempty"`

	// The number of items in a collection.
	OutputVoltagesodataCount int64 `json:"OutputVoltages@odata.count,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	StoredChargeAmpHours SensorSensorExcerpt `json:"StoredChargeAmpHours,omitempty"`

	StoredEnergyWattHours SensorSensorExcerpt `json:"StoredEnergyWattHours,omitempty"`

	TemperatureCelsius SensorSensorExcerpt `json:"TemperatureCelsius,omitempty"`
}

// AssertBatteryMetricsV103BatteryMetricsRequired checks if the required fields are not zero-ed
func AssertBatteryMetricsV103BatteryMetricsRequired(obj BatteryMetricsV103BatteryMetrics) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertBatteryMetricsV103ActionsRequired(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.CellVoltages {
		if err := AssertSensorSensorVoltageExcerptRequired(el); err != nil {
			return err
		}
	}
	if err := AssertSensorSensorExcerptRequired(obj.ChargePercent); err != nil {
		return err
	}
	if err := AssertSensorSensorCurrentExcerptRequired(obj.InputCurrentAmps); err != nil {
		return err
	}
	if err := AssertSensorSensorVoltageExcerptRequired(obj.InputVoltage); err != nil {
		return err
	}
	for _, el := range obj.OutputCurrentAmps {
		if err := AssertSensorSensorCurrentExcerptRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.OutputVoltages {
		if err := AssertSensorSensorVoltageExcerptRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.StoredChargeAmpHours); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.StoredEnergyWattHours); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.TemperatureCelsius); err != nil {
		return err
	}
	return nil
}

// AssertBatteryMetricsV103BatteryMetricsConstraints checks if the values respects the defined constraints
func AssertBatteryMetricsV103BatteryMetricsConstraints(obj BatteryMetricsV103BatteryMetrics) error {
	if err := AssertBatteryMetricsV103ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.CellVoltages {
		if err := AssertSensorSensorVoltageExcerptConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertSensorSensorExcerptConstraints(obj.ChargePercent); err != nil {
		return err
	}
	if obj.DischargeCycles != nil && *obj.DischargeCycles < 0 {
		return &ParsingError{Param: "DischargeCycles", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertSensorSensorCurrentExcerptConstraints(obj.InputCurrentAmps); err != nil {
		return err
	}
	if err := AssertSensorSensorVoltageExcerptConstraints(obj.InputVoltage); err != nil {
		return err
	}
	for _, el := range obj.OutputCurrentAmps {
		if err := AssertSensorSensorCurrentExcerptConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.OutputVoltages {
		if err := AssertSensorSensorVoltageExcerptConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptConstraints(obj.StoredChargeAmpHours); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptConstraints(obj.StoredEnergyWattHours); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptConstraints(obj.TemperatureCelsius); err != nil {
		return err
	}
	return nil
}
