// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// ThermalEquipmentV111ThermalEquipment - This is the schema definition for the set of cooling equipment.
type ThermalEquipmentV111ThermalEquipment struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions ThermalEquipmentV111Actions `json:"Actions,omitempty"`

	CDUs OdataV4IdRef `json:"CDUs,omitempty"`

	// The redundancy information for cooling loops attached to this equipment.
	CoolingLoopRedundancy []RedundancyRedundantGroup `json:"CoolingLoopRedundancy,omitempty"`

	CoolingLoops OdataV4IdRef `json:"CoolingLoops,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	HeatExchangers OdataV4IdRef `json:"HeatExchangers,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	ImmersionUnits OdataV4IdRef `json:"ImmersionUnits,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertThermalEquipmentV111ThermalEquipmentRequired checks if the required fields are not zero-ed
func AssertThermalEquipmentV111ThermalEquipmentRequired(obj ThermalEquipmentV111ThermalEquipment) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertThermalEquipmentV111ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.CDUs); err != nil {
		return err
	}
	for _, el := range obj.CoolingLoopRedundancy {
		if err := AssertRedundancyRedundantGroupRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.CoolingLoops); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.HeatExchangers); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.ImmersionUnits); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertThermalEquipmentV111ThermalEquipmentConstraints checks if the values respects the defined constraints
func AssertThermalEquipmentV111ThermalEquipmentConstraints(obj ThermalEquipmentV111ThermalEquipment) error {
	if err := AssertThermalEquipmentV111ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.CDUs); err != nil {
		return err
	}
	for _, el := range obj.CoolingLoopRedundancy {
		if err := AssertRedundancyRedundantGroupConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.CoolingLoops); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.HeatExchangers); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.ImmersionUnits); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
