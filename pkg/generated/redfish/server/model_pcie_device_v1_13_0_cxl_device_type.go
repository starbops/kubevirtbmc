// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PcieDeviceV1130CxlDeviceType string

// List of PcieDeviceV1130CxlDeviceType
const (
	PCIEDEVICEV1130CXLDEVICETYPE_TYPE1 PcieDeviceV1130CxlDeviceType = "Type1"
	PCIEDEVICEV1130CXLDEVICETYPE_TYPE2 PcieDeviceV1130CxlDeviceType = "Type2"
	PCIEDEVICEV1130CXLDEVICETYPE_TYPE3 PcieDeviceV1130CxlDeviceType = "Type3"
)

// AllowedPcieDeviceV1130CxlDeviceTypeEnumValues is all the allowed values of PcieDeviceV1130CxlDeviceType enum
var AllowedPcieDeviceV1130CxlDeviceTypeEnumValues = []PcieDeviceV1130CxlDeviceType{
	"Type1",
	"Type2",
	"Type3",
}

// validPcieDeviceV1130CxlDeviceTypeEnumValue provides a map of PcieDeviceV1130CxlDeviceTypes for fast verification of use input
var validPcieDeviceV1130CxlDeviceTypeEnumValues = map[PcieDeviceV1130CxlDeviceType]struct{}{
	"Type1": {},
	"Type2": {},
	"Type3": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PcieDeviceV1130CxlDeviceType) IsValid() bool {
	_, ok := validPcieDeviceV1130CxlDeviceTypeEnumValues[v]
	return ok
}

// NewPcieDeviceV1130CxlDeviceTypeFromValue returns a pointer to a valid PcieDeviceV1130CxlDeviceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPcieDeviceV1130CxlDeviceTypeFromValue(v string) (PcieDeviceV1130CxlDeviceType, error) {
	ev := PcieDeviceV1130CxlDeviceType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PcieDeviceV1130CxlDeviceType: valid values are %v", v, AllowedPcieDeviceV1130CxlDeviceTypeEnumValues)
}

// AssertPcieDeviceV1130CxlDeviceTypeRequired checks if the required fields are not zero-ed
func AssertPcieDeviceV1130CxlDeviceTypeRequired(obj PcieDeviceV1130CxlDeviceType) error {
	return nil
}

// AssertPcieDeviceV1130CxlDeviceTypeConstraints checks if the values respects the defined constraints
func AssertPcieDeviceV1130CxlDeviceTypeConstraints(obj PcieDeviceV1130CxlDeviceType) error {
	return nil
}
