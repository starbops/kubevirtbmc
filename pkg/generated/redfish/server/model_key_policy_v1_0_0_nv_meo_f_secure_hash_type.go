// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// KeyPolicyV100NvMeoFSecureHashType : The NVMe secure hash algorithms that a key is allowed to use.
type KeyPolicyV100NvMeoFSecureHashType string

// List of KeyPolicyV100NvMeoFSecureHashType
const (
	KEYPOLICYV100NVMEOFSECUREHASHTYPE_SHA256 KeyPolicyV100NvMeoFSecureHashType = "SHA256"
	KEYPOLICYV100NVMEOFSECUREHASHTYPE_SHA384 KeyPolicyV100NvMeoFSecureHashType = "SHA384"
	KEYPOLICYV100NVMEOFSECUREHASHTYPE_SHA512 KeyPolicyV100NvMeoFSecureHashType = "SHA512"
)

// AllowedKeyPolicyV100NvMeoFSecureHashTypeEnumValues is all the allowed values of KeyPolicyV100NvMeoFSecureHashType enum
var AllowedKeyPolicyV100NvMeoFSecureHashTypeEnumValues = []KeyPolicyV100NvMeoFSecureHashType{
	"SHA256",
	"SHA384",
	"SHA512",
}

// validKeyPolicyV100NvMeoFSecureHashTypeEnumValue provides a map of KeyPolicyV100NvMeoFSecureHashTypes for fast verification of use input
var validKeyPolicyV100NvMeoFSecureHashTypeEnumValues = map[KeyPolicyV100NvMeoFSecureHashType]struct{}{
	"SHA256": {},
	"SHA384": {},
	"SHA512": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyPolicyV100NvMeoFSecureHashType) IsValid() bool {
	_, ok := validKeyPolicyV100NvMeoFSecureHashTypeEnumValues[v]
	return ok
}

// NewKeyPolicyV100NvMeoFSecureHashTypeFromValue returns a pointer to a valid KeyPolicyV100NvMeoFSecureHashType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyPolicyV100NvMeoFSecureHashTypeFromValue(v string) (KeyPolicyV100NvMeoFSecureHashType, error) {
	ev := KeyPolicyV100NvMeoFSecureHashType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for KeyPolicyV100NvMeoFSecureHashType: valid values are %v", v, AllowedKeyPolicyV100NvMeoFSecureHashTypeEnumValues)
}

// AssertKeyPolicyV100NvMeoFSecureHashTypeRequired checks if the required fields are not zero-ed
func AssertKeyPolicyV100NvMeoFSecureHashTypeRequired(obj KeyPolicyV100NvMeoFSecureHashType) error {
	return nil
}

// AssertKeyPolicyV100NvMeoFSecureHashTypeConstraints checks if the values respects the defined constraints
func AssertKeyPolicyV100NvMeoFSecureHashTypeConstraints(obj KeyPolicyV100NvMeoFSecureHashType) error {
	return nil
}
