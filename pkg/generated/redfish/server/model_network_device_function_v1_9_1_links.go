// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// NetworkDeviceFunctionV191Links - The links to other resources that are related to this resource.
type NetworkDeviceFunctionV191Links struct {

	// An array of links to endpoints associated with this network device function.
	Endpoints []OdataV4IdRef `json:"Endpoints,omitempty"`

	// The number of items in a collection.
	EndpointsodataCount int64 `json:"Endpoints@odata.count,omitempty"`

	EthernetInterface OdataV4IdRef `json:"EthernetInterface,omitempty"`

	// The links to Ethernet interfaces that were created when one of the network device function VLANs is represented as a virtual NIC for the purpose of showing the IP address associated with that VLAN.
	EthernetInterfaces []OdataV4IdRef `json:"EthernetInterfaces,omitempty"`

	// The number of items in a collection.
	EthernetInterfacesodataCount int64 `json:"EthernetInterfaces@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The processors that perform offload computation for this network function, such as with a SmartNIC.
	OffloadProcessors []OdataV4IdRef `json:"OffloadProcessors,omitempty"`

	// The number of items in a collection.
	OffloadProcessorsodataCount int64 `json:"OffloadProcessors@odata.count,omitempty"`

	OffloadSystem OdataV4IdRef `json:"OffloadSystem,omitempty"`

	PCIeFunction OdataV4IdRef `json:"PCIeFunction,omitempty"`

	PhysicalNetworkPortAssignment OdataV4IdRef `json:"PhysicalNetworkPortAssignment,omitempty"`

	PhysicalPortAssignment OdataV4IdRef `json:"PhysicalPortAssignment,omitempty"`
}

// AssertNetworkDeviceFunctionV191LinksRequired checks if the required fields are not zero-ed
func AssertNetworkDeviceFunctionV191LinksRequired(obj NetworkDeviceFunctionV191Links) error {
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.EthernetInterface); err != nil {
		return err
	}
	for _, el := range obj.EthernetInterfaces {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.OffloadProcessors {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.OffloadSystem); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.PCIeFunction); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.PhysicalNetworkPortAssignment); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.PhysicalPortAssignment); err != nil {
		return err
	}
	return nil
}

// AssertNetworkDeviceFunctionV191LinksConstraints checks if the values respects the defined constraints
func AssertNetworkDeviceFunctionV191LinksConstraints(obj NetworkDeviceFunctionV191Links) error {
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.EthernetInterface); err != nil {
		return err
	}
	for _, el := range obj.EthernetInterfaces {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.OffloadProcessors {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.OffloadSystem); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.PCIeFunction); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.PhysicalNetworkPortAssignment); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.PhysicalPortAssignment); err != nil {
		return err
	}
	return nil
}
