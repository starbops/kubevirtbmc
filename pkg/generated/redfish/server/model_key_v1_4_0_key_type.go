// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type KeyV140KeyType string

// List of KeyV140KeyType
const (
	KEYV140KEYTYPE_NV_MEO_F KeyV140KeyType = "NVMeoF"
	KEYV140KEYTYPE_SSH      KeyV140KeyType = "SSH"
)

// AllowedKeyV140KeyTypeEnumValues is all the allowed values of KeyV140KeyType enum
var AllowedKeyV140KeyTypeEnumValues = []KeyV140KeyType{
	"NVMeoF",
	"SSH",
}

// validKeyV140KeyTypeEnumValue provides a map of KeyV140KeyTypes for fast verification of use input
var validKeyV140KeyTypeEnumValues = map[KeyV140KeyType]struct{}{
	"NVMeoF": {},
	"SSH":    {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyV140KeyType) IsValid() bool {
	_, ok := validKeyV140KeyTypeEnumValues[v]
	return ok
}

// NewKeyV140KeyTypeFromValue returns a pointer to a valid KeyV140KeyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyV140KeyTypeFromValue(v string) (KeyV140KeyType, error) {
	ev := KeyV140KeyType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for KeyV140KeyType: valid values are %v", v, AllowedKeyV140KeyTypeEnumValues)
}

// AssertKeyV140KeyTypeRequired checks if the required fields are not zero-ed
func AssertKeyV140KeyTypeRequired(obj KeyV140KeyType) error {
	return nil
}

// AssertKeyV140KeyTypeConstraints checks if the values respects the defined constraints
func AssertKeyV140KeyTypeConstraints(obj KeyV140KeyType) error {
	return nil
}
