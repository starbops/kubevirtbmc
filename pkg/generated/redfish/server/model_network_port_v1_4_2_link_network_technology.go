// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type NetworkPortV142LinkNetworkTechnology string

// List of NetworkPortV142LinkNetworkTechnology
const (
	NETWORKPORTV142LINKNETWORKTECHNOLOGY_ETHERNET      NetworkPortV142LinkNetworkTechnology = "Ethernet"
	NETWORKPORTV142LINKNETWORKTECHNOLOGY_INFINI_BAND   NetworkPortV142LinkNetworkTechnology = "InfiniBand"
	NETWORKPORTV142LINKNETWORKTECHNOLOGY_FIBRE_CHANNEL NetworkPortV142LinkNetworkTechnology = "FibreChannel"
)

// AllowedNetworkPortV142LinkNetworkTechnologyEnumValues is all the allowed values of NetworkPortV142LinkNetworkTechnology enum
var AllowedNetworkPortV142LinkNetworkTechnologyEnumValues = []NetworkPortV142LinkNetworkTechnology{
	"Ethernet",
	"InfiniBand",
	"FibreChannel",
}

// validNetworkPortV142LinkNetworkTechnologyEnumValue provides a map of NetworkPortV142LinkNetworkTechnologys for fast verification of use input
var validNetworkPortV142LinkNetworkTechnologyEnumValues = map[NetworkPortV142LinkNetworkTechnology]struct{}{
	"Ethernet":     {},
	"InfiniBand":   {},
	"FibreChannel": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkPortV142LinkNetworkTechnology) IsValid() bool {
	_, ok := validNetworkPortV142LinkNetworkTechnologyEnumValues[v]
	return ok
}

// NewNetworkPortV142LinkNetworkTechnologyFromValue returns a pointer to a valid NetworkPortV142LinkNetworkTechnology
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkPortV142LinkNetworkTechnologyFromValue(v string) (NetworkPortV142LinkNetworkTechnology, error) {
	ev := NetworkPortV142LinkNetworkTechnology(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for NetworkPortV142LinkNetworkTechnology: valid values are %v", v, AllowedNetworkPortV142LinkNetworkTechnologyEnumValues)
}

// AssertNetworkPortV142LinkNetworkTechnologyRequired checks if the required fields are not zero-ed
func AssertNetworkPortV142LinkNetworkTechnologyRequired(obj NetworkPortV142LinkNetworkTechnology) error {
	return nil
}

// AssertNetworkPortV142LinkNetworkTechnologyConstraints checks if the values respects the defined constraints
func AssertNetworkPortV142LinkNetworkTechnologyConstraints(obj NetworkPortV142LinkNetworkTechnology) error {
	return nil
}
