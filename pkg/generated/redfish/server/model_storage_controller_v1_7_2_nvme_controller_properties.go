// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// StorageControllerV172NvmeControllerProperties - NVMe-related properties for a storage controller.
type StorageControllerV172NvmeControllerProperties struct {

	// The ANA characteristics and volume information.
	ANACharacteristics []StorageControllerV172AnaCharacteristics `json:"ANACharacteristics,omitempty"`

	// The number of I/O completion queues allocated to this NVMe I/O controller.
	AllocatedCompletionQueues *int64 `json:"AllocatedCompletionQueues,omitempty"`

	// The number of I/O submission queues allocated to this NVMe I/O controller.
	AllocatedSubmissionQueues *int64 `json:"AllocatedSubmissionQueues,omitempty"`

	ControllerType StorageControllerV172NvmeControllerType `json:"ControllerType,omitempty"`

	// The maximum individual queue size that an NVMe I/O controller supports.
	MaxQueueSize *int64 `json:"MaxQueueSize,omitempty"`

	NVMeControllerAttributes StorageControllerV172NvmeControllerAttributes `json:"NVMeControllerAttributes,omitempty"`

	NVMeSMARTCriticalWarnings StorageControllerV172NvmeSmartCriticalWarnings `json:"NVMeSMARTCriticalWarnings,omitempty"`

	// The version of the NVMe Base Specification supported.
	NVMeVersion *string `json:"NVMeVersion,omitempty"`
}

// AssertStorageControllerV172NvmeControllerPropertiesRequired checks if the required fields are not zero-ed
func AssertStorageControllerV172NvmeControllerPropertiesRequired(obj StorageControllerV172NvmeControllerProperties) error {
	for _, el := range obj.ANACharacteristics {
		if err := AssertStorageControllerV172AnaCharacteristicsRequired(el); err != nil {
			return err
		}
	}
	if err := AssertStorageControllerV172NvmeControllerAttributesRequired(obj.NVMeControllerAttributes); err != nil {
		return err
	}
	if err := AssertStorageControllerV172NvmeSmartCriticalWarningsRequired(obj.NVMeSMARTCriticalWarnings); err != nil {
		return err
	}
	return nil
}

// AssertStorageControllerV172NvmeControllerPropertiesConstraints checks if the values respects the defined constraints
func AssertStorageControllerV172NvmeControllerPropertiesConstraints(obj StorageControllerV172NvmeControllerProperties) error {
	for _, el := range obj.ANACharacteristics {
		if err := AssertStorageControllerV172AnaCharacteristicsConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertStorageControllerV172NvmeControllerAttributesConstraints(obj.NVMeControllerAttributes); err != nil {
		return err
	}
	if err := AssertStorageControllerV172NvmeSmartCriticalWarningsConstraints(obj.NVMeSMARTCriticalWarnings); err != nil {
		return err
	}
	return nil
}
