// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type AllowDenyV102AllowType string

// List of AllowDenyV102AllowType
const (
	ALLOWDENYV102ALLOWTYPE_ALLOW AllowDenyV102AllowType = "Allow"
	ALLOWDENYV102ALLOWTYPE_DENY  AllowDenyV102AllowType = "Deny"
)

// AllowedAllowDenyV102AllowTypeEnumValues is all the allowed values of AllowDenyV102AllowType enum
var AllowedAllowDenyV102AllowTypeEnumValues = []AllowDenyV102AllowType{
	"Allow",
	"Deny",
}

// validAllowDenyV102AllowTypeEnumValue provides a map of AllowDenyV102AllowTypes for fast verification of use input
var validAllowDenyV102AllowTypeEnumValues = map[AllowDenyV102AllowType]struct{}{
	"Allow": {},
	"Deny":  {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AllowDenyV102AllowType) IsValid() bool {
	_, ok := validAllowDenyV102AllowTypeEnumValues[v]
	return ok
}

// NewAllowDenyV102AllowTypeFromValue returns a pointer to a valid AllowDenyV102AllowType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAllowDenyV102AllowTypeFromValue(v string) (AllowDenyV102AllowType, error) {
	ev := AllowDenyV102AllowType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for AllowDenyV102AllowType: valid values are %v", v, AllowedAllowDenyV102AllowTypeEnumValues)
}

// AssertAllowDenyV102AllowTypeRequired checks if the required fields are not zero-ed
func AssertAllowDenyV102AllowTypeRequired(obj AllowDenyV102AllowType) error {
	return nil
}

// AssertAllowDenyV102AllowTypeConstraints checks if the values respects the defined constraints
func AssertAllowDenyV102AllowTypeConstraints(obj AllowDenyV102AllowType) error {
	return nil
}
