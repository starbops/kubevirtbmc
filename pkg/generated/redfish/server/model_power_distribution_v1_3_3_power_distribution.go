// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"time"
)

// PowerDistributionV133PowerDistribution - This is the schema definition for a power distribution component or unit, such as a floor power distribution unit (PDU) or switchgear.
type PowerDistributionV133PowerDistribution struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions PowerDistributionV133Actions `json:"Actions,omitempty"`

	// The user-assigned asset tag for this equipment.
	AssetTag *string `json:"AssetTag,omitempty"`

	Branches OdataV4IdRef `json:"Branches,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	EquipmentType PowerDistributionV133PowerEquipmentType `json:"EquipmentType"`

	Feeders OdataV4IdRef `json:"Feeders,omitempty"`

	// The firmware version of this equipment.
	FirmwareVersion string `json:"FirmwareVersion,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links PowerDistributionV133Links `json:"Links,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	Mains OdataV4IdRef `json:"Mains,omitempty"`

	MainsRedundancy RedundancyRedundantGroup `json:"MainsRedundancy,omitempty"`

	// The manufacturer of this equipment.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	Metrics OdataV4IdRef `json:"Metrics,omitempty"`

	// The product model number of this equipment.
	Model *string `json:"Model,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	OutletGroups OdataV4IdRef `json:"OutletGroups,omitempty"`

	Outlets OdataV4IdRef `json:"Outlets,omitempty"`

	// The part number for this equipment.
	PartNumber *string `json:"PartNumber,omitempty"`

	PowerSupplies OdataV4IdRef `json:"PowerSupplies,omitempty"`

	// The redundancy information for the set of power supplies for this equipment.
	// Deprecated
	PowerSupplyRedundancy []RedundancyRedundantGroup `json:"PowerSupplyRedundancy,omitempty"`

	// The production or manufacturing date of this equipment.
	ProductionDate *time.Time `json:"ProductionDate,omitempty"`

	Sensors OdataV4IdRef `json:"Sensors,omitempty"`

	// The serial number for this equipment.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	Subfeeds OdataV4IdRef `json:"Subfeeds,omitempty"`

	TransferConfiguration PowerDistributionV133TransferConfiguration `json:"TransferConfiguration,omitempty"`

	TransferCriteria PowerDistributionV133TransferCriteria `json:"TransferCriteria,omitempty"`

	UUID string `json:"UUID,omitempty" validate:"regexp=^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`

	// A user-assigned label.
	UserLabel string `json:"UserLabel,omitempty"`

	// The hardware version of this equipment.
	Version *string `json:"Version,omitempty"`
}

// AssertPowerDistributionV133PowerDistributionRequired checks if the required fields are not zero-ed
func AssertPowerDistributionV133PowerDistributionRequired(obj PowerDistributionV133PowerDistribution) error {
	elements := map[string]interface{}{
		"@odata.id":     obj.OdataId,
		"@odata.type":   obj.OdataType,
		"EquipmentType": obj.EquipmentType,
		"Id":            obj.Id,
		"Name":          obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPowerDistributionV133ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Branches); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Feeders); err != nil {
		return err
	}
	if err := AssertPowerDistributionV133LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Mains); err != nil {
		return err
	}
	if err := AssertRedundancyRedundantGroupRequired(obj.MainsRedundancy); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Metrics); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.OutletGroups); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Outlets); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.PowerSupplies); err != nil {
		return err
	}
	for _, el := range obj.PowerSupplyRedundancy {
		if err := AssertRedundancyRedundantGroupRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.Sensors); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Subfeeds); err != nil {
		return err
	}
	if err := AssertPowerDistributionV133TransferConfigurationRequired(obj.TransferConfiguration); err != nil {
		return err
	}
	if err := AssertPowerDistributionV133TransferCriteriaRequired(obj.TransferCriteria); err != nil {
		return err
	}
	return nil
}

// AssertPowerDistributionV133PowerDistributionConstraints checks if the values respects the defined constraints
func AssertPowerDistributionV133PowerDistributionConstraints(obj PowerDistributionV133PowerDistribution) error {
	if err := AssertPowerDistributionV133ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Branches); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Feeders); err != nil {
		return err
	}
	if err := AssertPowerDistributionV133LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Mains); err != nil {
		return err
	}
	if err := AssertRedundancyRedundantGroupConstraints(obj.MainsRedundancy); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Metrics); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.OutletGroups); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Outlets); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.PowerSupplies); err != nil {
		return err
	}
	for _, el := range obj.PowerSupplyRedundancy {
		if err := AssertRedundancyRedundantGroupConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.Sensors); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Subfeeds); err != nil {
		return err
	}
	if err := AssertPowerDistributionV133TransferConfigurationConstraints(obj.TransferConfiguration); err != nil {
		return err
	}
	if err := AssertPowerDistributionV133TransferCriteriaConstraints(obj.TransferCriteria); err != nil {
		return err
	}
	return nil
}
