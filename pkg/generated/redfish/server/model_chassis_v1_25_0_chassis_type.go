// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ChassisV1250ChassisType string

// List of ChassisV1250ChassisType
const (
	CHASSISV1250CHASSISTYPE_RACK              ChassisV1250ChassisType = "Rack"
	CHASSISV1250CHASSISTYPE_BLADE             ChassisV1250ChassisType = "Blade"
	CHASSISV1250CHASSISTYPE_ENCLOSURE         ChassisV1250ChassisType = "Enclosure"
	CHASSISV1250CHASSISTYPE_STAND_ALONE       ChassisV1250ChassisType = "StandAlone"
	CHASSISV1250CHASSISTYPE_RACK_MOUNT        ChassisV1250ChassisType = "RackMount"
	CHASSISV1250CHASSISTYPE_CARD              ChassisV1250ChassisType = "Card"
	CHASSISV1250CHASSISTYPE_CARTRIDGE         ChassisV1250ChassisType = "Cartridge"
	CHASSISV1250CHASSISTYPE_ROW               ChassisV1250ChassisType = "Row"
	CHASSISV1250CHASSISTYPE_POD               ChassisV1250ChassisType = "Pod"
	CHASSISV1250CHASSISTYPE_EXPANSION         ChassisV1250ChassisType = "Expansion"
	CHASSISV1250CHASSISTYPE_SIDECAR           ChassisV1250ChassisType = "Sidecar"
	CHASSISV1250CHASSISTYPE_ZONE              ChassisV1250ChassisType = "Zone"
	CHASSISV1250CHASSISTYPE_SLED              ChassisV1250ChassisType = "Sled"
	CHASSISV1250CHASSISTYPE_SHELF             ChassisV1250ChassisType = "Shelf"
	CHASSISV1250CHASSISTYPE_DRAWER            ChassisV1250ChassisType = "Drawer"
	CHASSISV1250CHASSISTYPE_MODULE            ChassisV1250ChassisType = "Module"
	CHASSISV1250CHASSISTYPE_COMPONENT         ChassisV1250ChassisType = "Component"
	CHASSISV1250CHASSISTYPE_IP_BASED_DRIVE    ChassisV1250ChassisType = "IPBasedDrive"
	CHASSISV1250CHASSISTYPE_RACK_GROUP        ChassisV1250ChassisType = "RackGroup"
	CHASSISV1250CHASSISTYPE_STORAGE_ENCLOSURE ChassisV1250ChassisType = "StorageEnclosure"
	CHASSISV1250CHASSISTYPE_IMMERSION_TANK    ChassisV1250ChassisType = "ImmersionTank"
	CHASSISV1250CHASSISTYPE_HEAT_EXCHANGER    ChassisV1250ChassisType = "HeatExchanger"
	CHASSISV1250CHASSISTYPE_POWER_STRIP       ChassisV1250ChassisType = "PowerStrip"
	CHASSISV1250CHASSISTYPE_OTHER             ChassisV1250ChassisType = "Other"
)

// AllowedChassisV1250ChassisTypeEnumValues is all the allowed values of ChassisV1250ChassisType enum
var AllowedChassisV1250ChassisTypeEnumValues = []ChassisV1250ChassisType{
	"Rack",
	"Blade",
	"Enclosure",
	"StandAlone",
	"RackMount",
	"Card",
	"Cartridge",
	"Row",
	"Pod",
	"Expansion",
	"Sidecar",
	"Zone",
	"Sled",
	"Shelf",
	"Drawer",
	"Module",
	"Component",
	"IPBasedDrive",
	"RackGroup",
	"StorageEnclosure",
	"ImmersionTank",
	"HeatExchanger",
	"PowerStrip",
	"Other",
}

// validChassisV1250ChassisTypeEnumValue provides a map of ChassisV1250ChassisTypes for fast verification of use input
var validChassisV1250ChassisTypeEnumValues = map[ChassisV1250ChassisType]struct{}{
	"Rack":             {},
	"Blade":            {},
	"Enclosure":        {},
	"StandAlone":       {},
	"RackMount":        {},
	"Card":             {},
	"Cartridge":        {},
	"Row":              {},
	"Pod":              {},
	"Expansion":        {},
	"Sidecar":          {},
	"Zone":             {},
	"Sled":             {},
	"Shelf":            {},
	"Drawer":           {},
	"Module":           {},
	"Component":        {},
	"IPBasedDrive":     {},
	"RackGroup":        {},
	"StorageEnclosure": {},
	"ImmersionTank":    {},
	"HeatExchanger":    {},
	"PowerStrip":       {},
	"Other":            {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChassisV1250ChassisType) IsValid() bool {
	_, ok := validChassisV1250ChassisTypeEnumValues[v]
	return ok
}

// NewChassisV1250ChassisTypeFromValue returns a pointer to a valid ChassisV1250ChassisType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChassisV1250ChassisTypeFromValue(v string) (ChassisV1250ChassisType, error) {
	ev := ChassisV1250ChassisType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ChassisV1250ChassisType: valid values are %v", v, AllowedChassisV1250ChassisTypeEnumValues)
}

// AssertChassisV1250ChassisTypeRequired checks if the required fields are not zero-ed
func AssertChassisV1250ChassisTypeRequired(obj ChassisV1250ChassisType) error {
	return nil
}

// AssertChassisV1250ChassisTypeConstraints checks if the values respects the defined constraints
func AssertChassisV1250ChassisTypeConstraints(obj ChassisV1250ChassisType) error {
	return nil
}
