// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// ResourceBlockV142CompositionStatus - Composition status of the resource block.
type ResourceBlockV142CompositionStatus struct {
	CompositionState ResourceBlockV142CompositionState `json:"CompositionState"`

	// The maximum number of compositions in which this resource block can participate simultaneously.
	MaxCompositions *int64 `json:"MaxCompositions,omitempty"`

	// The number of compositions in which this resource block is currently participating.
	NumberOfCompositions *int64 `json:"NumberOfCompositions,omitempty"`

	// An indication of whether any client has reserved the resource block.
	Reserved *bool `json:"Reserved,omitempty"`

	// An indication of whether this resource block can participate in multiple compositions simultaneously.
	SharingCapable *bool `json:"SharingCapable,omitempty"`

	// An indication of whether this resource block is allowed to participate in multiple compositions simultaneously.
	SharingEnabled *bool `json:"SharingEnabled,omitempty"`
}

// AssertResourceBlockV142CompositionStatusRequired checks if the required fields are not zero-ed
func AssertResourceBlockV142CompositionStatusRequired(obj ResourceBlockV142CompositionStatus) error {
	elements := map[string]interface{}{
		"CompositionState": obj.CompositionState,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertResourceBlockV142CompositionStatusConstraints checks if the values respects the defined constraints
func AssertResourceBlockV142CompositionStatusConstraints(obj ResourceBlockV142CompositionStatus) error {
	if obj.MaxCompositions != nil && *obj.MaxCompositions < 1 {
		return &ParsingError{Param: "MaxCompositions", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.NumberOfCompositions != nil && *obj.NumberOfCompositions < 0 {
		return &ParsingError{Param: "NumberOfCompositions", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
