// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
	"time"
)

// JobV123Job - The Job schema contains information about a job that a Redfish job service schedules or executes.  Clients create jobs to describe a series of operations that occur at periodic intervals.
type JobV123Job struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions JobV123Actions `json:"Actions,omitempty"`

	// The person or program that created this job entry.
	CreatedBy string `json:"CreatedBy,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The date and time when the job was completed.
	EndTime time.Time `json:"EndTime,omitempty"`

	// The estimated total time required to complete the job.
	EstimatedDuration *string `json:"EstimatedDuration,omitempty" validate:"regexp=^P(\\\\d+D)?(T(\\\\d+H)?(\\\\d+M)?(\\\\d+(.\\\\d+)?S)?)?$"`

	// An indication of whether the contents of the payload should be hidden from view after the job has been created.  If `true`, responses do not return the payload.  If `false`, responses return the payload.  If this property is not present when the job is created, the default is `false`.
	HidePayload bool `json:"HidePayload,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	JobState JobV123JobState `json:"JobState,omitempty"`

	JobStatus ResourceHealth `json:"JobStatus,omitempty"`

	Links JobV123Links `json:"Links,omitempty"`

	// The maximum amount of time the job is allowed to execute.
	MaxExecutionTime *string `json:"MaxExecutionTime,omitempty"`

	// An array of messages associated with the job.
	Messages []MessageMessage `json:"Messages,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	Payload JobV123Payload `json:"Payload,omitempty"`

	// The completion percentage of this job.
	PercentComplete *int64 `json:"PercentComplete,omitempty"`

	Schedule ScheduleSchedule `json:"Schedule,omitempty"`

	// The date and time when the job was started or is scheduled to start.
	StartTime time.Time `json:"StartTime,omitempty"`

	// The serialized execution order of the job steps.
	StepOrder []string `json:"StepOrder,omitempty"`

	Steps OdataV4IdRef `json:"Steps,omitempty"`
}

// AssertJobV123JobRequired checks if the required fields are not zero-ed
func AssertJobV123JobRequired(obj JobV123Job) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertJobV123ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertJobV123LinksRequired(obj.Links); err != nil {
		return err
	}
	for _, el := range obj.Messages {
		if err := AssertMessageMessageRequired(el); err != nil {
			return err
		}
	}
	if err := AssertJobV123PayloadRequired(obj.Payload); err != nil {
		return err
	}
	if err := AssertScheduleScheduleRequired(obj.Schedule); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Steps); err != nil {
		return err
	}
	return nil
}

// AssertJobV123JobConstraints checks if the values respects the defined constraints
func AssertJobV123JobConstraints(obj JobV123Job) error {
	if err := AssertJobV123ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertJobV123LinksConstraints(obj.Links); err != nil {
		return err
	}
	for _, el := range obj.Messages {
		if err := AssertMessageMessageConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertJobV123PayloadConstraints(obj.Payload); err != nil {
		return err
	}
	if obj.PercentComplete != nil && *obj.PercentComplete < 0 {
		return &ParsingError{Param: "PercentComplete", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.PercentComplete != nil && *obj.PercentComplete > 100 {
		return &ParsingError{Param: "PercentComplete", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if err := AssertScheduleScheduleConstraints(obj.Schedule); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Steps); err != nil {
		return err
	}
	return nil
}
