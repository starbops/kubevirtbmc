// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PowerV172PowerLimitException string

// List of PowerV172PowerLimitException
const (
	POWERV172POWERLIMITEXCEPTION_NO_ACTION      PowerV172PowerLimitException = "NoAction"
	POWERV172POWERLIMITEXCEPTION_HARD_POWER_OFF PowerV172PowerLimitException = "HardPowerOff"
	POWERV172POWERLIMITEXCEPTION_LOG_EVENT_ONLY PowerV172PowerLimitException = "LogEventOnly"
	POWERV172POWERLIMITEXCEPTION_OEM            PowerV172PowerLimitException = "Oem"
)

// AllowedPowerV172PowerLimitExceptionEnumValues is all the allowed values of PowerV172PowerLimitException enum
var AllowedPowerV172PowerLimitExceptionEnumValues = []PowerV172PowerLimitException{
	"NoAction",
	"HardPowerOff",
	"LogEventOnly",
	"Oem",
}

// validPowerV172PowerLimitExceptionEnumValue provides a map of PowerV172PowerLimitExceptions for fast verification of use input
var validPowerV172PowerLimitExceptionEnumValues = map[PowerV172PowerLimitException]struct{}{
	"NoAction":     {},
	"HardPowerOff": {},
	"LogEventOnly": {},
	"Oem":          {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PowerV172PowerLimitException) IsValid() bool {
	_, ok := validPowerV172PowerLimitExceptionEnumValues[v]
	return ok
}

// NewPowerV172PowerLimitExceptionFromValue returns a pointer to a valid PowerV172PowerLimitException
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPowerV172PowerLimitExceptionFromValue(v string) (PowerV172PowerLimitException, error) {
	ev := PowerV172PowerLimitException(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PowerV172PowerLimitException: valid values are %v", v, AllowedPowerV172PowerLimitExceptionEnumValues)
}

// AssertPowerV172PowerLimitExceptionRequired checks if the required fields are not zero-ed
func AssertPowerV172PowerLimitExceptionRequired(obj PowerV172PowerLimitException) error {
	return nil
}

// AssertPowerV172PowerLimitExceptionConstraints checks if the values respects the defined constraints
func AssertPowerV172PowerLimitExceptionConstraints(obj PowerV172PowerLimitException) error {
	return nil
}
