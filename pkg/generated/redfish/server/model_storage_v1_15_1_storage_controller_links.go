// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// StorageV1151StorageControllerLinks - The links to other resources that are related to this resource.
type StorageV1151StorageControllerLinks struct {

	// An array of links to the endpoints that connect to this controller.
	Endpoints []OdataV4IdRef `json:"Endpoints,omitempty"`

	// The number of items in a collection.
	EndpointsodataCount int64 `json:"Endpoints@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An array of links to the PCIe functions that the storage controller produces.
	PCIeFunctions []OdataV4IdRef `json:"PCIeFunctions,omitempty"`

	// The number of items in a collection.
	PCIeFunctionsodataCount int64 `json:"PCIeFunctions@odata.count,omitempty"`

	// An array of links to the storage services that connect to this controller.
	// Deprecated
	StorageServices []OdataV4IdRef `json:"StorageServices,omitempty"`

	// The number of items in a collection.
	StorageServicesodataCount int64 `json:"StorageServices@odata.count,omitempty"`
}

// AssertStorageV1151StorageControllerLinksRequired checks if the required fields are not zero-ed
func AssertStorageV1151StorageControllerLinksRequired(obj StorageV1151StorageControllerLinks) error {
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PCIeFunctions {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.StorageServices {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertStorageV1151StorageControllerLinksConstraints checks if the values respects the defined constraints
func AssertStorageV1151StorageControllerLinksConstraints(obj StorageV1151StorageControllerLinks) error {
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PCIeFunctions {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.StorageServices {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
