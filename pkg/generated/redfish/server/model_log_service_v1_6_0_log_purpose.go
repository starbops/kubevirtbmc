// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type LogServiceV160LogPurpose string

// List of LogServiceV160LogPurpose
const (
	LOGSERVICEV160LOGPURPOSE_DIAGNOSTIC      LogServiceV160LogPurpose = "Diagnostic"
	LOGSERVICEV160LOGPURPOSE_OPERATIONS      LogServiceV160LogPurpose = "Operations"
	LOGSERVICEV160LOGPURPOSE_SECURITY        LogServiceV160LogPurpose = "Security"
	LOGSERVICEV160LOGPURPOSE_TELEMETRY       LogServiceV160LogPurpose = "Telemetry"
	LOGSERVICEV160LOGPURPOSE_EXTERNAL_ENTITY LogServiceV160LogPurpose = "ExternalEntity"
	LOGSERVICEV160LOGPURPOSE_OEM             LogServiceV160LogPurpose = "OEM"
)

// AllowedLogServiceV160LogPurposeEnumValues is all the allowed values of LogServiceV160LogPurpose enum
var AllowedLogServiceV160LogPurposeEnumValues = []LogServiceV160LogPurpose{
	"Diagnostic",
	"Operations",
	"Security",
	"Telemetry",
	"ExternalEntity",
	"OEM",
}

// validLogServiceV160LogPurposeEnumValue provides a map of LogServiceV160LogPurposes for fast verification of use input
var validLogServiceV160LogPurposeEnumValues = map[LogServiceV160LogPurpose]struct{}{
	"Diagnostic":     {},
	"Operations":     {},
	"Security":       {},
	"Telemetry":      {},
	"ExternalEntity": {},
	"OEM":            {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogServiceV160LogPurpose) IsValid() bool {
	_, ok := validLogServiceV160LogPurposeEnumValues[v]
	return ok
}

// NewLogServiceV160LogPurposeFromValue returns a pointer to a valid LogServiceV160LogPurpose
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogServiceV160LogPurposeFromValue(v string) (LogServiceV160LogPurpose, error) {
	ev := LogServiceV160LogPurpose(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for LogServiceV160LogPurpose: valid values are %v", v, AllowedLogServiceV160LogPurposeEnumValues)
}

// AssertLogServiceV160LogPurposeRequired checks if the required fields are not zero-ed
func AssertLogServiceV160LogPurposeRequired(obj LogServiceV160LogPurpose) error {
	return nil
}

// AssertLogServiceV160LogPurposeConstraints checks if the values respects the defined constraints
func AssertLogServiceV160LogPurposeConstraints(obj LogServiceV160LogPurpose) error {
	return nil
}
