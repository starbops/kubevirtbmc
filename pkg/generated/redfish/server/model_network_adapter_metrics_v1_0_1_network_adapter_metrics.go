// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// NetworkAdapterMetricsV101NetworkAdapterMetrics - The NetworkAdapterMetrics schema contains usage and health statistics for a network adapter.
type NetworkAdapterMetricsV101NetworkAdapterMetrics struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions NetworkAdapterMetricsV101Actions `json:"Actions,omitempty"`

	// The device CPU core utilization as a percentage.
	CPUCorePercent *float32 `json:"CPUCorePercent,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The host bus, such as PCIe, RX utilization as a percentage.
	HostBusRXPercent *float32 `json:"HostBusRXPercent,omitempty"`

	// The host bus, such as PCIe, TX utilization as a percentage.
	HostBusTXPercent *float32 `json:"HostBusTXPercent,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The total number of NC-SI bytes received since reset.
	NCSIRXBytes *int64 `json:"NCSIRXBytes,omitempty"`

	// The total number of NC-SI frames received since reset.
	NCSIRXFrames *int64 `json:"NCSIRXFrames,omitempty"`

	// The total number of NC-SI bytes sent since reset.
	NCSITXBytes *int64 `json:"NCSITXBytes,omitempty"`

	// The total number of NC-SI frames sent since reset.
	NCSITXFrames *int64 `json:"NCSITXFrames,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The total number of bytes received since reset.
	RXBytes *int64 `json:"RXBytes,omitempty"`

	// The total number of good multicast frames received since reset.
	RXMulticastFrames *int64 `json:"RXMulticastFrames,omitempty"`

	// The total number of good unicast frames received since reset.
	RXUnicastFrames *int64 `json:"RXUnicastFrames,omitempty"`

	// The total number of bytes transmitted since reset.
	TXBytes *int64 `json:"TXBytes,omitempty"`

	// The total number of good multicast frames transmitted since reset.
	TXMulticastFrames *int64 `json:"TXMulticastFrames,omitempty"`

	// The total number of good unicast frames transmitted since reset.
	TXUnicastFrames *int64 `json:"TXUnicastFrames,omitempty"`
}

// AssertNetworkAdapterMetricsV101NetworkAdapterMetricsRequired checks if the required fields are not zero-ed
func AssertNetworkAdapterMetricsV101NetworkAdapterMetricsRequired(obj NetworkAdapterMetricsV101NetworkAdapterMetrics) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertNetworkAdapterMetricsV101ActionsRequired(obj.Actions); err != nil {
		return err
	}
	return nil
}

// AssertNetworkAdapterMetricsV101NetworkAdapterMetricsConstraints checks if the values respects the defined constraints
func AssertNetworkAdapterMetricsV101NetworkAdapterMetricsConstraints(obj NetworkAdapterMetricsV101NetworkAdapterMetrics) error {
	if err := AssertNetworkAdapterMetricsV101ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if obj.CPUCorePercent != nil && *obj.CPUCorePercent < 0 {
		return &ParsingError{Param: "CPUCorePercent", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.HostBusRXPercent != nil && *obj.HostBusRXPercent < 0 {
		return &ParsingError{Param: "HostBusRXPercent", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.HostBusTXPercent != nil && *obj.HostBusTXPercent < 0 {
		return &ParsingError{Param: "HostBusTXPercent", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
