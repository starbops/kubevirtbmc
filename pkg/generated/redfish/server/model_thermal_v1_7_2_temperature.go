// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

type ThermalV172Temperature struct {

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	Actions ThermalV172TemperatureActions `json:"Actions,omitempty"`

	// Adjusted maximum allowable operating temperature for this equipment based on the current environmental conditions present.
	AdjustedMaxAllowableOperatingValue *int64 `json:"AdjustedMaxAllowableOperatingValue,omitempty"`

	// Adjusted minimum allowable operating temperature for this equipment based on the current environmental conditions present.
	AdjustedMinAllowableOperatingValue *int64 `json:"AdjustedMinAllowableOperatingValue,omitempty"`

	DeltaPhysicalContext PhysicalContextPhysicalContext `json:"DeltaPhysicalContext,omitempty"`

	// The delta temperature reading.
	DeltaReadingCelsius *float32 `json:"DeltaReadingCelsius,omitempty"`

	// The value at which the reading is below normal range but not yet fatal.
	LowerThresholdCritical *float32 `json:"LowerThresholdCritical,omitempty"`

	// The value at which the reading is below normal range and fatal.
	LowerThresholdFatal *float32 `json:"LowerThresholdFatal,omitempty"`

	// The value at which the reading is below normal range.
	LowerThresholdNonCritical *float32 `json:"LowerThresholdNonCritical,omitempty"`

	// The value at which the reading is below the user-defined range.
	LowerThresholdUser *int64 `json:"LowerThresholdUser,omitempty"`

	// Maximum allowable operating temperature for this equipment.
	MaxAllowableOperatingValue *int64 `json:"MaxAllowableOperatingValue,omitempty"`

	// Maximum value for this sensor.
	MaxReadingRangeTemp *float32 `json:"MaxReadingRangeTemp,omitempty"`

	// The unique identifier for the member within an array.
	MemberId string `json:"MemberId"`

	// Minimum allowable operating temperature for this equipment.
	MinAllowableOperatingValue *int64 `json:"MinAllowableOperatingValue,omitempty"`

	// Minimum value for this sensor.
	MinReadingRangeTemp *float32 `json:"MinReadingRangeTemp,omitempty"`

	// The temperature sensor name.
	Name *string `json:"Name,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PhysicalContext PhysicalContextPhysicalContext `json:"PhysicalContext,omitempty"`

	// The temperature (C).
	ReadingCelsius *float32 `json:"ReadingCelsius,omitempty"`

	// An array of links to resources or objects that represent areas or devices to which this temperature applies.
	RelatedItem []OdataV4IdRef `json:"RelatedItem,omitempty"`

	// The number of items in a collection.
	RelatedItemodataCount int64 `json:"RelatedItem@odata.count,omitempty"`

	// The numerical identifier of the temperature sensor.
	SensorNumber *int64 `json:"SensorNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The value at which the reading is above normal range but not yet fatal.
	UpperThresholdCritical *float32 `json:"UpperThresholdCritical,omitempty"`

	// The value at which the reading is above normal range and fatal.
	UpperThresholdFatal *float32 `json:"UpperThresholdFatal,omitempty"`

	// The value at which the reading is above normal range.
	UpperThresholdNonCritical *float32 `json:"UpperThresholdNonCritical,omitempty"`

	// The value at which the reading is above the user-defined range.
	UpperThresholdUser *int64 `json:"UpperThresholdUser,omitempty"`
}

// AssertThermalV172TemperatureRequired checks if the required fields are not zero-ed
func AssertThermalV172TemperatureRequired(obj ThermalV172Temperature) error {
	elements := map[string]interface{}{
		"@odata.id": obj.OdataId,
		"MemberId":  obj.MemberId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertThermalV172TemperatureActionsRequired(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.RelatedItem {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertThermalV172TemperatureConstraints checks if the values respects the defined constraints
func AssertThermalV172TemperatureConstraints(obj ThermalV172Temperature) error {
	if err := AssertThermalV172TemperatureActionsConstraints(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.RelatedItem {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
