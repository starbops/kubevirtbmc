// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// ResourceV1200LocationType : The types of locations for a part within an enclosure.
type ResourceV1200LocationType string

// List of ResourceV1200LocationType
const (
	RESOURCEV1200LOCATIONTYPE_SLOT      ResourceV1200LocationType = "Slot"
	RESOURCEV1200LOCATIONTYPE_BAY       ResourceV1200LocationType = "Bay"
	RESOURCEV1200LOCATIONTYPE_CONNECTOR ResourceV1200LocationType = "Connector"
	RESOURCEV1200LOCATIONTYPE_SOCKET    ResourceV1200LocationType = "Socket"
	RESOURCEV1200LOCATIONTYPE_BACKPLANE ResourceV1200LocationType = "Backplane"
	RESOURCEV1200LOCATIONTYPE_EMBEDDED  ResourceV1200LocationType = "Embedded"
)

// AllowedResourceV1200LocationTypeEnumValues is all the allowed values of ResourceV1200LocationType enum
var AllowedResourceV1200LocationTypeEnumValues = []ResourceV1200LocationType{
	"Slot",
	"Bay",
	"Connector",
	"Socket",
	"Backplane",
	"Embedded",
}

// validResourceV1200LocationTypeEnumValue provides a map of ResourceV1200LocationTypes for fast verification of use input
var validResourceV1200LocationTypeEnumValues = map[ResourceV1200LocationType]struct{}{
	"Slot":      {},
	"Bay":       {},
	"Connector": {},
	"Socket":    {},
	"Backplane": {},
	"Embedded":  {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceV1200LocationType) IsValid() bool {
	_, ok := validResourceV1200LocationTypeEnumValues[v]
	return ok
}

// NewResourceV1200LocationTypeFromValue returns a pointer to a valid ResourceV1200LocationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceV1200LocationTypeFromValue(v string) (ResourceV1200LocationType, error) {
	ev := ResourceV1200LocationType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ResourceV1200LocationType: valid values are %v", v, AllowedResourceV1200LocationTypeEnumValues)
}

// AssertResourceV1200LocationTypeRequired checks if the required fields are not zero-ed
func AssertResourceV1200LocationTypeRequired(obj ResourceV1200LocationType) error {
	return nil
}

// AssertResourceV1200LocationTypeConstraints checks if the values respects the defined constraints
func AssertResourceV1200LocationTypeConstraints(obj ResourceV1200LocationType) error {
	return nil
}
