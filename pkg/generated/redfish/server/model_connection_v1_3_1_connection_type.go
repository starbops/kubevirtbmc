// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ConnectionV131ConnectionType string

// List of ConnectionV131ConnectionType
const (
	CONNECTIONV131CONNECTIONTYPE_STORAGE ConnectionV131ConnectionType = "Storage"
	CONNECTIONV131CONNECTIONTYPE_MEMORY  ConnectionV131ConnectionType = "Memory"
)

// AllowedConnectionV131ConnectionTypeEnumValues is all the allowed values of ConnectionV131ConnectionType enum
var AllowedConnectionV131ConnectionTypeEnumValues = []ConnectionV131ConnectionType{
	"Storage",
	"Memory",
}

// validConnectionV131ConnectionTypeEnumValue provides a map of ConnectionV131ConnectionTypes for fast verification of use input
var validConnectionV131ConnectionTypeEnumValues = map[ConnectionV131ConnectionType]struct{}{
	"Storage": {},
	"Memory":  {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionV131ConnectionType) IsValid() bool {
	_, ok := validConnectionV131ConnectionTypeEnumValues[v]
	return ok
}

// NewConnectionV131ConnectionTypeFromValue returns a pointer to a valid ConnectionV131ConnectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionV131ConnectionTypeFromValue(v string) (ConnectionV131ConnectionType, error) {
	ev := ConnectionV131ConnectionType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ConnectionV131ConnectionType: valid values are %v", v, AllowedConnectionV131ConnectionTypeEnumValues)
}

// AssertConnectionV131ConnectionTypeRequired checks if the required fields are not zero-ed
func AssertConnectionV131ConnectionTypeRequired(obj ConnectionV131ConnectionType) error {
	return nil
}

// AssertConnectionV131ConnectionTypeConstraints checks if the values respects the defined constraints
func AssertConnectionV131ConnectionTypeConstraints(obj ConnectionV131ConnectionType) error {
	return nil
}
