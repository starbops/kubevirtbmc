// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// StorageV1151CacheSummary - This type describes the cache memory of the storage controller in general detail.
type StorageV1151CacheSummary struct {

	// The portion of the cache memory that is persistent, measured in MiB.
	PersistentCacheSizeMiB *int64 `json:"PersistentCacheSizeMiB,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The total configured cache memory, measured in MiB.
	TotalCacheSizeMiB *int64 `json:"TotalCacheSizeMiB"`
}

// AssertStorageV1151CacheSummaryRequired checks if the required fields are not zero-ed
func AssertStorageV1151CacheSummaryRequired(obj StorageV1151CacheSummary) error {
	elements := map[string]interface{}{
		"TotalCacheSizeMiB": obj.TotalCacheSizeMiB,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertStorageV1151CacheSummaryConstraints checks if the values respects the defined constraints
func AssertStorageV1151CacheSummaryConstraints(obj StorageV1151CacheSummary) error {
	if obj.PersistentCacheSizeMiB != nil && *obj.PersistentCacheSizeMiB < 0 {
		return &ParsingError{Param: "PersistentCacheSizeMiB", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if obj.TotalCacheSizeMiB != nil && *obj.TotalCacheSizeMiB < 0 {
		return &ParsingError{Param: "TotalCacheSizeMiB", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
