// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ComputerSystemBootSource string

// List of ComputerSystemBootSource
const (
	COMPUTERSYSTEMBOOTSOURCE_NONE           ComputerSystemBootSource = "None"
	COMPUTERSYSTEMBOOTSOURCE_PXE            ComputerSystemBootSource = "Pxe"
	COMPUTERSYSTEMBOOTSOURCE_FLOPPY         ComputerSystemBootSource = "Floppy"
	COMPUTERSYSTEMBOOTSOURCE_CD             ComputerSystemBootSource = "Cd"
	COMPUTERSYSTEMBOOTSOURCE_USB            ComputerSystemBootSource = "Usb"
	COMPUTERSYSTEMBOOTSOURCE_HDD            ComputerSystemBootSource = "Hdd"
	COMPUTERSYSTEMBOOTSOURCE_BIOS_SETUP     ComputerSystemBootSource = "BiosSetup"
	COMPUTERSYSTEMBOOTSOURCE_UTILITIES      ComputerSystemBootSource = "Utilities"
	COMPUTERSYSTEMBOOTSOURCE_DIAGS          ComputerSystemBootSource = "Diags"
	COMPUTERSYSTEMBOOTSOURCE_UEFI_SHELL     ComputerSystemBootSource = "UefiShell"
	COMPUTERSYSTEMBOOTSOURCE_UEFI_TARGET    ComputerSystemBootSource = "UefiTarget"
	COMPUTERSYSTEMBOOTSOURCE_SD_CARD        ComputerSystemBootSource = "SDCard"
	COMPUTERSYSTEMBOOTSOURCE_UEFI_HTTP      ComputerSystemBootSource = "UefiHttp"
	COMPUTERSYSTEMBOOTSOURCE_REMOTE_DRIVE   ComputerSystemBootSource = "RemoteDrive"
	COMPUTERSYSTEMBOOTSOURCE_UEFI_BOOT_NEXT ComputerSystemBootSource = "UefiBootNext"
	COMPUTERSYSTEMBOOTSOURCE_RECOVERY       ComputerSystemBootSource = "Recovery"
)

// AllowedComputerSystemBootSourceEnumValues is all the allowed values of ComputerSystemBootSource enum
var AllowedComputerSystemBootSourceEnumValues = []ComputerSystemBootSource{
	"None",
	"Pxe",
	"Floppy",
	"Cd",
	"Usb",
	"Hdd",
	"BiosSetup",
	"Utilities",
	"Diags",
	"UefiShell",
	"UefiTarget",
	"SDCard",
	"UefiHttp",
	"RemoteDrive",
	"UefiBootNext",
	"Recovery",
}

// validComputerSystemBootSourceEnumValue provides a map of ComputerSystemBootSources for fast verification of use input
var validComputerSystemBootSourceEnumValues = map[ComputerSystemBootSource]struct{}{
	"None":         {},
	"Pxe":          {},
	"Floppy":       {},
	"Cd":           {},
	"Usb":          {},
	"Hdd":          {},
	"BiosSetup":    {},
	"Utilities":    {},
	"Diags":        {},
	"UefiShell":    {},
	"UefiTarget":   {},
	"SDCard":       {},
	"UefiHttp":     {},
	"RemoteDrive":  {},
	"UefiBootNext": {},
	"Recovery":     {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ComputerSystemBootSource) IsValid() bool {
	_, ok := validComputerSystemBootSourceEnumValues[v]
	return ok
}

// NewComputerSystemBootSourceFromValue returns a pointer to a valid ComputerSystemBootSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewComputerSystemBootSourceFromValue(v string) (ComputerSystemBootSource, error) {
	ev := ComputerSystemBootSource(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ComputerSystemBootSource: valid values are %v", v, AllowedComputerSystemBootSourceEnumValues)
}

// AssertComputerSystemBootSourceRequired checks if the required fields are not zero-ed
func AssertComputerSystemBootSourceRequired(obj ComputerSystemBootSource) error {
	return nil
}

// AssertComputerSystemBootSourceConstraints checks if the values respects the defined constraints
func AssertComputerSystemBootSourceConstraints(obj ComputerSystemBootSource) error {
	return nil
}
