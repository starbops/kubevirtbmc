// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PumpV101PumpType string

// List of PumpV101PumpType
const (
	PUMPV101PUMPTYPE_LIQUID     PumpV101PumpType = "Liquid"
	PUMPV101PUMPTYPE_COMPRESSOR PumpV101PumpType = "Compressor"
)

// AllowedPumpV101PumpTypeEnumValues is all the allowed values of PumpV101PumpType enum
var AllowedPumpV101PumpTypeEnumValues = []PumpV101PumpType{
	"Liquid",
	"Compressor",
}

// validPumpV101PumpTypeEnumValue provides a map of PumpV101PumpTypes for fast verification of use input
var validPumpV101PumpTypeEnumValues = map[PumpV101PumpType]struct{}{
	"Liquid":     {},
	"Compressor": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PumpV101PumpType) IsValid() bool {
	_, ok := validPumpV101PumpTypeEnumValues[v]
	return ok
}

// NewPumpV101PumpTypeFromValue returns a pointer to a valid PumpV101PumpType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPumpV101PumpTypeFromValue(v string) (PumpV101PumpType, error) {
	ev := PumpV101PumpType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PumpV101PumpType: valid values are %v", v, AllowedPumpV101PumpTypeEnumValues)
}

// AssertPumpV101PumpTypeRequired checks if the required fields are not zero-ed
func AssertPumpV101PumpTypeRequired(obj PumpV101PumpType) error {
	return nil
}

// AssertPumpV101PumpTypeConstraints checks if the values respects the defined constraints
func AssertPumpV101PumpTypeConstraints(obj PumpV101PumpType) error {
	return nil
}
