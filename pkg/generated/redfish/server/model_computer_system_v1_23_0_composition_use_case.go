// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2024.3
 */

package server

import (
	"fmt"
)

type ComputerSystemV1230CompositionUseCase string

// List of ComputerSystemV1230CompositionUseCase
const (
	COMPUTERSYSTEMV1230COMPOSITIONUSECASE_RESOURCE_BLOCK_CAPABLE ComputerSystemV1230CompositionUseCase = "ResourceBlockCapable"
	COMPUTERSYSTEMV1230COMPOSITIONUSECASE_EXPANDABLE_SYSTEM      ComputerSystemV1230CompositionUseCase = "ExpandableSystem"
)

// AllowedComputerSystemV1230CompositionUseCaseEnumValues is all the allowed values of ComputerSystemV1230CompositionUseCase enum
var AllowedComputerSystemV1230CompositionUseCaseEnumValues = []ComputerSystemV1230CompositionUseCase{
	"ResourceBlockCapable",
	"ExpandableSystem",
}

// validComputerSystemV1230CompositionUseCaseEnumValue provides a map of ComputerSystemV1230CompositionUseCases for fast verification of use input
var validComputerSystemV1230CompositionUseCaseEnumValues = map[ComputerSystemV1230CompositionUseCase]struct{}{
	"ResourceBlockCapable": {},
	"ExpandableSystem":     {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ComputerSystemV1230CompositionUseCase) IsValid() bool {
	_, ok := validComputerSystemV1230CompositionUseCaseEnumValues[v]
	return ok
}

// NewComputerSystemV1230CompositionUseCaseFromValue returns a pointer to a valid ComputerSystemV1230CompositionUseCase
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewComputerSystemV1230CompositionUseCaseFromValue(v string) (ComputerSystemV1230CompositionUseCase, error) {
	ev := ComputerSystemV1230CompositionUseCase(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ComputerSystemV1230CompositionUseCase: valid values are %v", v, AllowedComputerSystemV1230CompositionUseCaseEnumValues)
}

// AssertComputerSystemV1230CompositionUseCaseRequired checks if the required fields are not zero-ed
func AssertComputerSystemV1230CompositionUseCaseRequired(obj ComputerSystemV1230CompositionUseCase) error {
	return nil
}

// AssertComputerSystemV1230CompositionUseCaseConstraints checks if the values respects the defined constraints
func AssertComputerSystemV1230CompositionUseCaseConstraints(obj ComputerSystemV1230CompositionUseCase) error {
	return nil
}
