// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2024.3
 */

package server

import (
	"fmt"
)

type ResourcePowerState string

// List of ResourcePowerState
const (
	RESOURCEPOWERSTATE_ON           ResourcePowerState = "On"
	RESOURCEPOWERSTATE_OFF          ResourcePowerState = "Off"
	RESOURCEPOWERSTATE_POWERING_ON  ResourcePowerState = "PoweringOn"
	RESOURCEPOWERSTATE_POWERING_OFF ResourcePowerState = "PoweringOff"
	RESOURCEPOWERSTATE_PAUSED       ResourcePowerState = "Paused"
)

// AllowedResourcePowerStateEnumValues is all the allowed values of ResourcePowerState enum
var AllowedResourcePowerStateEnumValues = []ResourcePowerState{
	"On",
	"Off",
	"PoweringOn",
	"PoweringOff",
	"Paused",
}

// validResourcePowerStateEnumValue provides a map of ResourcePowerStates for fast verification of use input
var validResourcePowerStateEnumValues = map[ResourcePowerState]struct{}{
	"On":          {},
	"Off":         {},
	"PoweringOn":  {},
	"PoweringOff": {},
	"Paused":      {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourcePowerState) IsValid() bool {
	_, ok := validResourcePowerStateEnumValues[v]
	return ok
}

// NewResourcePowerStateFromValue returns a pointer to a valid ResourcePowerState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourcePowerStateFromValue(v string) (ResourcePowerState, error) {
	ev := ResourcePowerState(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ResourcePowerState: valid values are %v", v, AllowedResourcePowerStateEnumValues)
}

// AssertResourcePowerStateRequired checks if the required fields are not zero-ed
func AssertResourcePowerStateRequired(obj ResourcePowerState) error {
	return nil
}

// AssertResourcePowerStateConstraints checks if the values respects the defined constraints
func AssertResourcePowerStateConstraints(obj ResourcePowerState) error {
	return nil
}
