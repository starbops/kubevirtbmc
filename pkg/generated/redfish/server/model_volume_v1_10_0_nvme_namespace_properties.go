// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// VolumeV1100NvmeNamespaceProperties - This contains properties to use when Volume is used to describe an NVMe Namespace.
type VolumeV1100NvmeNamespaceProperties struct {

	// The LBA data size and metadata size combination that the namespace has been formatted with.
	FormattedLBASize *string `json:"FormattedLBASize,omitempty"`

	// Indicates the namespace is shareable.
	IsShareable *bool `json:"IsShareable,omitempty"`

	LBAFormat *VolumeV1100LbaFormat `json:"LBAFormat,omitempty"`

	// Describes the LBA format IDs and detailed properties.
	LBAFormats []VolumeV1100NvmeNamespacePropertiesLbaFormatsInner `json:"LBAFormats,omitempty"`

	// A list of the LBA format types supported for the namespace, or potential namespaces.
	LBAFormatsSupported []VolumeV1100NvmeNamespacePropertiesLbaFormatsSupportedInner `json:"LBAFormatsSupported,omitempty"`

	// This property indicates whether or not the metadata is transferred at the end of the LBA creating an extended data LBA.
	MetadataTransferredAtEndOfDataLBA *bool `json:"MetadataTransferredAtEndOfDataLBA,omitempty"`

	// The version of the NVMe Base Specification supported.
	NVMeVersion *string `json:"NVMeVersion,omitempty"`

	NamespaceFeatures *VolumeV1100NamespaceFeatures `json:"NamespaceFeatures,omitempty"`

	// The NVMe Namespace Identifier for this namespace.
	NamespaceId *string `json:"NamespaceId,omitempty" validate:"regexp=^0[xX](([a-fA-F]|[0-9])*)$"`

	NamespaceType *VolumeNamespaceType `json:"NamespaceType,omitempty"`

	// The number of LBA data size and metadata size combinations supported by this namespace. The value of this property is between 0 and 16.
	NumberLBAFormats *int64 `json:"NumberLBAFormats,omitempty"`

	// Indicates whether the namespace supports IO performance hints.
	SupportsIOPerformanceHints *bool `json:"SupportsIOPerformanceHints,omitempty"`

	// Indicates whether the namespace may be attached to two or more controllers.
	SupportsMultipleNamespaceAttachments *bool `json:"SupportsMultipleNamespaceAttachments,omitempty"`

	Type *VolumeNamespaceType `json:"Type,omitempty"`
}

// AssertVolumeV1100NvmeNamespacePropertiesRequired checks if the required fields are not zero-ed
func AssertVolumeV1100NvmeNamespacePropertiesRequired(obj VolumeV1100NvmeNamespaceProperties) error {
	if obj.LBAFormat != nil {
		if err := AssertVolumeV1100LbaFormatRequired(*obj.LBAFormat); err != nil {
			return err
		}
	}
	for _, el := range obj.LBAFormats {
		if err := AssertVolumeV1100NvmeNamespacePropertiesLbaFormatsInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.LBAFormatsSupported {
		if err := AssertVolumeV1100NvmeNamespacePropertiesLbaFormatsSupportedInnerRequired(el); err != nil {
			return err
		}
	}
	if obj.NamespaceFeatures != nil {
		if err := AssertVolumeV1100NamespaceFeaturesRequired(*obj.NamespaceFeatures); err != nil {
			return err
		}
	}
	return nil
}

// AssertVolumeV1100NvmeNamespacePropertiesConstraints checks if the values respects the defined constraints
func AssertVolumeV1100NvmeNamespacePropertiesConstraints(obj VolumeV1100NvmeNamespaceProperties) error {
	if obj.LBAFormat != nil {
		if err := AssertVolumeV1100LbaFormatConstraints(*obj.LBAFormat); err != nil {
			return err
		}
	}
	for _, el := range obj.LBAFormats {
		if err := AssertVolumeV1100NvmeNamespacePropertiesLbaFormatsInnerConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.LBAFormatsSupported {
		if err := AssertVolumeV1100NvmeNamespacePropertiesLbaFormatsSupportedInnerConstraints(el); err != nil {
			return err
		}
	}
	if obj.NamespaceFeatures != nil {
		if err := AssertVolumeV1100NamespaceFeaturesConstraints(*obj.NamespaceFeatures); err != nil {
			return err
		}
	}
	if obj.NumberLBAFormats != nil && *obj.NumberLBAFormats < 0 {
		return &ParsingError{Param: "NumberLBAFormats", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
