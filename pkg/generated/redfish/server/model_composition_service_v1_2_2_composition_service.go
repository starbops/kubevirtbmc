// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// CompositionServiceV122CompositionService - The CompositionService schema describes a composition service and its properties and links to the resources available for composition.
type CompositionServiceV122CompositionService struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions CompositionServiceV122Actions `json:"Actions,omitempty"`

	ActivePool OdataV4IdRef `json:"ActivePool,omitempty"`

	// An indication of whether this service is allowed to overprovision a composition relative to the composition request.
	AllowOverprovisioning *bool `json:"AllowOverprovisioning,omitempty"`

	// An indication of whether a client can request that a specific resource zone fulfill a composition request.
	AllowZoneAffinity *bool `json:"AllowZoneAffinity,omitempty"`

	CompositionReservations OdataV4IdRef `json:"CompositionReservations,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	FreePool OdataV4IdRef `json:"FreePool,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The length of time a composition reservation is held before the service deletes the reservation and marks any related resource blocks as no longer reserved.
	ReservationDuration *string `json:"ReservationDuration,omitempty" validate:"regexp=^P(\\\\d+D)?(T(\\\\d+H)?(\\\\d+M)?(\\\\d+(.\\\\d+)?S)?)?$"`

	ResourceBlocks OdataV4IdRef `json:"ResourceBlocks,omitempty"`

	ResourceZones OdataV4IdRef `json:"ResourceZones,omitempty"`

	// An indication of whether this service is enabled.
	ServiceEnabled *bool `json:"ServiceEnabled,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertCompositionServiceV122CompositionServiceRequired checks if the required fields are not zero-ed
func AssertCompositionServiceV122CompositionServiceRequired(obj CompositionServiceV122CompositionService) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCompositionServiceV122ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.ActivePool); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.CompositionReservations); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.FreePool); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.ResourceBlocks); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.ResourceZones); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertCompositionServiceV122CompositionServiceConstraints checks if the values respects the defined constraints
func AssertCompositionServiceV122CompositionServiceConstraints(obj CompositionServiceV122CompositionService) error {
	if err := AssertCompositionServiceV122ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.ActivePool); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.CompositionReservations); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.FreePool); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.ResourceBlocks); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.ResourceZones); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
