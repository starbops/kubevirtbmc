// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// EventDestinationV1140EventDestination - The EventDestination schema defines the target of an event subscription, including the event types and context to provide to the target in the event payload.
type EventDestinationV1140EventDestination struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions EventDestinationV1140Actions `json:"Actions,omitempty"`

	Certificates OdataV4IdRef `json:"Certificates,omitempty"`

	ClientCertificates OdataV4IdRef `json:"ClientCertificates,omitempty"`

	// A client-supplied string that is stored with the event destination subscription.
	Context *string `json:"Context"`

	DeliveryRetryPolicy EventDestinationV1140DeliveryRetryPolicy `json:"DeliveryRetryPolicy,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The URI of the destination event receiver.
	Destination string `json:"Destination,omitempty"`

	EventFormatType EventDestinationEventFormatType `json:"EventFormatType,omitempty"`

	// The types of events that are sent to the destination.
	// Deprecated
	EventTypes []EventEventType `json:"EventTypes,omitempty"`

	// The list of MessageIds that are not sent to this event destination.
	ExcludeMessageIds []*string `json:"ExcludeMessageIds,omitempty"`

	// The list of prefixes for the message registries that contain the MessageIds that are not sent to this event destination.
	ExcludeRegistryPrefixes []*string `json:"ExcludeRegistryPrefixes,omitempty"`

	// Interval for sending heartbeat events to the destination in minutes.
	HeartbeatIntervalMinutes *int64 `json:"HeartbeatIntervalMinutes,omitempty"`

	// An array of settings for HTTP headers, such as authorization information.  This array is `null` or an empty array in responses.  An empty array is the preferred return value on read operations.
	HttpHeaders []map[string]interface{} `json:"HttpHeaders,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// An indication of whether the events subscribed to will also include the entire resource or object referenced by the OriginOfCondition property in the event payload.
	IncludeOriginOfCondition *bool `json:"IncludeOriginOfCondition,omitempty"`

	// The list of MessageIds that are sent to this event destination.
	MessageIds []*string `json:"MessageIds,omitempty"`

	// A list of metric report definitions for which the service only sends related metric reports.  If this property is absent or the array is empty, metric reports that originate from any metric report definition are sent to the subscriber.
	MetricReportDefinitions []OdataV4IdRef `json:"MetricReportDefinitions,omitempty"`

	// The number of items in a collection.
	MetricReportDefinitionsodataCount int64 `json:"MetricReportDefinitions@odata.count,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM-defined protocol type of the event connection.
	OEMProtocol string `json:"OEMProtocol,omitempty"`

	// The OEM-defined subscription type for events.
	OEMSubscriptionType string `json:"OEMSubscriptionType,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The array of resources for which the service sends only related events.
	OriginResources []OdataV4IdRef `json:"OriginResources,omitempty"`

	// The number of items in a collection.
	OriginResourcesodataCount int64 `json:"OriginResources@odata.count,omitempty"`

	Protocol EventDestinationV1140EventDestinationProtocol `json:"Protocol,omitempty"`

	// The list of prefixes for the message registries that contain the MessageIds that are sent to this event destination.
	RegistryPrefixes []*string `json:"RegistryPrefixes,omitempty"`

	// The list of resource type values (schema names) that correspond to the OriginOfCondition.  The version and full namespace should not be specified.
	ResourceTypes []*string `json:"ResourceTypes,omitempty"`

	SNMP EventDestinationV1140SnmpSettings `json:"SNMP,omitempty"`

	// Send a heartbeat event periodically to the destination.
	SendHeartbeat *bool `json:"SendHeartbeat,omitempty"`

	// The list of severities that are sent to this event destination.
	Severities []ResourceHealth `json:"Severities,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// An indication of whether the subscription is for events in the OriginResources array and its subordinate resources.  If `true` and the OriginResources array is specified, the subscription is for events in the OriginResources array and its subordinate resources.  Note that resources associated through the Links section are not considered subordinate.  If `false` and the OriginResources array is specified, the subscription is for events in the OriginResources array only.  If the OriginResources array is not present, this property has no relevance.
	SubordinateResources *bool `json:"SubordinateResources,omitempty"`

	SubscriptionType EventDestinationV1140SubscriptionType `json:"SubscriptionType"`

	// A list of filters applied to syslog messages before sending to a remote syslog server.  An empty list indicates all syslog messages are sent.
	SyslogFilters []EventDestinationV1140SyslogFilter `json:"SyslogFilters,omitempty"`

	// An indication of whether the service will verify the certificate of the server referenced by the Destination property prior to sending the event.
	VerifyCertificate *bool `json:"VerifyCertificate,omitempty"`
}

// AssertEventDestinationV1140EventDestinationRequired checks if the required fields are not zero-ed
func AssertEventDestinationV1140EventDestinationRequired(obj EventDestinationV1140EventDestination) error {
	elements := map[string]interface{}{
		"@odata.id":        obj.OdataId,
		"@odata.type":      obj.OdataType,
		"Context":          obj.Context,
		"Id":               obj.Id,
		"Name":             obj.Name,
		"SubscriptionType": obj.SubscriptionType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertEventDestinationV1140ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Certificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.ClientCertificates); err != nil {
		return err
	}
	for _, el := range obj.MetricReportDefinitions {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.OriginResources {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertEventDestinationV1140SnmpSettingsRequired(obj.SNMP); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.SyslogFilters {
		if err := AssertEventDestinationV1140SyslogFilterRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertEventDestinationV1140EventDestinationConstraints checks if the values respects the defined constraints
func AssertEventDestinationV1140EventDestinationConstraints(obj EventDestinationV1140EventDestination) error {
	if err := AssertEventDestinationV1140ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Certificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.ClientCertificates); err != nil {
		return err
	}
	if obj.HeartbeatIntervalMinutes != nil && *obj.HeartbeatIntervalMinutes < 1 {
		return &ParsingError{Param: "HeartbeatIntervalMinutes", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.HeartbeatIntervalMinutes != nil && *obj.HeartbeatIntervalMinutes > 65535 {
		return &ParsingError{Param: "HeartbeatIntervalMinutes", Err: errors.New(errMsgMaxValueConstraint)}
	}
	for _, el := range obj.MetricReportDefinitions {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.OriginResources {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertEventDestinationV1140SnmpSettingsConstraints(obj.SNMP); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.SyslogFilters {
		if err := AssertEventDestinationV1140SyslogFilterConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
