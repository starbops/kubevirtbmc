// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ManagerV1190ManagerType string

// List of ManagerV1190ManagerType
const (
	MANAGERV1190MANAGERTYPE_MANAGEMENT_CONTROLLER ManagerV1190ManagerType = "ManagementController"
	MANAGERV1190MANAGERTYPE_ENCLOSURE_MANAGER     ManagerV1190ManagerType = "EnclosureManager"
	MANAGERV1190MANAGERTYPE_BMC                   ManagerV1190ManagerType = "BMC"
	MANAGERV1190MANAGERTYPE_RACK_MANAGER          ManagerV1190ManagerType = "RackManager"
	MANAGERV1190MANAGERTYPE_AUXILIARY_CONTROLLER  ManagerV1190ManagerType = "AuxiliaryController"
	MANAGERV1190MANAGERTYPE_SERVICE               ManagerV1190ManagerType = "Service"
)

// AllowedManagerV1190ManagerTypeEnumValues is all the allowed values of ManagerV1190ManagerType enum
var AllowedManagerV1190ManagerTypeEnumValues = []ManagerV1190ManagerType{
	"ManagementController",
	"EnclosureManager",
	"BMC",
	"RackManager",
	"AuxiliaryController",
	"Service",
}

// validManagerV1190ManagerTypeEnumValue provides a map of ManagerV1190ManagerTypes for fast verification of use input
var validManagerV1190ManagerTypeEnumValues = map[ManagerV1190ManagerType]struct{}{
	"ManagementController": {},
	"EnclosureManager":     {},
	"BMC":                  {},
	"RackManager":          {},
	"AuxiliaryController":  {},
	"Service":              {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ManagerV1190ManagerType) IsValid() bool {
	_, ok := validManagerV1190ManagerTypeEnumValues[v]
	return ok
}

// NewManagerV1190ManagerTypeFromValue returns a pointer to a valid ManagerV1190ManagerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewManagerV1190ManagerTypeFromValue(v string) (ManagerV1190ManagerType, error) {
	ev := ManagerV1190ManagerType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ManagerV1190ManagerType: valid values are %v", v, AllowedManagerV1190ManagerTypeEnumValues)
}

// AssertManagerV1190ManagerTypeRequired checks if the required fields are not zero-ed
func AssertManagerV1190ManagerTypeRequired(obj ManagerV1190ManagerType) error {
	return nil
}

// AssertManagerV1190ManagerTypeConstraints checks if the values respects the defined constraints
func AssertManagerV1190ManagerTypeConstraints(obj ManagerV1190ManagerType) error {
	return nil
}
