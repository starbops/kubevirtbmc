// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// MetricDefinitionV133MetricDataType : The data type of the related metric values.  Provides information to the client on the nature of the metric reading.
type MetricDefinitionV133MetricDataType string

// List of MetricDefinitionV133MetricDataType
const (
	METRICDEFINITIONV133METRICDATATYPE_BOOLEAN     MetricDefinitionV133MetricDataType = "Boolean"
	METRICDEFINITIONV133METRICDATATYPE_DATE_TIME   MetricDefinitionV133MetricDataType = "DateTime"
	METRICDEFINITIONV133METRICDATATYPE_DECIMAL     MetricDefinitionV133MetricDataType = "Decimal"
	METRICDEFINITIONV133METRICDATATYPE_INTEGER     MetricDefinitionV133MetricDataType = "Integer"
	METRICDEFINITIONV133METRICDATATYPE_STRING      MetricDefinitionV133MetricDataType = "String"
	METRICDEFINITIONV133METRICDATATYPE_ENUMERATION MetricDefinitionV133MetricDataType = "Enumeration"
)

// AllowedMetricDefinitionV133MetricDataTypeEnumValues is all the allowed values of MetricDefinitionV133MetricDataType enum
var AllowedMetricDefinitionV133MetricDataTypeEnumValues = []MetricDefinitionV133MetricDataType{
	"Boolean",
	"DateTime",
	"Decimal",
	"Integer",
	"String",
	"Enumeration",
}

// validMetricDefinitionV133MetricDataTypeEnumValue provides a map of MetricDefinitionV133MetricDataTypes for fast verification of use input
var validMetricDefinitionV133MetricDataTypeEnumValues = map[MetricDefinitionV133MetricDataType]struct{}{
	"Boolean":     {},
	"DateTime":    {},
	"Decimal":     {},
	"Integer":     {},
	"String":      {},
	"Enumeration": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricDefinitionV133MetricDataType) IsValid() bool {
	_, ok := validMetricDefinitionV133MetricDataTypeEnumValues[v]
	return ok
}

// NewMetricDefinitionV133MetricDataTypeFromValue returns a pointer to a valid MetricDefinitionV133MetricDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricDefinitionV133MetricDataTypeFromValue(v string) (MetricDefinitionV133MetricDataType, error) {
	ev := MetricDefinitionV133MetricDataType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for MetricDefinitionV133MetricDataType: valid values are %v", v, AllowedMetricDefinitionV133MetricDataTypeEnumValues)
}

// AssertMetricDefinitionV133MetricDataTypeRequired checks if the required fields are not zero-ed
func AssertMetricDefinitionV133MetricDataTypeRequired(obj MetricDefinitionV133MetricDataType) error {
	return nil
}

// AssertMetricDefinitionV133MetricDataTypeConstraints checks if the values respects the defined constraints
func AssertMetricDefinitionV133MetricDataTypeConstraints(obj MetricDefinitionV133MetricDataType) error {
	return nil
}
