// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// PcieDeviceV1130Links - The links to other resources that are related to this resource.
type PcieDeviceV1130Links struct {

	// An array of links to the chassis in which the PCIe device is contained.
	Chassis []OdataV4IdRef `json:"Chassis,omitempty"`

	// The number of items in a collection.
	ChassisodataCount int64 `json:"Chassis@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An array of links to PCIe functions exposed by this device.
	// Deprecated
	PCIeFunctions []OdataV4IdRef `json:"PCIeFunctions,omitempty"`

	// The number of items in a collection.
	PCIeFunctionsodataCount int64 `json:"PCIeFunctions@odata.count,omitempty"`

	// An array of links to the processors that are directly connected or directly bridged to this PCIe device.
	Processors []OdataV4IdRef `json:"Processors,omitempty"`

	// The number of items in a collection.
	ProcessorsodataCount int64 `json:"Processors@odata.count,omitempty"`

	Switch OdataV4IdRef `json:"Switch,omitempty"`
}

// AssertPcieDeviceV1130LinksRequired checks if the required fields are not zero-ed
func AssertPcieDeviceV1130LinksRequired(obj PcieDeviceV1130Links) error {
	for _, el := range obj.Chassis {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PCIeFunctions {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Processors {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.Switch); err != nil {
		return err
	}
	return nil
}

// AssertPcieDeviceV1130LinksConstraints checks if the values respects the defined constraints
func AssertPcieDeviceV1130LinksConstraints(obj PcieDeviceV1130Links) error {
	for _, el := range obj.Chassis {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PCIeFunctions {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Processors {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.Switch); err != nil {
		return err
	}
	return nil
}
