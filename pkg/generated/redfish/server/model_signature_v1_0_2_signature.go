// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// SignatureV102Signature - The Signature schema describes a signature or a hash.
type SignatureV102Signature struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions SignatureV102Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The string for the signature.
	SignatureString *string `json:"SignatureString,omitempty"`

	// The format of the signature.
	SignatureType *string `json:"SignatureType,omitempty"`

	SignatureTypeRegistry SignatureSignatureTypeRegistry `json:"SignatureTypeRegistry,omitempty"`

	// The UEFI signature owner for this signature.
	UefiSignatureOwner *string `json:"UefiSignatureOwner,omitempty" validate:"regexp=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"`
}

// AssertSignatureV102SignatureRequired checks if the required fields are not zero-ed
func AssertSignatureV102SignatureRequired(obj SignatureV102Signature) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSignatureV102ActionsRequired(obj.Actions); err != nil {
		return err
	}
	return nil
}

// AssertSignatureV102SignatureConstraints checks if the values respects the defined constraints
func AssertSignatureV102SignatureConstraints(obj SignatureV102Signature) error {
	if err := AssertSignatureV102ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	return nil
}
