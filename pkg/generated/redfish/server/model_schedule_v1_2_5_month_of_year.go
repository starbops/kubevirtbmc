// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// ScheduleV125MonthOfYear : Months of the year.
type ScheduleV125MonthOfYear string

// List of ScheduleV125MonthOfYear
const (
	SCHEDULEV125MONTHOFYEAR_JANUARY   ScheduleV125MonthOfYear = "January"
	SCHEDULEV125MONTHOFYEAR_FEBRUARY  ScheduleV125MonthOfYear = "February"
	SCHEDULEV125MONTHOFYEAR_MARCH     ScheduleV125MonthOfYear = "March"
	SCHEDULEV125MONTHOFYEAR_APRIL     ScheduleV125MonthOfYear = "April"
	SCHEDULEV125MONTHOFYEAR_MAY       ScheduleV125MonthOfYear = "May"
	SCHEDULEV125MONTHOFYEAR_JUNE      ScheduleV125MonthOfYear = "June"
	SCHEDULEV125MONTHOFYEAR_JULY      ScheduleV125MonthOfYear = "July"
	SCHEDULEV125MONTHOFYEAR_AUGUST    ScheduleV125MonthOfYear = "August"
	SCHEDULEV125MONTHOFYEAR_SEPTEMBER ScheduleV125MonthOfYear = "September"
	SCHEDULEV125MONTHOFYEAR_OCTOBER   ScheduleV125MonthOfYear = "October"
	SCHEDULEV125MONTHOFYEAR_NOVEMBER  ScheduleV125MonthOfYear = "November"
	SCHEDULEV125MONTHOFYEAR_DECEMBER  ScheduleV125MonthOfYear = "December"
	SCHEDULEV125MONTHOFYEAR_EVERY     ScheduleV125MonthOfYear = "Every"
)

// AllowedScheduleV125MonthOfYearEnumValues is all the allowed values of ScheduleV125MonthOfYear enum
var AllowedScheduleV125MonthOfYearEnumValues = []ScheduleV125MonthOfYear{
	"January",
	"February",
	"March",
	"April",
	"May",
	"June",
	"July",
	"August",
	"September",
	"October",
	"November",
	"December",
	"Every",
}

// validScheduleV125MonthOfYearEnumValue provides a map of ScheduleV125MonthOfYears for fast verification of use input
var validScheduleV125MonthOfYearEnumValues = map[ScheduleV125MonthOfYear]struct{}{
	"January":   {},
	"February":  {},
	"March":     {},
	"April":     {},
	"May":       {},
	"June":      {},
	"July":      {},
	"August":    {},
	"September": {},
	"October":   {},
	"November":  {},
	"December":  {},
	"Every":     {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScheduleV125MonthOfYear) IsValid() bool {
	_, ok := validScheduleV125MonthOfYearEnumValues[v]
	return ok
}

// NewScheduleV125MonthOfYearFromValue returns a pointer to a valid ScheduleV125MonthOfYear
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScheduleV125MonthOfYearFromValue(v string) (ScheduleV125MonthOfYear, error) {
	ev := ScheduleV125MonthOfYear(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ScheduleV125MonthOfYear: valid values are %v", v, AllowedScheduleV125MonthOfYearEnumValues)
}

// AssertScheduleV125MonthOfYearRequired checks if the required fields are not zero-ed
func AssertScheduleV125MonthOfYearRequired(obj ScheduleV125MonthOfYear) error {
	return nil
}

// AssertScheduleV125MonthOfYearConstraints checks if the values respects the defined constraints
func AssertScheduleV125MonthOfYearConstraints(obj ScheduleV125MonthOfYear) error {
	return nil
}
