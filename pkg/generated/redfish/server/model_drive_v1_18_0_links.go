// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// DriveV1180Links - The links to other resources that are related to this resource.
type DriveV1180Links struct {
	ActiveSoftwareImage OdataV4IdRef `json:"ActiveSoftwareImage,omitempty"`

	Chassis OdataV4IdRef `json:"Chassis,omitempty"`

	// An array of links to the endpoints that connect to this drive.
	Endpoints []OdataV4IdRef `json:"Endpoints,omitempty"`

	// The number of items in a collection.
	EndpointsodataCount int64 `json:"Endpoints@odata.count,omitempty"`

	// An array of links to the network device functions that provide network connectivity for this drive.
	NetworkDeviceFunctions []OdataV4IdRef `json:"NetworkDeviceFunctions,omitempty"`

	// The number of items in a collection.
	NetworkDeviceFunctionsodataCount int64 `json:"NetworkDeviceFunctions@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An array of links to the PCIe functions that the drive produces.
	PCIeFunctions []OdataV4IdRef `json:"PCIeFunctions,omitempty"`

	// The number of items in a collection.
	PCIeFunctionsodataCount int64 `json:"PCIeFunctions@odata.count,omitempty"`

	// The images that are associated with this drive.
	SoftwareImages []OdataV4IdRef `json:"SoftwareImages,omitempty"`

	// The number of items in a collection.
	SoftwareImagesodataCount int64 `json:"SoftwareImages@odata.count,omitempty"`

	Storage OdataV4IdRef `json:"Storage,omitempty"`

	// An array of links to the storage pools to which this drive belongs.
	StoragePools []OdataV4IdRef `json:"StoragePools,omitempty"`

	// The number of items in a collection.
	StoragePoolsodataCount int64 `json:"StoragePools@odata.count,omitempty"`

	// An array of links to the volumes that this drive either wholly or only partially contains.
	Volumes []OdataV4IdRef `json:"Volumes,omitempty"`

	// The number of items in a collection.
	VolumesodataCount int64 `json:"Volumes@odata.count,omitempty"`
}

// AssertDriveV1180LinksRequired checks if the required fields are not zero-ed
func AssertDriveV1180LinksRequired(obj DriveV1180Links) error {
	if err := AssertOdataV4IdRefRequired(obj.ActiveSoftwareImage); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Chassis); err != nil {
		return err
	}
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NetworkDeviceFunctions {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PCIeFunctions {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SoftwareImages {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.Storage); err != nil {
		return err
	}
	for _, el := range obj.StoragePools {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Volumes {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertDriveV1180LinksConstraints checks if the values respects the defined constraints
func AssertDriveV1180LinksConstraints(obj DriveV1180Links) error {
	if err := AssertOdataV4IdRefConstraints(obj.ActiveSoftwareImage); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Chassis); err != nil {
		return err
	}
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NetworkDeviceFunctions {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PCIeFunctions {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SoftwareImages {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.Storage); err != nil {
		return err
	}
	for _, el := range obj.StoragePools {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Volumes {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
