// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// MemoryChunksV161MemoryChunks - The schema definition of a memory chunk and its configuration.
type MemoryChunksV161MemoryChunks struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions MemoryChunksV161Actions `json:"Actions,omitempty"`

	// Offset of the memory chunk in the address range in MiB.
	AddressRangeOffsetMiB *int64 `json:"AddressRangeOffsetMiB,omitempty"`

	AddressRangeType MemoryChunksV161AddressRangeType `json:"AddressRangeType"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// A user-configurable string to name the memory chunk.
	DisplayName *string `json:"DisplayName,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The interleave sets for the memory chunk.
	InterleaveSets []MemoryChunksV161InterleaveSet `json:"InterleaveSets,omitempty"`

	// An indication of whether memory mirroring is enabled for this memory chunk.
	IsMirrorEnabled *bool `json:"IsMirrorEnabled,omitempty"`

	// An indication of whether sparing is enabled for this memory chunk.
	IsSpare *bool `json:"IsSpare,omitempty"`

	Links MemoryChunksV161Links `json:"Links,omitempty"`

	MediaLocation MemoryChunksV161MediaLocation `json:"MediaLocation,omitempty"`

	// Size of the memory chunk measured in mebibytes (MiB).
	MemoryChunkSizeMiB *int64 `json:"MemoryChunkSizeMiB,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	RequestedOperationalState MemoryChunksV161OperationalState `json:"RequestedOperationalState,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertMemoryChunksV161MemoryChunksRequired checks if the required fields are not zero-ed
func AssertMemoryChunksV161MemoryChunksRequired(obj MemoryChunksV161MemoryChunks) error {
	elements := map[string]interface{}{
		"@odata.id":        obj.OdataId,
		"@odata.type":      obj.OdataType,
		"AddressRangeType": obj.AddressRangeType,
		"Id":               obj.Id,
		"Name":             obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertMemoryChunksV161ActionsRequired(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.InterleaveSets {
		if err := AssertMemoryChunksV161InterleaveSetRequired(el); err != nil {
			return err
		}
	}
	if err := AssertMemoryChunksV161LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertMemoryChunksV161MemoryChunksConstraints checks if the values respects the defined constraints
func AssertMemoryChunksV161MemoryChunksConstraints(obj MemoryChunksV161MemoryChunks) error {
	if err := AssertMemoryChunksV161ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.InterleaveSets {
		if err := AssertMemoryChunksV161InterleaveSetConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertMemoryChunksV161LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
