// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// ProcessorV1190Links - The links to other resources that are related to this resource.
type ProcessorV1190Links struct {
	Chassis OdataV4IdRef `json:"Chassis,omitempty"`

	// An array of links to the processors directly connected to this processor.
	ConnectedProcessors []OdataV4IdRef `json:"ConnectedProcessors,omitempty"`

	// The number of items in a collection.
	ConnectedProcessorsodataCount int64 `json:"ConnectedProcessors@odata.count,omitempty"`

	// An array of links to the endpoints that connect to this processor.
	Endpoints []OdataV4IdRef `json:"Endpoints,omitempty"`

	// The number of items in a collection.
	EndpointsodataCount int64 `json:"Endpoints@odata.count,omitempty"`

	// An array of links to the fabric adapters that present this processor to a fabric.
	FabricAdapters []OdataV4IdRef `json:"FabricAdapters,omitempty"`

	// The number of items in a collection.
	FabricAdaptersodataCount int64 `json:"FabricAdapters@odata.count,omitempty"`

	GraphicsController OdataV4IdRef `json:"GraphicsController,omitempty"`

	// An array of links to the memory associated with this processor.
	Memory []OdataV4IdRef `json:"Memory,omitempty"`

	// The number of items in a collection.
	MemoryodataCount int64 `json:"Memory@odata.count,omitempty"`

	// The network device functions to which this processor performs offload computation, such as with a SmartNIC.
	NetworkDeviceFunctions []OdataV4IdRef `json:"NetworkDeviceFunctions,omitempty"`

	// The number of items in a collection.
	NetworkDeviceFunctionsodataCount int64 `json:"NetworkDeviceFunctions@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PCIeDevice OdataV4IdRef `json:"PCIeDevice,omitempty"`

	// An array of links to the PCIeFunctions associated with this processor.
	PCIeFunctions []OdataV4IdRef `json:"PCIeFunctions,omitempty"`

	// The number of items in a collection.
	PCIeFunctionsodataCount int64 `json:"PCIeFunctions@odata.count,omitempty"`
}

// AssertProcessorV1190LinksRequired checks if the required fields are not zero-ed
func AssertProcessorV1190LinksRequired(obj ProcessorV1190Links) error {
	if err := AssertOdataV4IdRefRequired(obj.Chassis); err != nil {
		return err
	}
	for _, el := range obj.ConnectedProcessors {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.FabricAdapters {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.GraphicsController); err != nil {
		return err
	}
	for _, el := range obj.Memory {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NetworkDeviceFunctions {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.PCIeDevice); err != nil {
		return err
	}
	for _, el := range obj.PCIeFunctions {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertProcessorV1190LinksConstraints checks if the values respects the defined constraints
func AssertProcessorV1190LinksConstraints(obj ProcessorV1190Links) error {
	if err := AssertOdataV4IdRefConstraints(obj.Chassis); err != nil {
		return err
	}
	for _, el := range obj.ConnectedProcessors {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.FabricAdapters {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.GraphicsController); err != nil {
		return err
	}
	for _, el := range obj.Memory {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NetworkDeviceFunctions {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.PCIeDevice); err != nil {
		return err
	}
	for _, el := range obj.PCIeFunctions {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
