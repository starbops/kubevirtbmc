// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// StorageV1151Storage - The Storage schema defines a storage subsystem and its respective properties.  A storage subsystem represents a set of physical or virtual storage controllers and the resources, such as volumes, that can be accessed from that subsystem.
type StorageV1151Storage struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions StorageV1151Actions `json:"Actions,omitempty"`

	AutoVolumeCreate StorageV1151AutoVolumeCreate `json:"AutoVolumeCreate,omitempty"`

	Connections OdataV4IdRef `json:"Connections,omitempty"`

	ConsistencyGroups OdataV4IdRef `json:"ConsistencyGroups,omitempty"`

	Controllers OdataV4IdRef `json:"Controllers,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The set of drives attached to the storage controllers that this resource represents.
	Drives []OdataV4IdRef `json:"Drives,omitempty"`

	// The number of items in a collection.
	DrivesodataCount int64 `json:"Drives@odata.count,omitempty"`

	EncryptionMode StorageV1151EncryptionMode `json:"EncryptionMode,omitempty"`

	EndpointGroups OdataV4IdRef `json:"EndpointGroups,omitempty"`

	FileSystems OdataV4IdRef `json:"FileSystems,omitempty"`

	HotspareActivationPolicy StorageV1151HotspareActivationPolicy `json:"HotspareActivationPolicy,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The durable names for the storage subsystem.
	Identifiers []ResourceIdentifier `json:"Identifiers,omitempty"`

	Links StorageV1151Links `json:"Links,omitempty"`

	// The local encryption key identifier used by the storage subsystem.
	LocalEncryptionKeyIdentifier *string `json:"LocalEncryptionKeyIdentifier,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// Redundancy information for the storage subsystem.
	Redundancy []RedundancyRedundancy `json:"Redundancy,omitempty"`

	// The number of items in a collection.
	RedundancyodataCount int64 `json:"Redundancy@odata.count,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The set of storage controllers that this resource represents.
	// Deprecated
	StorageControllers []StorageV1151StorageController `json:"StorageControllers,omitempty"`

	// The number of items in a collection.
	StorageControllersodataCount int64 `json:"StorageControllers@odata.count,omitempty"`

	StorageGroups OdataV4IdRef `json:"StorageGroups,omitempty"`

	StoragePools OdataV4IdRef `json:"StoragePools,omitempty"`

	Volumes OdataV4IdRef `json:"Volumes,omitempty"`
}

// AssertStorageV1151StorageRequired checks if the required fields are not zero-ed
func AssertStorageV1151StorageRequired(obj StorageV1151Storage) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertStorageV1151ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Connections); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.ConsistencyGroups); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Controllers); err != nil {
		return err
	}
	for _, el := range obj.Drives {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.EndpointGroups); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.FileSystems); err != nil {
		return err
	}
	for _, el := range obj.Identifiers {
		if err := AssertResourceIdentifierRequired(el); err != nil {
			return err
		}
	}
	if err := AssertStorageV1151LinksRequired(obj.Links); err != nil {
		return err
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.StorageControllers {
		if err := AssertStorageV1151StorageControllerRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.StorageGroups); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.StoragePools); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Volumes); err != nil {
		return err
	}
	return nil
}

// AssertStorageV1151StorageConstraints checks if the values respects the defined constraints
func AssertStorageV1151StorageConstraints(obj StorageV1151Storage) error {
	if err := AssertStorageV1151ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Connections); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.ConsistencyGroups); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Controllers); err != nil {
		return err
	}
	for _, el := range obj.Drives {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.EndpointGroups); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.FileSystems); err != nil {
		return err
	}
	for _, el := range obj.Identifiers {
		if err := AssertResourceIdentifierConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertStorageV1151LinksConstraints(obj.Links); err != nil {
		return err
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.StorageControllers {
		if err := AssertStorageV1151StorageControllerConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.StorageGroups); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.StoragePools); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Volumes); err != nil {
		return err
	}
	return nil
}
