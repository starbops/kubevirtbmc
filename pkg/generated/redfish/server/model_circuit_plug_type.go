// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type CircuitPlugType string

// List of CircuitPlugType
const (
	CIRCUITPLUGTYPE_NEMA_5_15_P             CircuitPlugType = "NEMA_5_15P"
	CIRCUITPLUGTYPE_NEMA_L5_15_P            CircuitPlugType = "NEMA_L5_15P"
	CIRCUITPLUGTYPE_NEMA_5_20_P             CircuitPlugType = "NEMA_5_20P"
	CIRCUITPLUGTYPE_NEMA_L5_20_P            CircuitPlugType = "NEMA_L5_20P"
	CIRCUITPLUGTYPE_NEMA_L5_30_P            CircuitPlugType = "NEMA_L5_30P"
	CIRCUITPLUGTYPE_NEMA_6_15_P             CircuitPlugType = "NEMA_6_15P"
	CIRCUITPLUGTYPE_NEMA_L6_15_P            CircuitPlugType = "NEMA_L6_15P"
	CIRCUITPLUGTYPE_NEMA_6_20_P             CircuitPlugType = "NEMA_6_20P"
	CIRCUITPLUGTYPE_NEMA_L6_20_P            CircuitPlugType = "NEMA_L6_20P"
	CIRCUITPLUGTYPE_NEMA_L6_30_P            CircuitPlugType = "NEMA_L6_30P"
	CIRCUITPLUGTYPE_NEMA_L14_20_P           CircuitPlugType = "NEMA_L14_20P"
	CIRCUITPLUGTYPE_NEMA_L14_30_P           CircuitPlugType = "NEMA_L14_30P"
	CIRCUITPLUGTYPE_NEMA_L15_20_P           CircuitPlugType = "NEMA_L15_20P"
	CIRCUITPLUGTYPE_NEMA_L15_30_P           CircuitPlugType = "NEMA_L15_30P"
	CIRCUITPLUGTYPE_NEMA_L21_20_P           CircuitPlugType = "NEMA_L21_20P"
	CIRCUITPLUGTYPE_NEMA_L21_30_P           CircuitPlugType = "NEMA_L21_30P"
	CIRCUITPLUGTYPE_NEMA_L22_20_P           CircuitPlugType = "NEMA_L22_20P"
	CIRCUITPLUGTYPE_NEMA_L22_30_P           CircuitPlugType = "NEMA_L22_30P"
	CIRCUITPLUGTYPE_CALIFORNIA_CS8265       CircuitPlugType = "California_CS8265"
	CIRCUITPLUGTYPE_CALIFORNIA_CS8365       CircuitPlugType = "California_CS8365"
	CIRCUITPLUGTYPE_IEC_60320_C14           CircuitPlugType = "IEC_60320_C14"
	CIRCUITPLUGTYPE_IEC_60320_C20           CircuitPlugType = "IEC_60320_C20"
	CIRCUITPLUGTYPE_IEC_60309_316_P6        CircuitPlugType = "IEC_60309_316P6"
	CIRCUITPLUGTYPE_IEC_60309_332_P6        CircuitPlugType = "IEC_60309_332P6"
	CIRCUITPLUGTYPE_IEC_60309_363_P6        CircuitPlugType = "IEC_60309_363P6"
	CIRCUITPLUGTYPE_IEC_60309_516_P6        CircuitPlugType = "IEC_60309_516P6"
	CIRCUITPLUGTYPE_IEC_60309_532_P6        CircuitPlugType = "IEC_60309_532P6"
	CIRCUITPLUGTYPE_IEC_60309_563_P6        CircuitPlugType = "IEC_60309_563P6"
	CIRCUITPLUGTYPE_IEC_60309_460_P9        CircuitPlugType = "IEC_60309_460P9"
	CIRCUITPLUGTYPE_IEC_60309_560_P9        CircuitPlugType = "IEC_60309_560P9"
	CIRCUITPLUGTYPE_FIELD_208_V_3_P4_W_60_A CircuitPlugType = "Field_208V_3P4W_60A"
	CIRCUITPLUGTYPE_FIELD_400_V_3_P5_W_32_A CircuitPlugType = "Field_400V_3P5W_32A"
)

// AllowedCircuitPlugTypeEnumValues is all the allowed values of CircuitPlugType enum
var AllowedCircuitPlugTypeEnumValues = []CircuitPlugType{
	"NEMA_5_15P",
	"NEMA_L5_15P",
	"NEMA_5_20P",
	"NEMA_L5_20P",
	"NEMA_L5_30P",
	"NEMA_6_15P",
	"NEMA_L6_15P",
	"NEMA_6_20P",
	"NEMA_L6_20P",
	"NEMA_L6_30P",
	"NEMA_L14_20P",
	"NEMA_L14_30P",
	"NEMA_L15_20P",
	"NEMA_L15_30P",
	"NEMA_L21_20P",
	"NEMA_L21_30P",
	"NEMA_L22_20P",
	"NEMA_L22_30P",
	"California_CS8265",
	"California_CS8365",
	"IEC_60320_C14",
	"IEC_60320_C20",
	"IEC_60309_316P6",
	"IEC_60309_332P6",
	"IEC_60309_363P6",
	"IEC_60309_516P6",
	"IEC_60309_532P6",
	"IEC_60309_563P6",
	"IEC_60309_460P9",
	"IEC_60309_560P9",
	"Field_208V_3P4W_60A",
	"Field_400V_3P5W_32A",
}

// validCircuitPlugTypeEnumValue provides a map of CircuitPlugTypes for fast verification of use input
var validCircuitPlugTypeEnumValues = map[CircuitPlugType]struct{}{
	"NEMA_5_15P":          {},
	"NEMA_L5_15P":         {},
	"NEMA_5_20P":          {},
	"NEMA_L5_20P":         {},
	"NEMA_L5_30P":         {},
	"NEMA_6_15P":          {},
	"NEMA_L6_15P":         {},
	"NEMA_6_20P":          {},
	"NEMA_L6_20P":         {},
	"NEMA_L6_30P":         {},
	"NEMA_L14_20P":        {},
	"NEMA_L14_30P":        {},
	"NEMA_L15_20P":        {},
	"NEMA_L15_30P":        {},
	"NEMA_L21_20P":        {},
	"NEMA_L21_30P":        {},
	"NEMA_L22_20P":        {},
	"NEMA_L22_30P":        {},
	"California_CS8265":   {},
	"California_CS8365":   {},
	"IEC_60320_C14":       {},
	"IEC_60320_C20":       {},
	"IEC_60309_316P6":     {},
	"IEC_60309_332P6":     {},
	"IEC_60309_363P6":     {},
	"IEC_60309_516P6":     {},
	"IEC_60309_532P6":     {},
	"IEC_60309_563P6":     {},
	"IEC_60309_460P9":     {},
	"IEC_60309_560P9":     {},
	"Field_208V_3P4W_60A": {},
	"Field_400V_3P5W_32A": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CircuitPlugType) IsValid() bool {
	_, ok := validCircuitPlugTypeEnumValues[v]
	return ok
}

// NewCircuitPlugTypeFromValue returns a pointer to a valid CircuitPlugType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCircuitPlugTypeFromValue(v string) (CircuitPlugType, error) {
	ev := CircuitPlugType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for CircuitPlugType: valid values are %v", v, AllowedCircuitPlugTypeEnumValues)
}

// AssertCircuitPlugTypeRequired checks if the required fields are not zero-ed
func AssertCircuitPlugTypeRequired(obj CircuitPlugType) error {
	return nil
}

// AssertCircuitPlugTypeConstraints checks if the values respects the defined constraints
func AssertCircuitPlugTypeConstraints(obj CircuitPlugType) error {
	return nil
}
