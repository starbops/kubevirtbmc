// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// NetworkDeviceFunctionMetricsV112NetworkDeviceFunctionMetrics - The NetworkDeviceFunctionMetrics schema contains usage and health statistics for a network function of a network adapter.
type NetworkDeviceFunctionMetricsV112NetworkDeviceFunctionMetrics struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions NetworkDeviceFunctionMetricsV112Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	Ethernet NetworkDeviceFunctionMetricsV112Ethernet `json:"Ethernet,omitempty"`

	FibreChannel NetworkDeviceFunctionMetricsV112FibreChannel `json:"FibreChannel,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The average RX queue depth as the percentage.
	RXAvgQueueDepthPercent *float32 `json:"RXAvgQueueDepthPercent,omitempty"`

	// The total number of bytes received on a network function.
	RXBytes *int64 `json:"RXBytes,omitempty"`

	// The total number of frames received on a network function.
	RXFrames *int64 `json:"RXFrames,omitempty"`

	// The total number of good multicast frames received on a network function since reset.
	RXMulticastFrames *int64 `json:"RXMulticastFrames,omitempty"`

	// Whether nothing is in a network function's RX queues to DMA.
	RXQueuesEmpty *bool `json:"RXQueuesEmpty,omitempty"`

	// The number of RX queues that are full.
	RXQueuesFull *int64 `json:"RXQueuesFull,omitempty"`

	// The total number of good unicast frames received on a network function since reset.
	RXUnicastFrames *int64 `json:"RXUnicastFrames,omitempty"`

	// The average TX queue depth as the percentage.
	TXAvgQueueDepthPercent *float32 `json:"TXAvgQueueDepthPercent,omitempty"`

	// The total number of bytes sent on a network function.
	TXBytes *int64 `json:"TXBytes,omitempty"`

	// The total number of frames sent on a network function.
	TXFrames *int64 `json:"TXFrames,omitempty"`

	// The total number of good multicast frames transmitted on a network function since reset.
	TXMulticastFrames *int64 `json:"TXMulticastFrames,omitempty"`

	// Whether all TX queues for a network function are empty.
	TXQueuesEmpty *bool `json:"TXQueuesEmpty,omitempty"`

	// The number of TX queues that are full.
	TXQueuesFull *int64 `json:"TXQueuesFull,omitempty"`

	// The total number of good unicast frames transmitted on a network function since reset.
	TXUnicastFrames *int64 `json:"TXUnicastFrames,omitempty"`
}

// AssertNetworkDeviceFunctionMetricsV112NetworkDeviceFunctionMetricsRequired checks if the required fields are not zero-ed
func AssertNetworkDeviceFunctionMetricsV112NetworkDeviceFunctionMetricsRequired(obj NetworkDeviceFunctionMetricsV112NetworkDeviceFunctionMetrics) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertNetworkDeviceFunctionMetricsV112ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertNetworkDeviceFunctionMetricsV112EthernetRequired(obj.Ethernet); err != nil {
		return err
	}
	if err := AssertNetworkDeviceFunctionMetricsV112FibreChannelRequired(obj.FibreChannel); err != nil {
		return err
	}
	return nil
}

// AssertNetworkDeviceFunctionMetricsV112NetworkDeviceFunctionMetricsConstraints checks if the values respects the defined constraints
func AssertNetworkDeviceFunctionMetricsV112NetworkDeviceFunctionMetricsConstraints(obj NetworkDeviceFunctionMetricsV112NetworkDeviceFunctionMetrics) error {
	if err := AssertNetworkDeviceFunctionMetricsV112ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertNetworkDeviceFunctionMetricsV112EthernetConstraints(obj.Ethernet); err != nil {
		return err
	}
	if err := AssertNetworkDeviceFunctionMetricsV112FibreChannelConstraints(obj.FibreChannel); err != nil {
		return err
	}
	if obj.RXAvgQueueDepthPercent != nil && *obj.RXAvgQueueDepthPercent < 0 {
		return &ParsingError{Param: "RXAvgQueueDepthPercent", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.TXAvgQueueDepthPercent != nil && *obj.TXAvgQueueDepthPercent < 0 {
		return &ParsingError{Param: "TXAvgQueueDepthPercent", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
