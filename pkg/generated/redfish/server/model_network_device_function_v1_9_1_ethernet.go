// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// NetworkDeviceFunctionV191Ethernet - This type describes Ethernet capabilities, status, and configuration for a network device function.
type NetworkDeviceFunctionV191Ethernet struct {
	EthernetInterfaces OdataV4IdRef `json:"EthernetInterfaces,omitempty"`

	// The currently configured MAC address.
	MACAddress *string `json:"MACAddress,omitempty" validate:"regexp=^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"`

	// The maximum transmission unit (MTU) configured for this network device function.
	MTUSize *int64 `json:"MTUSize,omitempty"`

	// The largest maximum transmission unit (MTU) size supported for this network device function.
	MTUSizeMaximum *int64 `json:"MTUSizeMaximum,omitempty"`

	// The permanent MAC address assigned to this function.
	PermanentMACAddress *string `json:"PermanentMACAddress,omitempty" validate:"regexp=^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"`

	VLAN VLanNetworkInterfaceVlan `json:"VLAN,omitempty"`

	VLANs OdataV4IdRef `json:"VLANs,omitempty"`
}

// AssertNetworkDeviceFunctionV191EthernetRequired checks if the required fields are not zero-ed
func AssertNetworkDeviceFunctionV191EthernetRequired(obj NetworkDeviceFunctionV191Ethernet) error {
	if err := AssertOdataV4IdRefRequired(obj.EthernetInterfaces); err != nil {
		return err
	}
	if err := AssertVLanNetworkInterfaceVlanRequired(obj.VLAN); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.VLANs); err != nil {
		return err
	}
	return nil
}

// AssertNetworkDeviceFunctionV191EthernetConstraints checks if the values respects the defined constraints
func AssertNetworkDeviceFunctionV191EthernetConstraints(obj NetworkDeviceFunctionV191Ethernet) error {
	if err := AssertOdataV4IdRefConstraints(obj.EthernetInterfaces); err != nil {
		return err
	}
	if err := AssertVLanNetworkInterfaceVlanConstraints(obj.VLAN); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.VLANs); err != nil {
		return err
	}
	return nil
}
