// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// ThermalV172Thermal - The Thermal schema describes temperature monitoring and thermal management subsystems, such as cooling fans, for a computer system or similar devices contained within a chassis.
type ThermalV172Thermal struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions ThermalV172ThermalActions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The set of fans for this chassis.
	Fans []ThermalV172Fan `json:"Fans,omitempty"`

	// The number of items in a collection.
	FansodataCount int64 `json:"Fans@odata.count,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The redundancy information for the set of fans in this chassis.
	Redundancy []RedundancyRedundancy `json:"Redundancy,omitempty"`

	// The number of items in a collection.
	RedundancyodataCount int64 `json:"Redundancy@odata.count,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The set of temperature sensors for this chassis.
	Temperatures []ThermalV172Temperature `json:"Temperatures,omitempty"`

	// The number of items in a collection.
	TemperaturesodataCount int64 `json:"Temperatures@odata.count,omitempty"`
}

// AssertThermalV172ThermalRequired checks if the required fields are not zero-ed
func AssertThermalV172ThermalRequired(obj ThermalV172Thermal) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertThermalV172ThermalActionsRequired(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.Fans {
		if err := AssertThermalV172FanRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.Temperatures {
		if err := AssertThermalV172TemperatureRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertThermalV172ThermalConstraints checks if the values respects the defined constraints
func AssertThermalV172ThermalConstraints(obj ThermalV172Thermal) error {
	if err := AssertThermalV172ThermalActionsConstraints(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.Fans {
		if err := AssertThermalV172FanConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.Temperatures {
		if err := AssertThermalV172TemperatureConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
