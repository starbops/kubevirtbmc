// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// AggregationSourceV140AggregationSource - The AggregationSource schema is used to represent the source of information for a subset of the resources provided by a Redfish service.  It can be thought of as a provider of information.  As such, most such interfaces have requirements to support the gathering of information like address and account used to access the information.
type AggregationSourceV140AggregationSource struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions AggregationSourceV140Actions `json:"Actions,omitempty"`

	AggregationType AggregationSourceV140AggregationType `json:"AggregationType,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The URI of the system to be accessed.
	HostName *string `json:"HostName,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links AggregationSourceV140Links `json:"Links,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The password for accessing the aggregation source.  The value is `null` in responses.
	Password *string `json:"Password,omitempty"`

	SNMP AggregationSourceV140SnmpSettings `json:"SNMP,omitempty"`

	SSHSettings AggregationSourceV140SshSettingsType `json:"SSHSettings,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The user name for accessing the aggregation source.
	UserName *string `json:"UserName,omitempty"`
}

// AssertAggregationSourceV140AggregationSourceRequired checks if the required fields are not zero-ed
func AssertAggregationSourceV140AggregationSourceRequired(obj AggregationSourceV140AggregationSource) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertAggregationSourceV140ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertAggregationSourceV140LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertAggregationSourceV140SnmpSettingsRequired(obj.SNMP); err != nil {
		return err
	}
	if err := AssertAggregationSourceV140SshSettingsTypeRequired(obj.SSHSettings); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertAggregationSourceV140AggregationSourceConstraints checks if the values respects the defined constraints
func AssertAggregationSourceV140AggregationSourceConstraints(obj AggregationSourceV140AggregationSource) error {
	if err := AssertAggregationSourceV140ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertAggregationSourceV140LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertAggregationSourceV140SnmpSettingsConstraints(obj.SNMP); err != nil {
		return err
	}
	if err := AssertAggregationSourceV140SshSettingsTypeConstraints(obj.SSHSettings); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
