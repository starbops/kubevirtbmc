// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"time"
)

// ScheduleSchedule - Schedule a series of occurrences.
type ScheduleSchedule struct {

	// Days of the month when scheduled occurrences are enabled.  `0` indicates that every day of the month is enabled.
	EnabledDaysOfMonth []*int64 `json:"EnabledDaysOfMonth,omitempty"`

	// Days of the week when scheduled occurrences are enabled, for enabled days of the month and months of the year.  If not present, all days of the week are enabled.
	EnabledDaysOfWeek []ScheduleScheduleEnabledDaysOfWeekInner `json:"EnabledDaysOfWeek,omitempty"`

	// Intervals when scheduled occurrences are enabled.
	EnabledIntervals []*string `json:"EnabledIntervals,omitempty"`

	// The months of the year when scheduled occurrences are enabled.  If not present, all months of the year are enabled.
	EnabledMonthsOfYear []ScheduleScheduleEnabledMonthsOfYearInner `json:"EnabledMonthsOfYear,omitempty"`

	// The date and time when the initial occurrence is scheduled to occur.
	InitialStartTime *time.Time `json:"InitialStartTime,omitempty"`

	// The time after provisioning when the schedule as a whole expires.
	Lifetime *string `json:"Lifetime,omitempty" validate:"regexp=^P(\\\\d+D)?(T(\\\\d+H)?(\\\\d+M)?(\\\\d+(.\\\\d+)?S)?)?$"`

	// The maximum number of scheduled occurrences.
	MaxOccurrences *int64 `json:"MaxOccurrences,omitempty"`

	// The schedule name.
	Name *string `json:"Name,omitempty"`

	// The duration between consecutive occurrences.
	RecurrenceInterval *string `json:"RecurrenceInterval,omitempty" validate:"regexp=^P(\\\\d+D)?(T(\\\\d+H)?(\\\\d+M)?(\\\\d+(.\\\\d+)?S)?)?$"`
}

// AssertScheduleScheduleRequired checks if the required fields are not zero-ed
func AssertScheduleScheduleRequired(obj ScheduleSchedule) error {
	for _, el := range obj.EnabledDaysOfWeek {
		if err := AssertScheduleScheduleEnabledDaysOfWeekInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.EnabledMonthsOfYear {
		if err := AssertScheduleScheduleEnabledMonthsOfYearInnerRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertScheduleScheduleConstraints checks if the values respects the defined constraints
func AssertScheduleScheduleConstraints(obj ScheduleSchedule) error {
	for _, el := range obj.EnabledDaysOfWeek {
		if err := AssertScheduleScheduleEnabledDaysOfWeekInnerConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.EnabledMonthsOfYear {
		if err := AssertScheduleScheduleEnabledMonthsOfYearInnerConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
