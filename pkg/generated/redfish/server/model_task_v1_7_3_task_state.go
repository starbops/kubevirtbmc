// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type TaskV173TaskState string

// List of TaskV173TaskState
const (
	TASKV173TASKSTATE_NEW         TaskV173TaskState = "New"
	TASKV173TASKSTATE_STARTING    TaskV173TaskState = "Starting"
	TASKV173TASKSTATE_RUNNING     TaskV173TaskState = "Running"
	TASKV173TASKSTATE_SUSPENDED   TaskV173TaskState = "Suspended"
	TASKV173TASKSTATE_INTERRUPTED TaskV173TaskState = "Interrupted"
	TASKV173TASKSTATE_PENDING     TaskV173TaskState = "Pending"
	TASKV173TASKSTATE_STOPPING    TaskV173TaskState = "Stopping"
	TASKV173TASKSTATE_COMPLETED   TaskV173TaskState = "Completed"
	TASKV173TASKSTATE_KILLED      TaskV173TaskState = "Killed"
	TASKV173TASKSTATE_EXCEPTION   TaskV173TaskState = "Exception"
	TASKV173TASKSTATE_SERVICE     TaskV173TaskState = "Service"
	TASKV173TASKSTATE_CANCELLING  TaskV173TaskState = "Cancelling"
	TASKV173TASKSTATE_CANCELLED   TaskV173TaskState = "Cancelled"
)

// AllowedTaskV173TaskStateEnumValues is all the allowed values of TaskV173TaskState enum
var AllowedTaskV173TaskStateEnumValues = []TaskV173TaskState{
	"New",
	"Starting",
	"Running",
	"Suspended",
	"Interrupted",
	"Pending",
	"Stopping",
	"Completed",
	"Killed",
	"Exception",
	"Service",
	"Cancelling",
	"Cancelled",
}

// validTaskV173TaskStateEnumValue provides a map of TaskV173TaskStates for fast verification of use input
var validTaskV173TaskStateEnumValues = map[TaskV173TaskState]struct{}{
	"New":         {},
	"Starting":    {},
	"Running":     {},
	"Suspended":   {},
	"Interrupted": {},
	"Pending":     {},
	"Stopping":    {},
	"Completed":   {},
	"Killed":      {},
	"Exception":   {},
	"Service":     {},
	"Cancelling":  {},
	"Cancelled":   {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaskV173TaskState) IsValid() bool {
	_, ok := validTaskV173TaskStateEnumValues[v]
	return ok
}

// NewTaskV173TaskStateFromValue returns a pointer to a valid TaskV173TaskState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaskV173TaskStateFromValue(v string) (TaskV173TaskState, error) {
	ev := TaskV173TaskState(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for TaskV173TaskState: valid values are %v", v, AllowedTaskV173TaskStateEnumValues)
}

// AssertTaskV173TaskStateRequired checks if the required fields are not zero-ed
func AssertTaskV173TaskStateRequired(obj TaskV173TaskState) error {
	return nil
}

// AssertTaskV173TaskStateConstraints checks if the values respects the defined constraints
func AssertTaskV173TaskStateConstraints(obj TaskV173TaskState) error {
	return nil
}
