// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// MetricReportDefinitionV145CollectionTimeScope : The time scope of the related metric values.
type MetricReportDefinitionV145CollectionTimeScope string

// List of MetricReportDefinitionV145CollectionTimeScope
const (
	METRICREPORTDEFINITIONV145COLLECTIONTIMESCOPE_POINT            MetricReportDefinitionV145CollectionTimeScope = "Point"
	METRICREPORTDEFINITIONV145COLLECTIONTIMESCOPE_INTERVAL         MetricReportDefinitionV145CollectionTimeScope = "Interval"
	METRICREPORTDEFINITIONV145COLLECTIONTIMESCOPE_STARTUP_INTERVAL MetricReportDefinitionV145CollectionTimeScope = "StartupInterval"
)

// AllowedMetricReportDefinitionV145CollectionTimeScopeEnumValues is all the allowed values of MetricReportDefinitionV145CollectionTimeScope enum
var AllowedMetricReportDefinitionV145CollectionTimeScopeEnumValues = []MetricReportDefinitionV145CollectionTimeScope{
	"Point",
	"Interval",
	"StartupInterval",
}

// validMetricReportDefinitionV145CollectionTimeScopeEnumValue provides a map of MetricReportDefinitionV145CollectionTimeScopes for fast verification of use input
var validMetricReportDefinitionV145CollectionTimeScopeEnumValues = map[MetricReportDefinitionV145CollectionTimeScope]struct{}{
	"Point":           {},
	"Interval":        {},
	"StartupInterval": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricReportDefinitionV145CollectionTimeScope) IsValid() bool {
	_, ok := validMetricReportDefinitionV145CollectionTimeScopeEnumValues[v]
	return ok
}

// NewMetricReportDefinitionV145CollectionTimeScopeFromValue returns a pointer to a valid MetricReportDefinitionV145CollectionTimeScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricReportDefinitionV145CollectionTimeScopeFromValue(v string) (MetricReportDefinitionV145CollectionTimeScope, error) {
	ev := MetricReportDefinitionV145CollectionTimeScope(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for MetricReportDefinitionV145CollectionTimeScope: valid values are %v", v, AllowedMetricReportDefinitionV145CollectionTimeScopeEnumValues)
}

// AssertMetricReportDefinitionV145CollectionTimeScopeRequired checks if the required fields are not zero-ed
func AssertMetricReportDefinitionV145CollectionTimeScopeRequired(obj MetricReportDefinitionV145CollectionTimeScope) error {
	return nil
}

// AssertMetricReportDefinitionV145CollectionTimeScopeConstraints checks if the values respects the defined constraints
func AssertMetricReportDefinitionV145CollectionTimeScopeConstraints(obj MetricReportDefinitionV145CollectionTimeScope) error {
	return nil
}
