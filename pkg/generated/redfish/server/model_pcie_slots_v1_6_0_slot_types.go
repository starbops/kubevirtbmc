// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PcieSlotsV160SlotTypes string

// List of PcieSlotsV160SlotTypes
const (
	PCIESLOTSV160SLOTTYPES_FULL_LENGTH PcieSlotsV160SlotTypes = "FullLength"
	PCIESLOTSV160SLOTTYPES_HALF_LENGTH PcieSlotsV160SlotTypes = "HalfLength"
	PCIESLOTSV160SLOTTYPES_LOW_PROFILE PcieSlotsV160SlotTypes = "LowProfile"
	PCIESLOTSV160SLOTTYPES_MINI        PcieSlotsV160SlotTypes = "Mini"
	PCIESLOTSV160SLOTTYPES_M2          PcieSlotsV160SlotTypes = "M2"
	PCIESLOTSV160SLOTTYPES_OEM         PcieSlotsV160SlotTypes = "OEM"
	PCIESLOTSV160SLOTTYPES_OCP3_SMALL  PcieSlotsV160SlotTypes = "OCP3Small"
	PCIESLOTSV160SLOTTYPES_OCP3_LARGE  PcieSlotsV160SlotTypes = "OCP3Large"
	PCIESLOTSV160SLOTTYPES_U2          PcieSlotsV160SlotTypes = "U2"
)

// AllowedPcieSlotsV160SlotTypesEnumValues is all the allowed values of PcieSlotsV160SlotTypes enum
var AllowedPcieSlotsV160SlotTypesEnumValues = []PcieSlotsV160SlotTypes{
	"FullLength",
	"HalfLength",
	"LowProfile",
	"Mini",
	"M2",
	"OEM",
	"OCP3Small",
	"OCP3Large",
	"U2",
}

// validPcieSlotsV160SlotTypesEnumValue provides a map of PcieSlotsV160SlotTypess for fast verification of use input
var validPcieSlotsV160SlotTypesEnumValues = map[PcieSlotsV160SlotTypes]struct{}{
	"FullLength": {},
	"HalfLength": {},
	"LowProfile": {},
	"Mini":       {},
	"M2":         {},
	"OEM":        {},
	"OCP3Small":  {},
	"OCP3Large":  {},
	"U2":         {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PcieSlotsV160SlotTypes) IsValid() bool {
	_, ok := validPcieSlotsV160SlotTypesEnumValues[v]
	return ok
}

// NewPcieSlotsV160SlotTypesFromValue returns a pointer to a valid PcieSlotsV160SlotTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPcieSlotsV160SlotTypesFromValue(v string) (PcieSlotsV160SlotTypes, error) {
	ev := PcieSlotsV160SlotTypes(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PcieSlotsV160SlotTypes: valid values are %v", v, AllowedPcieSlotsV160SlotTypesEnumValues)
}

// AssertPcieSlotsV160SlotTypesRequired checks if the required fields are not zero-ed
func AssertPcieSlotsV160SlotTypesRequired(obj PcieSlotsV160SlotTypes) error {
	return nil
}

// AssertPcieSlotsV160SlotTypesConstraints checks if the values respects the defined constraints
func AssertPcieSlotsV160SlotTypesConstraints(obj PcieSlotsV160SlotTypes) error {
	return nil
}
