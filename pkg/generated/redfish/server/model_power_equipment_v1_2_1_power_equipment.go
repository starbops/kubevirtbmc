// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// PowerEquipmentV121PowerEquipment - This is the schema definition for the set of power equipment.
type PowerEquipmentV121PowerEquipment struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions PowerEquipmentV121Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	ElectricalBuses OdataV4IdRef `json:"ElectricalBuses,omitempty"`

	FloorPDUs OdataV4IdRef `json:"FloorPDUs,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links PowerEquipmentV121Links `json:"Links,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PowerShelves OdataV4IdRef `json:"PowerShelves,omitempty"`

	RackPDUs OdataV4IdRef `json:"RackPDUs,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	Switchgear OdataV4IdRef `json:"Switchgear,omitempty"`

	TransferSwitches OdataV4IdRef `json:"TransferSwitches,omitempty"`
}

// AssertPowerEquipmentV121PowerEquipmentRequired checks if the required fields are not zero-ed
func AssertPowerEquipmentV121PowerEquipmentRequired(obj PowerEquipmentV121PowerEquipment) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPowerEquipmentV121ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.ElectricalBuses); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.FloorPDUs); err != nil {
		return err
	}
	if err := AssertPowerEquipmentV121LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.PowerShelves); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.RackPDUs); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Switchgear); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.TransferSwitches); err != nil {
		return err
	}
	return nil
}

// AssertPowerEquipmentV121PowerEquipmentConstraints checks if the values respects the defined constraints
func AssertPowerEquipmentV121PowerEquipmentConstraints(obj PowerEquipmentV121PowerEquipment) error {
	if err := AssertPowerEquipmentV121ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.ElectricalBuses); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.FloorPDUs); err != nil {
		return err
	}
	if err := AssertPowerEquipmentV121LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.PowerShelves); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.RackPDUs); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Switchgear); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.TransferSwitches); err != nil {
		return err
	}
	return nil
}
