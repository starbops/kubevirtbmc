// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type VolumeWriteCachePolicyType string

// List of VolumeWriteCachePolicyType
const (
	VOLUMEWRITECACHEPOLICYTYPE_WRITE_THROUGH          VolumeWriteCachePolicyType = "WriteThrough"
	VOLUMEWRITECACHEPOLICYTYPE_PROTECTED_WRITE_BACK   VolumeWriteCachePolicyType = "ProtectedWriteBack"
	VOLUMEWRITECACHEPOLICYTYPE_UNPROTECTED_WRITE_BACK VolumeWriteCachePolicyType = "UnprotectedWriteBack"
	VOLUMEWRITECACHEPOLICYTYPE_OFF                    VolumeWriteCachePolicyType = "Off"
)

// AllowedVolumeWriteCachePolicyTypeEnumValues is all the allowed values of VolumeWriteCachePolicyType enum
var AllowedVolumeWriteCachePolicyTypeEnumValues = []VolumeWriteCachePolicyType{
	"WriteThrough",
	"ProtectedWriteBack",
	"UnprotectedWriteBack",
	"Off",
}

// validVolumeWriteCachePolicyTypeEnumValue provides a map of VolumeWriteCachePolicyTypes for fast verification of use input
var validVolumeWriteCachePolicyTypeEnumValues = map[VolumeWriteCachePolicyType]struct{}{
	"WriteThrough":         {},
	"ProtectedWriteBack":   {},
	"UnprotectedWriteBack": {},
	"Off":                  {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeWriteCachePolicyType) IsValid() bool {
	_, ok := validVolumeWriteCachePolicyTypeEnumValues[v]
	return ok
}

// NewVolumeWriteCachePolicyTypeFromValue returns a pointer to a valid VolumeWriteCachePolicyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeWriteCachePolicyTypeFromValue(v string) (VolumeWriteCachePolicyType, error) {
	ev := VolumeWriteCachePolicyType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for VolumeWriteCachePolicyType: valid values are %v", v, AllowedVolumeWriteCachePolicyTypeEnumValues)
}

// AssertVolumeWriteCachePolicyTypeRequired checks if the required fields are not zero-ed
func AssertVolumeWriteCachePolicyTypeRequired(obj VolumeWriteCachePolicyType) error {
	return nil
}

// AssertVolumeWriteCachePolicyTypeConstraints checks if the values respects the defined constraints
func AssertVolumeWriteCachePolicyTypeConstraints(obj VolumeWriteCachePolicyType) error {
	return nil
}
