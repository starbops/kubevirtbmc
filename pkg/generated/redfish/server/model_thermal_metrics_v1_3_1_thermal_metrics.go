// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// ThermalMetricsV131ThermalMetrics - The ThermalMetrics schema represents the thermal metrics of a chassis.
type ThermalMetricsV131ThermalMetrics struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions ThermalMetricsV131Actions `json:"Actions,omitempty"`

	AirFlowCubicMetersPerMinute SensorSensorExcerpt `json:"AirFlowCubicMetersPerMinute,omitempty"`

	DeltaPressurekPa SensorSensorExcerpt `json:"DeltaPressurekPa,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	EnergykWh SensorSensorEnergykWhExcerpt `json:"EnergykWh,omitempty"`

	HeaterSummary ThermalMetricsV131HeaterSummary `json:"HeaterSummary,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PowerWatts SensorSensorPowerExcerpt `json:"PowerWatts,omitempty"`

	// The temperatures (in degree Celsius units) from all related sensors for this device.
	TemperatureReadingsCelsius []SensorSensorArrayExcerpt `json:"TemperatureReadingsCelsius,omitempty"`

	// The number of items in a collection.
	TemperatureReadingsCelsiusodataCount int64 `json:"TemperatureReadingsCelsius@odata.count,omitempty"`

	TemperatureSummaryCelsius ThermalMetricsV131TemperatureSummary `json:"TemperatureSummaryCelsius,omitempty"`
}

// AssertThermalMetricsV131ThermalMetricsRequired checks if the required fields are not zero-ed
func AssertThermalMetricsV131ThermalMetricsRequired(obj ThermalMetricsV131ThermalMetrics) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertThermalMetricsV131ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.AirFlowCubicMetersPerMinute); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.DeltaPressurekPa); err != nil {
		return err
	}
	if err := AssertSensorSensorEnergykWhExcerptRequired(obj.EnergykWh); err != nil {
		return err
	}
	if err := AssertThermalMetricsV131HeaterSummaryRequired(obj.HeaterSummary); err != nil {
		return err
	}
	if err := AssertSensorSensorPowerExcerptRequired(obj.PowerWatts); err != nil {
		return err
	}
	for _, el := range obj.TemperatureReadingsCelsius {
		if err := AssertSensorSensorArrayExcerptRequired(el); err != nil {
			return err
		}
	}
	if err := AssertThermalMetricsV131TemperatureSummaryRequired(obj.TemperatureSummaryCelsius); err != nil {
		return err
	}
	return nil
}

// AssertThermalMetricsV131ThermalMetricsConstraints checks if the values respects the defined constraints
func AssertThermalMetricsV131ThermalMetricsConstraints(obj ThermalMetricsV131ThermalMetrics) error {
	if err := AssertThermalMetricsV131ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptConstraints(obj.AirFlowCubicMetersPerMinute); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptConstraints(obj.DeltaPressurekPa); err != nil {
		return err
	}
	if err := AssertSensorSensorEnergykWhExcerptConstraints(obj.EnergykWh); err != nil {
		return err
	}
	if err := AssertThermalMetricsV131HeaterSummaryConstraints(obj.HeaterSummary); err != nil {
		return err
	}
	if err := AssertSensorSensorPowerExcerptConstraints(obj.PowerWatts); err != nil {
		return err
	}
	for _, el := range obj.TemperatureReadingsCelsius {
		if err := AssertSensorSensorArrayExcerptConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertThermalMetricsV131TemperatureSummaryConstraints(obj.TemperatureSummaryCelsius); err != nil {
		return err
	}
	return nil
}
