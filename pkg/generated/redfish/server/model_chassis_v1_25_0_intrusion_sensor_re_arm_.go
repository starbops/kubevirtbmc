// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ChassisV1250IntrusionSensorReArm string

// List of ChassisV1250IntrusionSensorReArm
const (
	CHASSISV1250INTRUSIONSENSORREARM_MANUAL    ChassisV1250IntrusionSensorReArm = "Manual"
	CHASSISV1250INTRUSIONSENSORREARM_AUTOMATIC ChassisV1250IntrusionSensorReArm = "Automatic"
)

// AllowedChassisV1250IntrusionSensorReArmEnumValues is all the allowed values of ChassisV1250IntrusionSensorReArm enum
var AllowedChassisV1250IntrusionSensorReArmEnumValues = []ChassisV1250IntrusionSensorReArm{
	"Manual",
	"Automatic",
}

// validChassisV1250IntrusionSensorReArmEnumValue provides a map of ChassisV1250IntrusionSensorReArms for fast verification of use input
var validChassisV1250IntrusionSensorReArmEnumValues = map[ChassisV1250IntrusionSensorReArm]struct{}{
	"Manual":    {},
	"Automatic": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChassisV1250IntrusionSensorReArm) IsValid() bool {
	_, ok := validChassisV1250IntrusionSensorReArmEnumValues[v]
	return ok
}

// NewChassisV1250IntrusionSensorReArmFromValue returns a pointer to a valid ChassisV1250IntrusionSensorReArm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChassisV1250IntrusionSensorReArmFromValue(v string) (ChassisV1250IntrusionSensorReArm, error) {
	ev := ChassisV1250IntrusionSensorReArm(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ChassisV1250IntrusionSensorReArm: valid values are %v", v, AllowedChassisV1250IntrusionSensorReArmEnumValues)
}

// AssertChassisV1250IntrusionSensorReArmRequired checks if the required fields are not zero-ed
func AssertChassisV1250IntrusionSensorReArmRequired(obj ChassisV1250IntrusionSensorReArm) error {
	return nil
}

// AssertChassisV1250IntrusionSensorReArmConstraints checks if the values respects the defined constraints
func AssertChassisV1250IntrusionSensorReArmConstraints(obj ChassisV1250IntrusionSensorReArm) error {
	return nil
}
