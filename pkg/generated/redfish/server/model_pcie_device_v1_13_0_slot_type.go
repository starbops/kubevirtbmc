// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PcieDeviceV1130SlotType string

// List of PcieDeviceV1130SlotType
const (
	PCIEDEVICEV1130SLOTTYPE_FULL_LENGTH PcieDeviceV1130SlotType = "FullLength"
	PCIEDEVICEV1130SLOTTYPE_HALF_LENGTH PcieDeviceV1130SlotType = "HalfLength"
	PCIEDEVICEV1130SLOTTYPE_LOW_PROFILE PcieDeviceV1130SlotType = "LowProfile"
	PCIEDEVICEV1130SLOTTYPE_MINI        PcieDeviceV1130SlotType = "Mini"
	PCIEDEVICEV1130SLOTTYPE_M2          PcieDeviceV1130SlotType = "M2"
	PCIEDEVICEV1130SLOTTYPE_OEM         PcieDeviceV1130SlotType = "OEM"
	PCIEDEVICEV1130SLOTTYPE_OCP3_SMALL  PcieDeviceV1130SlotType = "OCP3Small"
	PCIEDEVICEV1130SLOTTYPE_OCP3_LARGE  PcieDeviceV1130SlotType = "OCP3Large"
	PCIEDEVICEV1130SLOTTYPE_U2          PcieDeviceV1130SlotType = "U2"
)

// AllowedPcieDeviceV1130SlotTypeEnumValues is all the allowed values of PcieDeviceV1130SlotType enum
var AllowedPcieDeviceV1130SlotTypeEnumValues = []PcieDeviceV1130SlotType{
	"FullLength",
	"HalfLength",
	"LowProfile",
	"Mini",
	"M2",
	"OEM",
	"OCP3Small",
	"OCP3Large",
	"U2",
}

// validPcieDeviceV1130SlotTypeEnumValue provides a map of PcieDeviceV1130SlotTypes for fast verification of use input
var validPcieDeviceV1130SlotTypeEnumValues = map[PcieDeviceV1130SlotType]struct{}{
	"FullLength": {},
	"HalfLength": {},
	"LowProfile": {},
	"Mini":       {},
	"M2":         {},
	"OEM":        {},
	"OCP3Small":  {},
	"OCP3Large":  {},
	"U2":         {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PcieDeviceV1130SlotType) IsValid() bool {
	_, ok := validPcieDeviceV1130SlotTypeEnumValues[v]
	return ok
}

// NewPcieDeviceV1130SlotTypeFromValue returns a pointer to a valid PcieDeviceV1130SlotType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPcieDeviceV1130SlotTypeFromValue(v string) (PcieDeviceV1130SlotType, error) {
	ev := PcieDeviceV1130SlotType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PcieDeviceV1130SlotType: valid values are %v", v, AllowedPcieDeviceV1130SlotTypeEnumValues)
}

// AssertPcieDeviceV1130SlotTypeRequired checks if the required fields are not zero-ed
func AssertPcieDeviceV1130SlotTypeRequired(obj PcieDeviceV1130SlotType) error {
	return nil
}

// AssertPcieDeviceV1130SlotTypeConstraints checks if the values respects the defined constraints
func AssertPcieDeviceV1130SlotTypeConstraints(obj PcieDeviceV1130SlotType) error {
	return nil
}
