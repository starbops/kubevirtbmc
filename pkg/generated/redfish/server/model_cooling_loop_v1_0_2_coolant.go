// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
	"time"
)

// CoolingLoopV102Coolant - This type describes coolant.
type CoolingLoopV102Coolant struct {

	// The name of the additive.
	AdditiveName *string `json:"AdditiveName,omitempty"`

	// The percent additives contained in the coolant.
	AdditivePercent *float32 `json:"AdditivePercent,omitempty"`

	CoolantType CoolingLoopV102CoolantType `json:"CoolantType,omitempty"`

	// The density (kg/m^3) of the coolant.
	DensityKgPerCubicMeter *float32 `json:"DensityKgPerCubicMeter,omitempty"`

	// The rated hours of service life for this coolant.
	RatedServiceHours *float32 `json:"RatedServiceHours,omitempty"`

	// The hours of service this coolant has provided.
	ServiceHours *float32 `json:"ServiceHours,omitempty"`

	// The date the coolant was last serviced.
	ServicedDate *time.Time `json:"ServicedDate,omitempty"`

	// The specific heat capacity (kJ/(kg*K)) of the coolant.
	SpecificHeatkJoulesPerKgK *float32 `json:"SpecificHeatkJoulesPerKgK,omitempty"`
}

// AssertCoolingLoopV102CoolantRequired checks if the required fields are not zero-ed
func AssertCoolingLoopV102CoolantRequired(obj CoolingLoopV102Coolant) error {
	return nil
}

// AssertCoolingLoopV102CoolantConstraints checks if the values respects the defined constraints
func AssertCoolingLoopV102CoolantConstraints(obj CoolingLoopV102Coolant) error {
	if obj.AdditivePercent != nil && *obj.AdditivePercent < 0 {
		return &ParsingError{Param: "AdditivePercent", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.AdditivePercent != nil && *obj.AdditivePercent > 100 {
		return &ParsingError{Param: "AdditivePercent", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
