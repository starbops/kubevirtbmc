// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type EthernetInterfaceV1120EthernetDeviceType string

// List of EthernetInterfaceV1120EthernetDeviceType
const (
	ETHERNETINTERFACEV1120ETHERNETDEVICETYPE_PHYSICAL EthernetInterfaceV1120EthernetDeviceType = "Physical"
	ETHERNETINTERFACEV1120ETHERNETDEVICETYPE_VIRTUAL  EthernetInterfaceV1120EthernetDeviceType = "Virtual"
)

// AllowedEthernetInterfaceV1120EthernetDeviceTypeEnumValues is all the allowed values of EthernetInterfaceV1120EthernetDeviceType enum
var AllowedEthernetInterfaceV1120EthernetDeviceTypeEnumValues = []EthernetInterfaceV1120EthernetDeviceType{
	"Physical",
	"Virtual",
}

// validEthernetInterfaceV1120EthernetDeviceTypeEnumValue provides a map of EthernetInterfaceV1120EthernetDeviceTypes for fast verification of use input
var validEthernetInterfaceV1120EthernetDeviceTypeEnumValues = map[EthernetInterfaceV1120EthernetDeviceType]struct{}{
	"Physical": {},
	"Virtual":  {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EthernetInterfaceV1120EthernetDeviceType) IsValid() bool {
	_, ok := validEthernetInterfaceV1120EthernetDeviceTypeEnumValues[v]
	return ok
}

// NewEthernetInterfaceV1120EthernetDeviceTypeFromValue returns a pointer to a valid EthernetInterfaceV1120EthernetDeviceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEthernetInterfaceV1120EthernetDeviceTypeFromValue(v string) (EthernetInterfaceV1120EthernetDeviceType, error) {
	ev := EthernetInterfaceV1120EthernetDeviceType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for EthernetInterfaceV1120EthernetDeviceType: valid values are %v", v, AllowedEthernetInterfaceV1120EthernetDeviceTypeEnumValues)
}

// AssertEthernetInterfaceV1120EthernetDeviceTypeRequired checks if the required fields are not zero-ed
func AssertEthernetInterfaceV1120EthernetDeviceTypeRequired(obj EthernetInterfaceV1120EthernetDeviceType) error {
	return nil
}

// AssertEthernetInterfaceV1120EthernetDeviceTypeConstraints checks if the values respects the defined constraints
func AssertEthernetInterfaceV1120EthernetDeviceTypeConstraints(obj EthernetInterfaceV1120EthernetDeviceType) error {
	return nil
}
