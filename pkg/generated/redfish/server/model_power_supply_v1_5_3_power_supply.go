// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
	"time"
)

// PowerSupplyV153PowerSupply - The PowerSupply schema describes a power supply unit.  It also describes the location, such as a slot, socket, or bay, where a unit can be installed, by populating a resource instance with an absent state if a unit is not present.
type PowerSupplyV153PowerSupply struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions PowerSupplyV153Actions `json:"Actions,omitempty"`

	Assembly OdataV4IdRef `json:"Assembly,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The efficiency ratings of this power supply.
	EfficiencyRatings []PowerSupplyV153EfficiencyRating `json:"EfficiencyRatings,omitempty"`

	// The URIs of the management interfaces for the upstream electrical source connections for this power supply.
	ElectricalSourceManagerURIs []*string `json:"ElectricalSourceManagerURIs,omitempty"`

	// The names of the upstream electrical sources, such as circuits or outlets, connected to this power supply.
	ElectricalSourceNames []*string `json:"ElectricalSourceNames,omitempty"`

	// The firmware version for this power supply.
	FirmwareVersion *string `json:"FirmwareVersion,omitempty"`

	// An indication of whether this device can be inserted or removed while the equipment is in operation.
	HotPluggable *bool `json:"HotPluggable,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	InputNominalVoltageType CircuitNominalVoltageType `json:"InputNominalVoltageType,omitempty"`

	// The input ranges that the power supply can use.
	InputRanges []PowerSupplyV153InputRange `json:"InputRanges,omitempty"`

	LineInputStatus PowerSupplyV153LineStatus `json:"LineInputStatus,omitempty"`

	Links PowerSupplyV153Links `json:"Links,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive,omitempty"`

	// The manufacturer of this power supply.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	Metrics OdataV4IdRef `json:"Metrics,omitempty"`

	// The model number for this power supply.
	Model *string `json:"Model,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	OutputNominalVoltageType CircuitNominalVoltageType `json:"OutputNominalVoltageType,omitempty"`

	// The output power rails provided by this power supply.
	OutputRails []PowerSupplyV153OutputRail `json:"OutputRails,omitempty"`

	// The part number for this power supply.
	PartNumber *string `json:"PartNumber,omitempty"`

	PhaseWiringType CircuitPhaseWiringType `json:"PhaseWiringType,omitempty"`

	PlugType CircuitPlugType `json:"PlugType,omitempty"`

	// The maximum capacity of this power supply.
	PowerCapacityWatts *float32 `json:"PowerCapacityWatts,omitempty"`

	PowerSupplyType PowerSupplyV153PowerSupplyType `json:"PowerSupplyType,omitempty"`

	// The production or manufacturing date of this power supply.
	ProductionDate *time.Time `json:"ProductionDate,omitempty"`

	// An indication of whether this component can be independently replaced as allowed by the vendor's replacement policy.
	Replaceable *bool `json:"Replaceable,omitempty"`

	// The serial number for this power supply.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	// The spare part number for this power supply.
	SparePartNumber *string `json:"SparePartNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The hardware version of this power supply.
	Version *string `json:"Version,omitempty"`
}

// AssertPowerSupplyV153PowerSupplyRequired checks if the required fields are not zero-ed
func AssertPowerSupplyV153PowerSupplyRequired(obj PowerSupplyV153PowerSupply) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPowerSupplyV153ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Assembly); err != nil {
		return err
	}
	for _, el := range obj.EfficiencyRatings {
		if err := AssertPowerSupplyV153EfficiencyRatingRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.InputRanges {
		if err := AssertPowerSupplyV153InputRangeRequired(el); err != nil {
			return err
		}
	}
	if err := AssertPowerSupplyV153LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Metrics); err != nil {
		return err
	}
	for _, el := range obj.OutputRails {
		if err := AssertPowerSupplyV153OutputRailRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertPowerSupplyV153PowerSupplyConstraints checks if the values respects the defined constraints
func AssertPowerSupplyV153PowerSupplyConstraints(obj PowerSupplyV153PowerSupply) error {
	if err := AssertPowerSupplyV153ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Assembly); err != nil {
		return err
	}
	for _, el := range obj.EfficiencyRatings {
		if err := AssertPowerSupplyV153EfficiencyRatingConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.InputRanges {
		if err := AssertPowerSupplyV153InputRangeConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertPowerSupplyV153LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Metrics); err != nil {
		return err
	}
	for _, el := range obj.OutputRails {
		if err := AssertPowerSupplyV153OutputRailConstraints(el); err != nil {
			return err
		}
	}
	if obj.PowerCapacityWatts != nil && *obj.PowerCapacityWatts < 0 {
		return &ParsingError{Param: "PowerCapacityWatts", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
