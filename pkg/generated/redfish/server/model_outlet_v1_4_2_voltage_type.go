// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type OutletV142VoltageType string

// List of OutletV142VoltageType
const (
	OUTLETV142VOLTAGETYPE_AC OutletV142VoltageType = "AC"
	OUTLETV142VOLTAGETYPE_DC OutletV142VoltageType = "DC"
)

// AllowedOutletV142VoltageTypeEnumValues is all the allowed values of OutletV142VoltageType enum
var AllowedOutletV142VoltageTypeEnumValues = []OutletV142VoltageType{
	"AC",
	"DC",
}

// validOutletV142VoltageTypeEnumValue provides a map of OutletV142VoltageTypes for fast verification of use input
var validOutletV142VoltageTypeEnumValues = map[OutletV142VoltageType]struct{}{
	"AC": {},
	"DC": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OutletV142VoltageType) IsValid() bool {
	_, ok := validOutletV142VoltageTypeEnumValues[v]
	return ok
}

// NewOutletV142VoltageTypeFromValue returns a pointer to a valid OutletV142VoltageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOutletV142VoltageTypeFromValue(v string) (OutletV142VoltageType, error) {
	ev := OutletV142VoltageType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for OutletV142VoltageType: valid values are %v", v, AllowedOutletV142VoltageTypeEnumValues)
}

// AssertOutletV142VoltageTypeRequired checks if the required fields are not zero-ed
func AssertOutletV142VoltageTypeRequired(obj OutletV142VoltageType) error {
	return nil
}

// AssertOutletV142VoltageTypeConstraints checks if the values respects the defined constraints
func AssertOutletV142VoltageTypeConstraints(obj OutletV142VoltageType) error {
	return nil
}
