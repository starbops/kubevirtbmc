// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type UpdateServiceV1130ApplyTime string

// List of UpdateServiceV1130ApplyTime
const (
	UPDATESERVICEV1130APPLYTIME_IMMEDIATE                      UpdateServiceV1130ApplyTime = "Immediate"
	UPDATESERVICEV1130APPLYTIME_ON_RESET                       UpdateServiceV1130ApplyTime = "OnReset"
	UPDATESERVICEV1130APPLYTIME_AT_MAINTENANCE_WINDOW_START    UpdateServiceV1130ApplyTime = "AtMaintenanceWindowStart"
	UPDATESERVICEV1130APPLYTIME_IN_MAINTENANCE_WINDOW_ON_RESET UpdateServiceV1130ApplyTime = "InMaintenanceWindowOnReset"
	UPDATESERVICEV1130APPLYTIME_ON_START_UPDATE_REQUEST        UpdateServiceV1130ApplyTime = "OnStartUpdateRequest"
)

// AllowedUpdateServiceV1130ApplyTimeEnumValues is all the allowed values of UpdateServiceV1130ApplyTime enum
var AllowedUpdateServiceV1130ApplyTimeEnumValues = []UpdateServiceV1130ApplyTime{
	"Immediate",
	"OnReset",
	"AtMaintenanceWindowStart",
	"InMaintenanceWindowOnReset",
	"OnStartUpdateRequest",
}

// validUpdateServiceV1130ApplyTimeEnumValue provides a map of UpdateServiceV1130ApplyTimes for fast verification of use input
var validUpdateServiceV1130ApplyTimeEnumValues = map[UpdateServiceV1130ApplyTime]struct{}{
	"Immediate":                  {},
	"OnReset":                    {},
	"AtMaintenanceWindowStart":   {},
	"InMaintenanceWindowOnReset": {},
	"OnStartUpdateRequest":       {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UpdateServiceV1130ApplyTime) IsValid() bool {
	_, ok := validUpdateServiceV1130ApplyTimeEnumValues[v]
	return ok
}

// NewUpdateServiceV1130ApplyTimeFromValue returns a pointer to a valid UpdateServiceV1130ApplyTime
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUpdateServiceV1130ApplyTimeFromValue(v string) (UpdateServiceV1130ApplyTime, error) {
	ev := UpdateServiceV1130ApplyTime(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for UpdateServiceV1130ApplyTime: valid values are %v", v, AllowedUpdateServiceV1130ApplyTimeEnumValues)
}

// AssertUpdateServiceV1130ApplyTimeRequired checks if the required fields are not zero-ed
func AssertUpdateServiceV1130ApplyTimeRequired(obj UpdateServiceV1130ApplyTime) error {
	return nil
}

// AssertUpdateServiceV1130ApplyTimeConstraints checks if the values respects the defined constraints
func AssertUpdateServiceV1130ApplyTimeConstraints(obj UpdateServiceV1130ApplyTime) error {
	return nil
}
