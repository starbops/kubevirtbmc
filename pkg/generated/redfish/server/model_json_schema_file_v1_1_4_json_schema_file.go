// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// JsonSchemaFileV114JsonSchemaFile - The JsonSchemaFile schema contains the properties that describe the locations, as URIs, of a Redfish Schema definition that a Redfish Service implements or references.
type JsonSchemaFileV114JsonSchemaFile struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions JsonSchemaFileV114Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The RFC5646-conformant language codes for the available schemas.
	Languages []string `json:"Languages"`

	// Location information for this schema file.
	Location []JsonSchemaFileV114Location `json:"Location"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The @odata.type name this schema describes.
	Schema string `json:"Schema"`
}

// AssertJsonSchemaFileV114JsonSchemaFileRequired checks if the required fields are not zero-ed
func AssertJsonSchemaFileV114JsonSchemaFileRequired(obj JsonSchemaFileV114JsonSchemaFile) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Languages":   obj.Languages,
		"Location":    obj.Location,
		"Name":        obj.Name,
		"Schema":      obj.Schema,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertJsonSchemaFileV114ActionsRequired(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.Location {
		if err := AssertJsonSchemaFileV114LocationRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertJsonSchemaFileV114JsonSchemaFileConstraints checks if the values respects the defined constraints
func AssertJsonSchemaFileV114JsonSchemaFileConstraints(obj JsonSchemaFileV114JsonSchemaFile) error {
	if err := AssertJsonSchemaFileV114ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.Location {
		if err := AssertJsonSchemaFileV114LocationConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
