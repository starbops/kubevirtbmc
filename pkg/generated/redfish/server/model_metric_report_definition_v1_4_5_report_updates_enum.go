// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// MetricReportDefinitionV145ReportUpdatesEnum : Handling of subsequent metric reports when a metric report exists.
type MetricReportDefinitionV145ReportUpdatesEnum string

// List of MetricReportDefinitionV145ReportUpdatesEnum
const (
	METRICREPORTDEFINITIONV145REPORTUPDATESENUM_OVERWRITE              MetricReportDefinitionV145ReportUpdatesEnum = "Overwrite"
	METRICREPORTDEFINITIONV145REPORTUPDATESENUM_APPEND_WRAPS_WHEN_FULL MetricReportDefinitionV145ReportUpdatesEnum = "AppendWrapsWhenFull"
	METRICREPORTDEFINITIONV145REPORTUPDATESENUM_APPEND_STOPS_WHEN_FULL MetricReportDefinitionV145ReportUpdatesEnum = "AppendStopsWhenFull"
	METRICREPORTDEFINITIONV145REPORTUPDATESENUM_NEW_REPORT             MetricReportDefinitionV145ReportUpdatesEnum = "NewReport"
)

// AllowedMetricReportDefinitionV145ReportUpdatesEnumEnumValues is all the allowed values of MetricReportDefinitionV145ReportUpdatesEnum enum
var AllowedMetricReportDefinitionV145ReportUpdatesEnumEnumValues = []MetricReportDefinitionV145ReportUpdatesEnum{
	"Overwrite",
	"AppendWrapsWhenFull",
	"AppendStopsWhenFull",
	"NewReport",
}

// validMetricReportDefinitionV145ReportUpdatesEnumEnumValue provides a map of MetricReportDefinitionV145ReportUpdatesEnums for fast verification of use input
var validMetricReportDefinitionV145ReportUpdatesEnumEnumValues = map[MetricReportDefinitionV145ReportUpdatesEnum]struct{}{
	"Overwrite":           {},
	"AppendWrapsWhenFull": {},
	"AppendStopsWhenFull": {},
	"NewReport":           {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricReportDefinitionV145ReportUpdatesEnum) IsValid() bool {
	_, ok := validMetricReportDefinitionV145ReportUpdatesEnumEnumValues[v]
	return ok
}

// NewMetricReportDefinitionV145ReportUpdatesEnumFromValue returns a pointer to a valid MetricReportDefinitionV145ReportUpdatesEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricReportDefinitionV145ReportUpdatesEnumFromValue(v string) (MetricReportDefinitionV145ReportUpdatesEnum, error) {
	ev := MetricReportDefinitionV145ReportUpdatesEnum(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for MetricReportDefinitionV145ReportUpdatesEnum: valid values are %v", v, AllowedMetricReportDefinitionV145ReportUpdatesEnumEnumValues)
}

// AssertMetricReportDefinitionV145ReportUpdatesEnumRequired checks if the required fields are not zero-ed
func AssertMetricReportDefinitionV145ReportUpdatesEnumRequired(obj MetricReportDefinitionV145ReportUpdatesEnum) error {
	return nil
}

// AssertMetricReportDefinitionV145ReportUpdatesEnumConstraints checks if the values respects the defined constraints
func AssertMetricReportDefinitionV145ReportUpdatesEnumConstraints(obj MetricReportDefinitionV145ReportUpdatesEnum) error {
	return nil
}
