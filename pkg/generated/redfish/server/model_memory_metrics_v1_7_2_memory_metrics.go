// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// MemoryMetricsV172MemoryMetrics - The usage and health statistics for a memory device or system memory summary.
type MemoryMetricsV172MemoryMetrics struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions MemoryMetricsV172Actions `json:"Actions,omitempty"`

	// The memory bandwidth utilization as a percentage.
	BandwidthPercent *float32 `json:"BandwidthPercent,omitempty"`

	// The block size, in bytes.
	BlockSizeBytes *int64 `json:"BlockSizeBytes,omitempty"`

	CXL MemoryMetricsV172Cxl `json:"CXL,omitempty"`

	// The memory capacity utilization as a percentage.
	CapacityUtilizationPercent *float32 `json:"CapacityUtilizationPercent,omitempty"`

	// The number of corrected errors in persistent memory.
	CorrectedPersistentErrorCount *int64 `json:"CorrectedPersistentErrorCount,omitempty"`

	// The number of corrected errors in volatile memory.
	CorrectedVolatileErrorCount *int64 `json:"CorrectedVolatileErrorCount,omitempty"`

	CurrentPeriod MemoryMetricsV172CurrentPeriod `json:"CurrentPeriod,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The number of shutdowns while outstanding writes have not completed to persistent memory.
	DirtyShutdownCount *int64 `json:"DirtyShutdownCount,omitempty"`

	HealthData MemoryMetricsV172HealthData `json:"HealthData,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	LifeTime MemoryMetricsV172LifeTime `json:"LifeTime,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// Operating speed of memory in MHz or MT/s as appropriate.
	OperatingSpeedMHz *int64 `json:"OperatingSpeedMHz,omitempty"`
}

// AssertMemoryMetricsV172MemoryMetricsRequired checks if the required fields are not zero-ed
func AssertMemoryMetricsV172MemoryMetricsRequired(obj MemoryMetricsV172MemoryMetrics) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertMemoryMetricsV172ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertMemoryMetricsV172CxlRequired(obj.CXL); err != nil {
		return err
	}
	if err := AssertMemoryMetricsV172CurrentPeriodRequired(obj.CurrentPeriod); err != nil {
		return err
	}
	if err := AssertMemoryMetricsV172HealthDataRequired(obj.HealthData); err != nil {
		return err
	}
	if err := AssertMemoryMetricsV172LifeTimeRequired(obj.LifeTime); err != nil {
		return err
	}
	return nil
}

// AssertMemoryMetricsV172MemoryMetricsConstraints checks if the values respects the defined constraints
func AssertMemoryMetricsV172MemoryMetricsConstraints(obj MemoryMetricsV172MemoryMetrics) error {
	if err := AssertMemoryMetricsV172ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if obj.BandwidthPercent != nil && *obj.BandwidthPercent < 0 {
		return &ParsingError{Param: "BandwidthPercent", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertMemoryMetricsV172CxlConstraints(obj.CXL); err != nil {
		return err
	}
	if obj.CapacityUtilizationPercent != nil && *obj.CapacityUtilizationPercent < 0 {
		return &ParsingError{Param: "CapacityUtilizationPercent", Err: errors.New(errMsgMinValueConstraint)}
	}
	if err := AssertMemoryMetricsV172CurrentPeriodConstraints(obj.CurrentPeriod); err != nil {
		return err
	}
	if err := AssertMemoryMetricsV172HealthDataConstraints(obj.HealthData); err != nil {
		return err
	}
	if err := AssertMemoryMetricsV172LifeTimeConstraints(obj.LifeTime); err != nil {
		return err
	}
	return nil
}
