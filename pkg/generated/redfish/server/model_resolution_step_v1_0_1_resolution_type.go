// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2024.3
 */

package server

import (
	"fmt"
)

type ResolutionStepV101ResolutionType string

// List of ResolutionStepV101ResolutionType
const (
	RESOLUTIONSTEPV101RESOLUTIONTYPE_CONTACT_VENDOR          ResolutionStepV101ResolutionType = "ContactVendor"
	RESOLUTIONSTEPV101RESOLUTIONTYPE_REPLACE_COMPONENT       ResolutionStepV101ResolutionType = "ReplaceComponent"
	RESOLUTIONSTEPV101RESOLUTIONTYPE_FIRMWARE_UPDATE         ResolutionStepV101ResolutionType = "FirmwareUpdate"
	RESOLUTIONSTEPV101RESOLUTIONTYPE_RESET                   ResolutionStepV101ResolutionType = "Reset"
	RESOLUTIONSTEPV101RESOLUTIONTYPE_POWER_CYCLE             ResolutionStepV101ResolutionType = "PowerCycle"
	RESOLUTIONSTEPV101RESOLUTIONTYPE_RESET_TO_DEFAULTS       ResolutionStepV101ResolutionType = "ResetToDefaults"
	RESOLUTIONSTEPV101RESOLUTIONTYPE_COLLECT_DIAGNOSTIC_DATA ResolutionStepV101ResolutionType = "CollectDiagnosticData"
	RESOLUTIONSTEPV101RESOLUTIONTYPE_OEM                     ResolutionStepV101ResolutionType = "OEM"
)

// AllowedResolutionStepV101ResolutionTypeEnumValues is all the allowed values of ResolutionStepV101ResolutionType enum
var AllowedResolutionStepV101ResolutionTypeEnumValues = []ResolutionStepV101ResolutionType{
	"ContactVendor",
	"ReplaceComponent",
	"FirmwareUpdate",
	"Reset",
	"PowerCycle",
	"ResetToDefaults",
	"CollectDiagnosticData",
	"OEM",
}

// validResolutionStepV101ResolutionTypeEnumValue provides a map of ResolutionStepV101ResolutionTypes for fast verification of use input
var validResolutionStepV101ResolutionTypeEnumValues = map[ResolutionStepV101ResolutionType]struct{}{
	"ContactVendor":         {},
	"ReplaceComponent":      {},
	"FirmwareUpdate":        {},
	"Reset":                 {},
	"PowerCycle":            {},
	"ResetToDefaults":       {},
	"CollectDiagnosticData": {},
	"OEM":                   {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResolutionStepV101ResolutionType) IsValid() bool {
	_, ok := validResolutionStepV101ResolutionTypeEnumValues[v]
	return ok
}

// NewResolutionStepV101ResolutionTypeFromValue returns a pointer to a valid ResolutionStepV101ResolutionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResolutionStepV101ResolutionTypeFromValue(v string) (ResolutionStepV101ResolutionType, error) {
	ev := ResolutionStepV101ResolutionType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ResolutionStepV101ResolutionType: valid values are %v", v, AllowedResolutionStepV101ResolutionTypeEnumValues)
}

// AssertResolutionStepV101ResolutionTypeRequired checks if the required fields are not zero-ed
func AssertResolutionStepV101ResolutionTypeRequired(obj ResolutionStepV101ResolutionType) error {
	return nil
}

// AssertResolutionStepV101ResolutionTypeConstraints checks if the values respects the defined constraints
func AssertResolutionStepV101ResolutionTypeConstraints(obj ResolutionStepV101ResolutionType) error {
	return nil
}
