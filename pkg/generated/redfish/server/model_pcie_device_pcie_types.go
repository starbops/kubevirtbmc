// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PcieDevicePcieTypes string

// List of PcieDevicePcieTypes
const (
	PCIEDEVICEPCIETYPES_GEN1 PcieDevicePcieTypes = "Gen1"
	PCIEDEVICEPCIETYPES_GEN2 PcieDevicePcieTypes = "Gen2"
	PCIEDEVICEPCIETYPES_GEN3 PcieDevicePcieTypes = "Gen3"
	PCIEDEVICEPCIETYPES_GEN4 PcieDevicePcieTypes = "Gen4"
	PCIEDEVICEPCIETYPES_GEN5 PcieDevicePcieTypes = "Gen5"
	PCIEDEVICEPCIETYPES_GEN6 PcieDevicePcieTypes = "Gen6"
)

// AllowedPcieDevicePcieTypesEnumValues is all the allowed values of PcieDevicePcieTypes enum
var AllowedPcieDevicePcieTypesEnumValues = []PcieDevicePcieTypes{
	"Gen1",
	"Gen2",
	"Gen3",
	"Gen4",
	"Gen5",
	"Gen6",
}

// validPcieDevicePcieTypesEnumValue provides a map of PcieDevicePcieTypess for fast verification of use input
var validPcieDevicePcieTypesEnumValues = map[PcieDevicePcieTypes]struct{}{
	"Gen1": {},
	"Gen2": {},
	"Gen3": {},
	"Gen4": {},
	"Gen5": {},
	"Gen6": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PcieDevicePcieTypes) IsValid() bool {
	_, ok := validPcieDevicePcieTypesEnumValues[v]
	return ok
}

// NewPcieDevicePcieTypesFromValue returns a pointer to a valid PcieDevicePcieTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPcieDevicePcieTypesFromValue(v string) (PcieDevicePcieTypes, error) {
	ev := PcieDevicePcieTypes(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PcieDevicePcieTypes: valid values are %v", v, AllowedPcieDevicePcieTypesEnumValues)
}

// AssertPcieDevicePcieTypesRequired checks if the required fields are not zero-ed
func AssertPcieDevicePcieTypesRequired(obj PcieDevicePcieTypes) error {
	return nil
}

// AssertPcieDevicePcieTypesConstraints checks if the values respects the defined constraints
func AssertPcieDevicePcieTypesConstraints(obj PcieDevicePcieTypes) error {
	return nil
}
