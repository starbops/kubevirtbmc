// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// StorageReplicaInfoV140ReplicaReadOnlyAccess : Values of ReplicaReadOnlyAccess specify whether the source, the target, or both elements are read only to the host.
type StorageReplicaInfoV140ReplicaReadOnlyAccess string

// List of StorageReplicaInfoV140ReplicaReadOnlyAccess
const (
	STORAGEREPLICAINFOV140REPLICAREADONLYACCESS_SOURCE_ELEMENT  StorageReplicaInfoV140ReplicaReadOnlyAccess = "SourceElement"
	STORAGEREPLICAINFOV140REPLICAREADONLYACCESS_REPLICA_ELEMENT StorageReplicaInfoV140ReplicaReadOnlyAccess = "ReplicaElement"
	STORAGEREPLICAINFOV140REPLICAREADONLYACCESS_BOTH            StorageReplicaInfoV140ReplicaReadOnlyAccess = "Both"
)

// AllowedStorageReplicaInfoV140ReplicaReadOnlyAccessEnumValues is all the allowed values of StorageReplicaInfoV140ReplicaReadOnlyAccess enum
var AllowedStorageReplicaInfoV140ReplicaReadOnlyAccessEnumValues = []StorageReplicaInfoV140ReplicaReadOnlyAccess{
	"SourceElement",
	"ReplicaElement",
	"Both",
}

// validStorageReplicaInfoV140ReplicaReadOnlyAccessEnumValue provides a map of StorageReplicaInfoV140ReplicaReadOnlyAccesss for fast verification of use input
var validStorageReplicaInfoV140ReplicaReadOnlyAccessEnumValues = map[StorageReplicaInfoV140ReplicaReadOnlyAccess]struct{}{
	"SourceElement":  {},
	"ReplicaElement": {},
	"Both":           {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StorageReplicaInfoV140ReplicaReadOnlyAccess) IsValid() bool {
	_, ok := validStorageReplicaInfoV140ReplicaReadOnlyAccessEnumValues[v]
	return ok
}

// NewStorageReplicaInfoV140ReplicaReadOnlyAccessFromValue returns a pointer to a valid StorageReplicaInfoV140ReplicaReadOnlyAccess
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStorageReplicaInfoV140ReplicaReadOnlyAccessFromValue(v string) (StorageReplicaInfoV140ReplicaReadOnlyAccess, error) {
	ev := StorageReplicaInfoV140ReplicaReadOnlyAccess(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for StorageReplicaInfoV140ReplicaReadOnlyAccess: valid values are %v", v, AllowedStorageReplicaInfoV140ReplicaReadOnlyAccessEnumValues)
}

// AssertStorageReplicaInfoV140ReplicaReadOnlyAccessRequired checks if the required fields are not zero-ed
func AssertStorageReplicaInfoV140ReplicaReadOnlyAccessRequired(obj StorageReplicaInfoV140ReplicaReadOnlyAccess) error {
	return nil
}

// AssertStorageReplicaInfoV140ReplicaReadOnlyAccessConstraints checks if the values respects the defined constraints
func AssertStorageReplicaInfoV140ReplicaReadOnlyAccessConstraints(obj StorageReplicaInfoV140ReplicaReadOnlyAccess) error {
	return nil
}
