// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// DataStorageLoSCapabilitiesStorageAccessCapability : Values of StorageAccessCapability describe abilities to read or write storage.
type DataStorageLoSCapabilitiesStorageAccessCapability string

// List of DataStorageLoSCapabilitiesStorageAccessCapability
const (
	DATASTORAGELOSCAPABILITIESSTORAGEACCESSCAPABILITY_READ       DataStorageLoSCapabilitiesStorageAccessCapability = "Read"
	DATASTORAGELOSCAPABILITIESSTORAGEACCESSCAPABILITY_WRITE      DataStorageLoSCapabilitiesStorageAccessCapability = "Write"
	DATASTORAGELOSCAPABILITIESSTORAGEACCESSCAPABILITY_WRITE_ONCE DataStorageLoSCapabilitiesStorageAccessCapability = "WriteOnce"
	DATASTORAGELOSCAPABILITIESSTORAGEACCESSCAPABILITY_APPEND     DataStorageLoSCapabilitiesStorageAccessCapability = "Append"
	DATASTORAGELOSCAPABILITIESSTORAGEACCESSCAPABILITY_STREAMING  DataStorageLoSCapabilitiesStorageAccessCapability = "Streaming"
	DATASTORAGELOSCAPABILITIESSTORAGEACCESSCAPABILITY_EXECUTE    DataStorageLoSCapabilitiesStorageAccessCapability = "Execute"
)

// AllowedDataStorageLoSCapabilitiesStorageAccessCapabilityEnumValues is all the allowed values of DataStorageLoSCapabilitiesStorageAccessCapability enum
var AllowedDataStorageLoSCapabilitiesStorageAccessCapabilityEnumValues = []DataStorageLoSCapabilitiesStorageAccessCapability{
	"Read",
	"Write",
	"WriteOnce",
	"Append",
	"Streaming",
	"Execute",
}

// validDataStorageLoSCapabilitiesStorageAccessCapabilityEnumValue provides a map of DataStorageLoSCapabilitiesStorageAccessCapabilitys for fast verification of use input
var validDataStorageLoSCapabilitiesStorageAccessCapabilityEnumValues = map[DataStorageLoSCapabilitiesStorageAccessCapability]struct{}{
	"Read":      {},
	"Write":     {},
	"WriteOnce": {},
	"Append":    {},
	"Streaming": {},
	"Execute":   {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataStorageLoSCapabilitiesStorageAccessCapability) IsValid() bool {
	_, ok := validDataStorageLoSCapabilitiesStorageAccessCapabilityEnumValues[v]
	return ok
}

// NewDataStorageLoSCapabilitiesStorageAccessCapabilityFromValue returns a pointer to a valid DataStorageLoSCapabilitiesStorageAccessCapability
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataStorageLoSCapabilitiesStorageAccessCapabilityFromValue(v string) (DataStorageLoSCapabilitiesStorageAccessCapability, error) {
	ev := DataStorageLoSCapabilitiesStorageAccessCapability(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for DataStorageLoSCapabilitiesStorageAccessCapability: valid values are %v", v, AllowedDataStorageLoSCapabilitiesStorageAccessCapabilityEnumValues)
}

// AssertDataStorageLoSCapabilitiesStorageAccessCapabilityRequired checks if the required fields are not zero-ed
func AssertDataStorageLoSCapabilitiesStorageAccessCapabilityRequired(obj DataStorageLoSCapabilitiesStorageAccessCapability) error {
	return nil
}

// AssertDataStorageLoSCapabilitiesStorageAccessCapabilityConstraints checks if the values respects the defined constraints
func AssertDataStorageLoSCapabilitiesStorageAccessCapabilityConstraints(obj DataStorageLoSCapabilitiesStorageAccessCapability) error {
	return nil
}
