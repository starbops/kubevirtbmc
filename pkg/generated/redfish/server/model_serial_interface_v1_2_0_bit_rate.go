// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type SerialInterfaceV120BitRate string

// List of SerialInterfaceV120BitRate
const (
	SERIALINTERFACEV120BITRATE__1200   SerialInterfaceV120BitRate = "1200"
	SERIALINTERFACEV120BITRATE__2400   SerialInterfaceV120BitRate = "2400"
	SERIALINTERFACEV120BITRATE__4800   SerialInterfaceV120BitRate = "4800"
	SERIALINTERFACEV120BITRATE__9600   SerialInterfaceV120BitRate = "9600"
	SERIALINTERFACEV120BITRATE__19200  SerialInterfaceV120BitRate = "19200"
	SERIALINTERFACEV120BITRATE__38400  SerialInterfaceV120BitRate = "38400"
	SERIALINTERFACEV120BITRATE__57600  SerialInterfaceV120BitRate = "57600"
	SERIALINTERFACEV120BITRATE__115200 SerialInterfaceV120BitRate = "115200"
	SERIALINTERFACEV120BITRATE__230400 SerialInterfaceV120BitRate = "230400"
)

// AllowedSerialInterfaceV120BitRateEnumValues is all the allowed values of SerialInterfaceV120BitRate enum
var AllowedSerialInterfaceV120BitRateEnumValues = []SerialInterfaceV120BitRate{
	"1200",
	"2400",
	"4800",
	"9600",
	"19200",
	"38400",
	"57600",
	"115200",
	"230400",
}

// validSerialInterfaceV120BitRateEnumValue provides a map of SerialInterfaceV120BitRates for fast verification of use input
var validSerialInterfaceV120BitRateEnumValues = map[SerialInterfaceV120BitRate]struct{}{
	"1200":   {},
	"2400":   {},
	"4800":   {},
	"9600":   {},
	"19200":  {},
	"38400":  {},
	"57600":  {},
	"115200": {},
	"230400": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SerialInterfaceV120BitRate) IsValid() bool {
	_, ok := validSerialInterfaceV120BitRateEnumValues[v]
	return ok
}

// NewSerialInterfaceV120BitRateFromValue returns a pointer to a valid SerialInterfaceV120BitRate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSerialInterfaceV120BitRateFromValue(v string) (SerialInterfaceV120BitRate, error) {
	ev := SerialInterfaceV120BitRate(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for SerialInterfaceV120BitRate: valid values are %v", v, AllowedSerialInterfaceV120BitRateEnumValues)
}

// AssertSerialInterfaceV120BitRateRequired checks if the required fields are not zero-ed
func AssertSerialInterfaceV120BitRateRequired(obj SerialInterfaceV120BitRate) error {
	return nil
}

// AssertSerialInterfaceV120BitRateConstraints checks if the values respects the defined constraints
func AssertSerialInterfaceV120BitRateConstraints(obj SerialInterfaceV120BitRate) error {
	return nil
}
