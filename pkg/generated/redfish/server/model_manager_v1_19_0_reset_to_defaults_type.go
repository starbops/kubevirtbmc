// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ManagerV1190ResetToDefaultsType string

// List of ManagerV1190ResetToDefaultsType
const (
	MANAGERV1190RESETTODEFAULTSTYPE_RESET_ALL                  ManagerV1190ResetToDefaultsType = "ResetAll"
	MANAGERV1190RESETTODEFAULTSTYPE_PRESERVE_NETWORK_AND_USERS ManagerV1190ResetToDefaultsType = "PreserveNetworkAndUsers"
	MANAGERV1190RESETTODEFAULTSTYPE_PRESERVE_NETWORK           ManagerV1190ResetToDefaultsType = "PreserveNetwork"
)

// AllowedManagerV1190ResetToDefaultsTypeEnumValues is all the allowed values of ManagerV1190ResetToDefaultsType enum
var AllowedManagerV1190ResetToDefaultsTypeEnumValues = []ManagerV1190ResetToDefaultsType{
	"ResetAll",
	"PreserveNetworkAndUsers",
	"PreserveNetwork",
}

// validManagerV1190ResetToDefaultsTypeEnumValue provides a map of ManagerV1190ResetToDefaultsTypes for fast verification of use input
var validManagerV1190ResetToDefaultsTypeEnumValues = map[ManagerV1190ResetToDefaultsType]struct{}{
	"ResetAll":                {},
	"PreserveNetworkAndUsers": {},
	"PreserveNetwork":         {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ManagerV1190ResetToDefaultsType) IsValid() bool {
	_, ok := validManagerV1190ResetToDefaultsTypeEnumValues[v]
	return ok
}

// NewManagerV1190ResetToDefaultsTypeFromValue returns a pointer to a valid ManagerV1190ResetToDefaultsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewManagerV1190ResetToDefaultsTypeFromValue(v string) (ManagerV1190ResetToDefaultsType, error) {
	ev := ManagerV1190ResetToDefaultsType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ManagerV1190ResetToDefaultsType: valid values are %v", v, AllowedManagerV1190ResetToDefaultsTypeEnumValues)
}

// AssertManagerV1190ResetToDefaultsTypeRequired checks if the required fields are not zero-ed
func AssertManagerV1190ResetToDefaultsTypeRequired(obj ManagerV1190ResetToDefaultsType) error {
	return nil
}

// AssertManagerV1190ResetToDefaultsTypeConstraints checks if the values respects the defined constraints
func AssertManagerV1190ResetToDefaultsTypeConstraints(obj ManagerV1190ResetToDefaultsType) error {
	return nil
}
