// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type AccountServiceV1150AuthenticationTypes string

// List of AccountServiceV1150AuthenticationTypes
const (
	ACCOUNTSERVICEV1150AUTHENTICATIONTYPES_TOKEN                 AccountServiceV1150AuthenticationTypes = "Token"
	ACCOUNTSERVICEV1150AUTHENTICATIONTYPES_KERBEROS_KEYTAB       AccountServiceV1150AuthenticationTypes = "KerberosKeytab"
	ACCOUNTSERVICEV1150AUTHENTICATIONTYPES_USERNAME_AND_PASSWORD AccountServiceV1150AuthenticationTypes = "UsernameAndPassword"
	ACCOUNTSERVICEV1150AUTHENTICATIONTYPES_OEM                   AccountServiceV1150AuthenticationTypes = "OEM"
)

// AllowedAccountServiceV1150AuthenticationTypesEnumValues is all the allowed values of AccountServiceV1150AuthenticationTypes enum
var AllowedAccountServiceV1150AuthenticationTypesEnumValues = []AccountServiceV1150AuthenticationTypes{
	"Token",
	"KerberosKeytab",
	"UsernameAndPassword",
	"OEM",
}

// validAccountServiceV1150AuthenticationTypesEnumValue provides a map of AccountServiceV1150AuthenticationTypess for fast verification of use input
var validAccountServiceV1150AuthenticationTypesEnumValues = map[AccountServiceV1150AuthenticationTypes]struct{}{
	"Token":               {},
	"KerberosKeytab":      {},
	"UsernameAndPassword": {},
	"OEM":                 {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountServiceV1150AuthenticationTypes) IsValid() bool {
	_, ok := validAccountServiceV1150AuthenticationTypesEnumValues[v]
	return ok
}

// NewAccountServiceV1150AuthenticationTypesFromValue returns a pointer to a valid AccountServiceV1150AuthenticationTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountServiceV1150AuthenticationTypesFromValue(v string) (AccountServiceV1150AuthenticationTypes, error) {
	ev := AccountServiceV1150AuthenticationTypes(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for AccountServiceV1150AuthenticationTypes: valid values are %v", v, AllowedAccountServiceV1150AuthenticationTypesEnumValues)
}

// AssertAccountServiceV1150AuthenticationTypesRequired checks if the required fields are not zero-ed
func AssertAccountServiceV1150AuthenticationTypesRequired(obj AccountServiceV1150AuthenticationTypes) error {
	return nil
}

// AssertAccountServiceV1150AuthenticationTypesConstraints checks if the values respects the defined constraints
func AssertAccountServiceV1150AuthenticationTypesConstraints(obj AccountServiceV1150AuthenticationTypes) error {
	return nil
}
