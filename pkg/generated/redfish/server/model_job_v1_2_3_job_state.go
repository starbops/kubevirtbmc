// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type JobV123JobState string

// List of JobV123JobState
const (
	JOBV123JOBSTATE_NEW               JobV123JobState = "New"
	JOBV123JOBSTATE_STARTING          JobV123JobState = "Starting"
	JOBV123JOBSTATE_RUNNING           JobV123JobState = "Running"
	JOBV123JOBSTATE_SUSPENDED         JobV123JobState = "Suspended"
	JOBV123JOBSTATE_INTERRUPTED       JobV123JobState = "Interrupted"
	JOBV123JOBSTATE_PENDING           JobV123JobState = "Pending"
	JOBV123JOBSTATE_STOPPING          JobV123JobState = "Stopping"
	JOBV123JOBSTATE_COMPLETED         JobV123JobState = "Completed"
	JOBV123JOBSTATE_CANCELLED         JobV123JobState = "Cancelled"
	JOBV123JOBSTATE_EXCEPTION         JobV123JobState = "Exception"
	JOBV123JOBSTATE_SERVICE           JobV123JobState = "Service"
	JOBV123JOBSTATE_USER_INTERVENTION JobV123JobState = "UserIntervention"
	JOBV123JOBSTATE_CONTINUE          JobV123JobState = "Continue"
)

// AllowedJobV123JobStateEnumValues is all the allowed values of JobV123JobState enum
var AllowedJobV123JobStateEnumValues = []JobV123JobState{
	"New",
	"Starting",
	"Running",
	"Suspended",
	"Interrupted",
	"Pending",
	"Stopping",
	"Completed",
	"Cancelled",
	"Exception",
	"Service",
	"UserIntervention",
	"Continue",
}

// validJobV123JobStateEnumValue provides a map of JobV123JobStates for fast verification of use input
var validJobV123JobStateEnumValues = map[JobV123JobState]struct{}{
	"New":              {},
	"Starting":         {},
	"Running":          {},
	"Suspended":        {},
	"Interrupted":      {},
	"Pending":          {},
	"Stopping":         {},
	"Completed":        {},
	"Cancelled":        {},
	"Exception":        {},
	"Service":          {},
	"UserIntervention": {},
	"Continue":         {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobV123JobState) IsValid() bool {
	_, ok := validJobV123JobStateEnumValues[v]
	return ok
}

// NewJobV123JobStateFromValue returns a pointer to a valid JobV123JobState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobV123JobStateFromValue(v string) (JobV123JobState, error) {
	ev := JobV123JobState(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for JobV123JobState: valid values are %v", v, AllowedJobV123JobStateEnumValues)
}

// AssertJobV123JobStateRequired checks if the required fields are not zero-ed
func AssertJobV123JobStateRequired(obj JobV123JobState) error {
	return nil
}

// AssertJobV123JobStateConstraints checks if the values respects the defined constraints
func AssertJobV123JobStateConstraints(obj JobV123JobState) error {
	return nil
}
