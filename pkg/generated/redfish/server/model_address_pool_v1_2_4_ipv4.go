// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// AddressPoolV124Ipv4 - IPv4 and Virtual LAN (VLAN) related addressing for an Ethernet fabric.
type AddressPoolV124Ipv4 struct {

	// The anycast gateway IPv4 address.
	AnycastGatewayIPAddress *string `json:"AnycastGatewayIPAddress,omitempty" validate:"regexp=^(?:[0-9]{1,3}\\\\.){3}[0-9]{1,3}$"`

	// The anycast gateway MAC address.
	AnycastGatewayMACAddress *string `json:"AnycastGatewayMACAddress,omitempty" validate:"regexp=^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"`

	DHCP AddressPoolV124Dhcp `json:"DHCP,omitempty"`

	// The Domain Name Service (DNS) domain name for this Ethernet fabric.
	DNSDomainName *string `json:"DNSDomainName,omitempty"`

	// The Domain Name Service (DNS) servers for this Ethernet fabric.
	DNSServer []*string `json:"DNSServer,omitempty"`

	// Indicates if host subnets should be distributed into the fabric underlay.
	DistributeIntoUnderlayEnabled *bool `json:"DistributeIntoUnderlayEnabled,omitempty"`

	EBGPAddressRange AddressPoolV124Ipv4AddressRange `json:"EBGPAddressRange,omitempty"`

	FabricLinkAddressRange AddressPoolV124Ipv4AddressRange `json:"FabricLinkAddressRange,omitempty"`

	// The gateway IPv4 address.
	GatewayIPAddress *string `json:"GatewayIPAddress,omitempty" validate:"regexp=^(?:[0-9]{1,3}\\\\.){3}[0-9]{1,3}$"`

	HostAddressRange AddressPoolV124Ipv4AddressRange `json:"HostAddressRange,omitempty"`

	IBGPAddressRange AddressPoolV124Ipv4AddressRange `json:"IBGPAddressRange,omitempty"`

	LoopbackAddressRange AddressPoolV124Ipv4AddressRange `json:"LoopbackAddressRange,omitempty"`

	ManagementAddressRange AddressPoolV124Ipv4AddressRange `json:"ManagementAddressRange,omitempty"`

	// The Network Time Protocol (NTP) offset configuration.
	NTPOffsetHoursMinutes *int64 `json:"NTPOffsetHoursMinutes,omitempty"`

	// The Network Time Protocol (NTP) servers for this Ethernet fabric.
	NTPServer []*string `json:"NTPServer,omitempty"`

	// The Network Time Protocol (NTP) time zone for this Ethernet fabric.
	NTPTimezone *string `json:"NTPTimezone,omitempty"`

	// The untagged Virtual LAN (VLAN) ID value.
	NativeVLAN *int64 `json:"NativeVLAN,omitempty"`

	SystemMACRange AddressPoolV124SystemMacRange `json:"SystemMACRange,omitempty"`

	VLANIdentifierAddressRange AddressPoolV124VlanIdentifierAddressRange `json:"VLANIdentifierAddressRange,omitempty"`
}

// AssertAddressPoolV124Ipv4Required checks if the required fields are not zero-ed
func AssertAddressPoolV124Ipv4Required(obj AddressPoolV124Ipv4) error {
	if err := AssertAddressPoolV124DhcpRequired(obj.DHCP); err != nil {
		return err
	}
	if err := AssertAddressPoolV124Ipv4AddressRangeRequired(obj.EBGPAddressRange); err != nil {
		return err
	}
	if err := AssertAddressPoolV124Ipv4AddressRangeRequired(obj.FabricLinkAddressRange); err != nil {
		return err
	}
	if err := AssertAddressPoolV124Ipv4AddressRangeRequired(obj.HostAddressRange); err != nil {
		return err
	}
	if err := AssertAddressPoolV124Ipv4AddressRangeRequired(obj.IBGPAddressRange); err != nil {
		return err
	}
	if err := AssertAddressPoolV124Ipv4AddressRangeRequired(obj.LoopbackAddressRange); err != nil {
		return err
	}
	if err := AssertAddressPoolV124Ipv4AddressRangeRequired(obj.ManagementAddressRange); err != nil {
		return err
	}
	if err := AssertAddressPoolV124SystemMacRangeRequired(obj.SystemMACRange); err != nil {
		return err
	}
	if err := AssertAddressPoolV124VlanIdentifierAddressRangeRequired(obj.VLANIdentifierAddressRange); err != nil {
		return err
	}
	return nil
}

// AssertAddressPoolV124Ipv4Constraints checks if the values respects the defined constraints
func AssertAddressPoolV124Ipv4Constraints(obj AddressPoolV124Ipv4) error {
	if err := AssertAddressPoolV124DhcpConstraints(obj.DHCP); err != nil {
		return err
	}
	if err := AssertAddressPoolV124Ipv4AddressRangeConstraints(obj.EBGPAddressRange); err != nil {
		return err
	}
	if err := AssertAddressPoolV124Ipv4AddressRangeConstraints(obj.FabricLinkAddressRange); err != nil {
		return err
	}
	if err := AssertAddressPoolV124Ipv4AddressRangeConstraints(obj.HostAddressRange); err != nil {
		return err
	}
	if err := AssertAddressPoolV124Ipv4AddressRangeConstraints(obj.IBGPAddressRange); err != nil {
		return err
	}
	if err := AssertAddressPoolV124Ipv4AddressRangeConstraints(obj.LoopbackAddressRange); err != nil {
		return err
	}
	if err := AssertAddressPoolV124Ipv4AddressRangeConstraints(obj.ManagementAddressRange); err != nil {
		return err
	}
	if obj.NativeVLAN != nil && *obj.NativeVLAN < 1 {
		return &ParsingError{Param: "NativeVLAN", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.NativeVLAN != nil && *obj.NativeVLAN > 4094 {
		return &ParsingError{Param: "NativeVLAN", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if err := AssertAddressPoolV124SystemMacRangeConstraints(obj.SystemMACRange); err != nil {
		return err
	}
	if err := AssertAddressPoolV124VlanIdentifierAddressRangeConstraints(obj.VLANIdentifierAddressRange); err != nil {
		return err
	}
	return nil
}
