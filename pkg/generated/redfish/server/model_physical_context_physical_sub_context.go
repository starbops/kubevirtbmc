// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PhysicalContextPhysicalSubContext string

// List of PhysicalContextPhysicalSubContext
const (
	PHYSICALCONTEXTPHYSICALSUBCONTEXT_INPUT  PhysicalContextPhysicalSubContext = "Input"
	PHYSICALCONTEXTPHYSICALSUBCONTEXT_OUTPUT PhysicalContextPhysicalSubContext = "Output"
)

// AllowedPhysicalContextPhysicalSubContextEnumValues is all the allowed values of PhysicalContextPhysicalSubContext enum
var AllowedPhysicalContextPhysicalSubContextEnumValues = []PhysicalContextPhysicalSubContext{
	"Input",
	"Output",
}

// validPhysicalContextPhysicalSubContextEnumValue provides a map of PhysicalContextPhysicalSubContexts for fast verification of use input
var validPhysicalContextPhysicalSubContextEnumValues = map[PhysicalContextPhysicalSubContext]struct{}{
	"Input":  {},
	"Output": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PhysicalContextPhysicalSubContext) IsValid() bool {
	_, ok := validPhysicalContextPhysicalSubContextEnumValues[v]
	return ok
}

// NewPhysicalContextPhysicalSubContextFromValue returns a pointer to a valid PhysicalContextPhysicalSubContext
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPhysicalContextPhysicalSubContextFromValue(v string) (PhysicalContextPhysicalSubContext, error) {
	ev := PhysicalContextPhysicalSubContext(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PhysicalContextPhysicalSubContext: valid values are %v", v, AllowedPhysicalContextPhysicalSubContextEnumValues)
}

// AssertPhysicalContextPhysicalSubContextRequired checks if the required fields are not zero-ed
func AssertPhysicalContextPhysicalSubContextRequired(obj PhysicalContextPhysicalSubContext) error {
	return nil
}

// AssertPhysicalContextPhysicalSubContextConstraints checks if the values respects the defined constraints
func AssertPhysicalContextPhysicalSubContextConstraints(obj PhysicalContextPhysicalSubContext) error {
	return nil
}
