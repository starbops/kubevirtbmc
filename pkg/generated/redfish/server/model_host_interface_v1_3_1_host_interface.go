// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// HostInterfaceV131HostInterface - The properties associated with a Redfish host interface.  A Redfish host interface is a connection between host software and a Redfish service.
type HostInterfaceV131HostInterface struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions HostInterfaceV131Actions `json:"Actions,omitempty"`

	// The role when no authentication on this interface is used.
	AuthNoneRoleId string `json:"AuthNoneRoleId,omitempty"`

	// The authentication modes available on this interface.
	AuthenticationModes []HostInterfaceV131AuthenticationMode `json:"AuthenticationModes,omitempty"`

	CredentialBootstrapping HostInterfaceV131CredentialBootstrapping `json:"CredentialBootstrapping,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// An indication of whether external entities can access this interface.  External entities are non-host entities.  For example, if the host and manager are connected through a switch and the switch also exposes an external port on the system, external clients can also use the interface, and this property value is `true`.
	ExternallyAccessible *bool `json:"ExternallyAccessible,omitempty"`

	// An indication of whether this firmware authentication is enabled for this interface.
	// Deprecated
	FirmwareAuthEnabled *bool `json:"FirmwareAuthEnabled,omitempty"`

	// The Redfish role used for firmware authentication on this interface.
	// Deprecated
	FirmwareAuthRoleId string `json:"FirmwareAuthRoleId,omitempty"`

	HostEthernetInterfaces OdataV4IdRef `json:"HostEthernetInterfaces,omitempty"`

	HostInterfaceType HostInterfaceV131HostInterfaceType `json:"HostInterfaceType,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// An indication of whether this interface is enabled.
	InterfaceEnabled *bool `json:"InterfaceEnabled,omitempty"`

	// An indication of whether this kernel authentication is enabled for this interface.
	// Deprecated
	KernelAuthEnabled *bool `json:"KernelAuthEnabled,omitempty"`

	// The Redfish role used for kernel authentication on this interface.
	// Deprecated
	KernelAuthRoleId string `json:"KernelAuthRoleId,omitempty"`

	Links HostInterfaceV131Links `json:"Links,omitempty"`

	ManagerEthernetInterface OdataV4IdRef `json:"ManagerEthernetInterface,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	NetworkProtocol OdataV4IdRef `json:"NetworkProtocol,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertHostInterfaceV131HostInterfaceRequired checks if the required fields are not zero-ed
func AssertHostInterfaceV131HostInterfaceRequired(obj HostInterfaceV131HostInterface) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertHostInterfaceV131ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertHostInterfaceV131CredentialBootstrappingRequired(obj.CredentialBootstrapping); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.HostEthernetInterfaces); err != nil {
		return err
	}
	if err := AssertHostInterfaceV131LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.ManagerEthernetInterface); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.NetworkProtocol); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertHostInterfaceV131HostInterfaceConstraints checks if the values respects the defined constraints
func AssertHostInterfaceV131HostInterfaceConstraints(obj HostInterfaceV131HostInterface) error {
	if err := AssertHostInterfaceV131ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertHostInterfaceV131CredentialBootstrappingConstraints(obj.CredentialBootstrapping); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.HostEthernetInterfaces); err != nil {
		return err
	}
	if err := AssertHostInterfaceV131LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.ManagerEthernetInterface); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.NetworkProtocol); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
