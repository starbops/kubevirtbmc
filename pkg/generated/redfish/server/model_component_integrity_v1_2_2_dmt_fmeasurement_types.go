// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ComponentIntegrityV122DmtFmeasurementTypes string

// List of ComponentIntegrityV122DmtFmeasurementTypes
const (
	COMPONENTINTEGRITYV122DMTFMEASUREMENTTYPES_IMMUTABLE_ROM                            ComponentIntegrityV122DmtFmeasurementTypes = "ImmutableROM"
	COMPONENTINTEGRITYV122DMTFMEASUREMENTTYPES_MUTABLE_FIRMWARE                         ComponentIntegrityV122DmtFmeasurementTypes = "MutableFirmware"
	COMPONENTINTEGRITYV122DMTFMEASUREMENTTYPES_HARDWARE_CONFIGURATION                   ComponentIntegrityV122DmtFmeasurementTypes = "HardwareConfiguration"
	COMPONENTINTEGRITYV122DMTFMEASUREMENTTYPES_FIRMWARE_CONFIGURATION                   ComponentIntegrityV122DmtFmeasurementTypes = "FirmwareConfiguration"
	COMPONENTINTEGRITYV122DMTFMEASUREMENTTYPES_MUTABLE_FIRMWARE_VERSION                 ComponentIntegrityV122DmtFmeasurementTypes = "MutableFirmwareVersion"
	COMPONENTINTEGRITYV122DMTFMEASUREMENTTYPES_MUTABLE_FIRMWARE_SECURITY_VERSION_NUMBER ComponentIntegrityV122DmtFmeasurementTypes = "MutableFirmwareSecurityVersionNumber"
	COMPONENTINTEGRITYV122DMTFMEASUREMENTTYPES_MEASUREMENT_MANIFEST                     ComponentIntegrityV122DmtFmeasurementTypes = "MeasurementManifest"
)

// AllowedComponentIntegrityV122DmtFmeasurementTypesEnumValues is all the allowed values of ComponentIntegrityV122DmtFmeasurementTypes enum
var AllowedComponentIntegrityV122DmtFmeasurementTypesEnumValues = []ComponentIntegrityV122DmtFmeasurementTypes{
	"ImmutableROM",
	"MutableFirmware",
	"HardwareConfiguration",
	"FirmwareConfiguration",
	"MutableFirmwareVersion",
	"MutableFirmwareSecurityVersionNumber",
	"MeasurementManifest",
}

// validComponentIntegrityV122DmtFmeasurementTypesEnumValue provides a map of ComponentIntegrityV122DmtFmeasurementTypess for fast verification of use input
var validComponentIntegrityV122DmtFmeasurementTypesEnumValues = map[ComponentIntegrityV122DmtFmeasurementTypes]struct{}{
	"ImmutableROM":                         {},
	"MutableFirmware":                      {},
	"HardwareConfiguration":                {},
	"FirmwareConfiguration":                {},
	"MutableFirmwareVersion":               {},
	"MutableFirmwareSecurityVersionNumber": {},
	"MeasurementManifest":                  {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ComponentIntegrityV122DmtFmeasurementTypes) IsValid() bool {
	_, ok := validComponentIntegrityV122DmtFmeasurementTypesEnumValues[v]
	return ok
}

// NewComponentIntegrityV122DmtFmeasurementTypesFromValue returns a pointer to a valid ComponentIntegrityV122DmtFmeasurementTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewComponentIntegrityV122DmtFmeasurementTypesFromValue(v string) (ComponentIntegrityV122DmtFmeasurementTypes, error) {
	ev := ComponentIntegrityV122DmtFmeasurementTypes(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ComponentIntegrityV122DmtFmeasurementTypes: valid values are %v", v, AllowedComponentIntegrityV122DmtFmeasurementTypesEnumValues)
}

// AssertComponentIntegrityV122DmtFmeasurementTypesRequired checks if the required fields are not zero-ed
func AssertComponentIntegrityV122DmtFmeasurementTypesRequired(obj ComponentIntegrityV122DmtFmeasurementTypes) error {
	return nil
}

// AssertComponentIntegrityV122DmtFmeasurementTypesConstraints checks if the values respects the defined constraints
func AssertComponentIntegrityV122DmtFmeasurementTypesConstraints(obj ComponentIntegrityV122DmtFmeasurementTypes) error {
	return nil
}
