// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// EventServiceV1101Smtp - Settings for SMTP event delivery.
type EventServiceV1101Smtp struct {
	Authentication EventServiceV1101SmtpAuthenticationMethods `json:"Authentication,omitempty"`

	ConnectionProtocol EventServiceV1101SmtpConnectionProtocol `json:"ConnectionProtocol,omitempty"`

	// The 'from' email address of the outgoing email.
	FromAddress *string `json:"FromAddress,omitempty"`

	// The password for authentication with the SMTP server.  The value is `null` in responses.
	Password *string `json:"Password,omitempty"`

	// Indicates if the Password property is set.
	PasswordSet bool `json:"PasswordSet,omitempty"`

	// The destination SMTP port.
	Port *int64 `json:"Port,omitempty"`

	// The address of the SMTP server.
	ServerAddress *string `json:"ServerAddress,omitempty"`

	// An indication if SMTP for event delivery is enabled.
	ServiceEnabled *bool `json:"ServiceEnabled,omitempty"`

	// The username for authentication with the SMTP server.
	Username *string `json:"Username,omitempty"`
}

// AssertEventServiceV1101SmtpRequired checks if the required fields are not zero-ed
func AssertEventServiceV1101SmtpRequired(obj EventServiceV1101Smtp) error {
	return nil
}

// AssertEventServiceV1101SmtpConstraints checks if the values respects the defined constraints
func AssertEventServiceV1101SmtpConstraints(obj EventServiceV1101Smtp) error {
	if obj.Port != nil && *obj.Port < 0 {
		return &ParsingError{Param: "Port", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Port != nil && *obj.Port > 65535 {
		return &ParsingError{Param: "Port", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
