// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// FacilityV141Facility - The Facility schema represents the physical location containing equipment, such as a room, building, or campus.
type FacilityV141Facility struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions FacilityV141Actions `json:"Actions,omitempty"`

	AmbientMetrics OdataV4IdRef `json:"AmbientMetrics,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	EnvironmentMetrics OdataV4IdRef `json:"EnvironmentMetrics,omitempty"`

	FacilityType FacilityV141FacilityType `json:"FacilityType"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links FacilityV141Links `json:"Links,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PowerDomains OdataV4IdRef `json:"PowerDomains,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertFacilityV141FacilityRequired checks if the required fields are not zero-ed
func AssertFacilityV141FacilityRequired(obj FacilityV141Facility) error {
	elements := map[string]interface{}{
		"@odata.id":    obj.OdataId,
		"@odata.type":  obj.OdataType,
		"FacilityType": obj.FacilityType,
		"Id":           obj.Id,
		"Name":         obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertFacilityV141ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.AmbientMetrics); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.EnvironmentMetrics); err != nil {
		return err
	}
	if err := AssertFacilityV141LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.PowerDomains); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertFacilityV141FacilityConstraints checks if the values respects the defined constraints
func AssertFacilityV141FacilityConstraints(obj FacilityV141Facility) error {
	if err := AssertFacilityV141ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.AmbientMetrics); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.EnvironmentMetrics); err != nil {
		return err
	}
	if err := AssertFacilityV141LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.PowerDomains); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
