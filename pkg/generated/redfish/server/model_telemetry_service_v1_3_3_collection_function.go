// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// TelemetryServiceV133CollectionFunction : An operation to perform over the sample.
type TelemetryServiceV133CollectionFunction string

// List of TelemetryServiceV133CollectionFunction
const (
	TELEMETRYSERVICEV133COLLECTIONFUNCTION_AVERAGE   TelemetryServiceV133CollectionFunction = "Average"
	TELEMETRYSERVICEV133COLLECTIONFUNCTION_MAXIMUM   TelemetryServiceV133CollectionFunction = "Maximum"
	TELEMETRYSERVICEV133COLLECTIONFUNCTION_MINIMUM   TelemetryServiceV133CollectionFunction = "Minimum"
	TELEMETRYSERVICEV133COLLECTIONFUNCTION_SUMMATION TelemetryServiceV133CollectionFunction = "Summation"
)

// AllowedTelemetryServiceV133CollectionFunctionEnumValues is all the allowed values of TelemetryServiceV133CollectionFunction enum
var AllowedTelemetryServiceV133CollectionFunctionEnumValues = []TelemetryServiceV133CollectionFunction{
	"Average",
	"Maximum",
	"Minimum",
	"Summation",
}

// validTelemetryServiceV133CollectionFunctionEnumValue provides a map of TelemetryServiceV133CollectionFunctions for fast verification of use input
var validTelemetryServiceV133CollectionFunctionEnumValues = map[TelemetryServiceV133CollectionFunction]struct{}{
	"Average":   {},
	"Maximum":   {},
	"Minimum":   {},
	"Summation": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TelemetryServiceV133CollectionFunction) IsValid() bool {
	_, ok := validTelemetryServiceV133CollectionFunctionEnumValues[v]
	return ok
}

// NewTelemetryServiceV133CollectionFunctionFromValue returns a pointer to a valid TelemetryServiceV133CollectionFunction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTelemetryServiceV133CollectionFunctionFromValue(v string) (TelemetryServiceV133CollectionFunction, error) {
	ev := TelemetryServiceV133CollectionFunction(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for TelemetryServiceV133CollectionFunction: valid values are %v", v, AllowedTelemetryServiceV133CollectionFunctionEnumValues)
}

// AssertTelemetryServiceV133CollectionFunctionRequired checks if the required fields are not zero-ed
func AssertTelemetryServiceV133CollectionFunctionRequired(obj TelemetryServiceV133CollectionFunction) error {
	return nil
}

// AssertTelemetryServiceV133CollectionFunctionConstraints checks if the values respects the defined constraints
func AssertTelemetryServiceV133CollectionFunctionConstraints(obj TelemetryServiceV133CollectionFunction) error {
	return nil
}
