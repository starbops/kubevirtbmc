// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ProcessorV1190InstructionSet string

// List of ProcessorV1190InstructionSet
const (
	PROCESSORV1190INSTRUCTIONSET_X86       ProcessorV1190InstructionSet = "x86"
	PROCESSORV1190INSTRUCTIONSET_X86_64    ProcessorV1190InstructionSet = "x86-64"
	PROCESSORV1190INSTRUCTIONSET_IA_64     ProcessorV1190InstructionSet = "IA-64"
	PROCESSORV1190INSTRUCTIONSET_ARM_A32   ProcessorV1190InstructionSet = "ARM-A32"
	PROCESSORV1190INSTRUCTIONSET_ARM_A64   ProcessorV1190InstructionSet = "ARM-A64"
	PROCESSORV1190INSTRUCTIONSET_MIPS32    ProcessorV1190InstructionSet = "MIPS32"
	PROCESSORV1190INSTRUCTIONSET_MIPS64    ProcessorV1190InstructionSet = "MIPS64"
	PROCESSORV1190INSTRUCTIONSET_POWER_ISA ProcessorV1190InstructionSet = "PowerISA"
	PROCESSORV1190INSTRUCTIONSET_RV32      ProcessorV1190InstructionSet = "RV32"
	PROCESSORV1190INSTRUCTIONSET_RV64      ProcessorV1190InstructionSet = "RV64"
	PROCESSORV1190INSTRUCTIONSET_OEM       ProcessorV1190InstructionSet = "OEM"
)

// AllowedProcessorV1190InstructionSetEnumValues is all the allowed values of ProcessorV1190InstructionSet enum
var AllowedProcessorV1190InstructionSetEnumValues = []ProcessorV1190InstructionSet{
	"x86",
	"x86-64",
	"IA-64",
	"ARM-A32",
	"ARM-A64",
	"MIPS32",
	"MIPS64",
	"PowerISA",
	"RV32",
	"RV64",
	"OEM",
}

// validProcessorV1190InstructionSetEnumValue provides a map of ProcessorV1190InstructionSets for fast verification of use input
var validProcessorV1190InstructionSetEnumValues = map[ProcessorV1190InstructionSet]struct{}{
	"x86":      {},
	"x86-64":   {},
	"IA-64":    {},
	"ARM-A32":  {},
	"ARM-A64":  {},
	"MIPS32":   {},
	"MIPS64":   {},
	"PowerISA": {},
	"RV32":     {},
	"RV64":     {},
	"OEM":      {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProcessorV1190InstructionSet) IsValid() bool {
	_, ok := validProcessorV1190InstructionSetEnumValues[v]
	return ok
}

// NewProcessorV1190InstructionSetFromValue returns a pointer to a valid ProcessorV1190InstructionSet
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProcessorV1190InstructionSetFromValue(v string) (ProcessorV1190InstructionSet, error) {
	ev := ProcessorV1190InstructionSet(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ProcessorV1190InstructionSet: valid values are %v", v, AllowedProcessorV1190InstructionSetEnumValues)
}

// AssertProcessorV1190InstructionSetRequired checks if the required fields are not zero-ed
func AssertProcessorV1190InstructionSetRequired(obj ProcessorV1190InstructionSet) error {
	return nil
}

// AssertProcessorV1190InstructionSetConstraints checks if the values respects the defined constraints
func AssertProcessorV1190InstructionSetConstraints(obj ProcessorV1190InstructionSet) error {
	return nil
}
