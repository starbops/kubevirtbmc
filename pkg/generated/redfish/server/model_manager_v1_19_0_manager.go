// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"time"
)

// ManagerV1190Manager - In Redfish, a manager is a systems management entity that can implement or provide access to a Redfish service.  Examples of managers are BMCs (baseboard management controllers), enclosure managers, management controllers, and other subsystems that are assigned manageability functions.  An implementation can have multiple managers, which might be directly accessible through a Redfish-defined interface.
type ManagerV1190Manager struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions ManagerV1190Actions `json:"Actions,omitempty"`

	AdditionalFirmwareVersions SoftwareInventoryAdditionalVersions `json:"AdditionalFirmwareVersions,omitempty"`

	// An indication of whether the manager is configured for automatic Daylight Saving Time (DST) adjustment.
	AutoDSTEnabled bool `json:"AutoDSTEnabled,omitempty"`

	Certificates OdataV4IdRef `json:"Certificates,omitempty"`

	CommandShell ManagerV1190CommandShell `json:"CommandShell,omitempty"`

	// The current date and time with UTC offset of the manager.
	DateTime *time.Time `json:"DateTime,omitempty"`

	// The time offset from UTC that the DateTime property is in `+HH:MM` format.
	DateTimeLocalOffset *string `json:"DateTimeLocalOffset,omitempty" validate:"regexp=^([-+][0-1][0-9]:[0-5][0-9])$"`

	DaylightSavingTime ManagerV1190DaylightSavingTime `json:"DaylightSavingTime,omitempty"`

	DedicatedNetworkPorts OdataV4IdRef `json:"DedicatedNetworkPorts,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	EthernetInterfaces OdataV4IdRef `json:"EthernetInterfaces,omitempty"`

	// The firmware version of this manager.
	FirmwareVersion *string `json:"FirmwareVersion,omitempty"`

	GraphicalConsole ManagerV1190GraphicalConsole `json:"GraphicalConsole,omitempty"`

	HostInterfaces OdataV4IdRef `json:"HostInterfaces,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The date and time when the manager was last reset or rebooted.
	LastResetTime time.Time `json:"LastResetTime,omitempty"`

	Links ManagerV1190Links `json:"Links,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// An indicator allowing an operator to physically locate this resource.
	LocationIndicatorActive *bool `json:"LocationIndicatorActive,omitempty"`

	LogServices OdataV4IdRef `json:"LogServices,omitempty"`

	ManagerDiagnosticData OdataV4IdRef `json:"ManagerDiagnosticData,omitempty"`

	ManagerType ManagerV1190ManagerType `json:"ManagerType,omitempty"`

	// The manufacturer of this manager.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// An array of DSP0274-defined measurement blocks.
	// Deprecated
	Measurements []SoftwareInventoryMeasurementBlock `json:"Measurements,omitempty"`

	// The model information of this manager, as defined by the manufacturer.
	Model *string `json:"Model,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	NetworkProtocol OdataV4IdRef `json:"NetworkProtocol,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The part number of the manager.
	PartNumber *string `json:"PartNumber,omitempty"`

	PowerState ResourcePowerState `json:"PowerState,omitempty"`

	// The redundancy information for the managers of this system.
	Redundancy []RedundancyRedundancy `json:"Redundancy,omitempty"`

	// The number of items in a collection.
	RedundancyodataCount int64 `json:"Redundancy@odata.count,omitempty"`

	RemoteAccountService OdataV4IdRef `json:"RemoteAccountService,omitempty"`

	// The URI of the Redfish service root for the remote manager that this resource represents.
	RemoteRedfishServiceUri *string `json:"RemoteRedfishServiceUri,omitempty"`

	SecurityPolicy OdataV4IdRef `json:"SecurityPolicy,omitempty"`

	SerialConsole ManagerV1190SerialConsole `json:"SerialConsole,omitempty"`

	SerialInterfaces OdataV4IdRef `json:"SerialInterfaces,omitempty"`

	// The serial number of the manager.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	ServiceEntryPointUUID string `json:"ServiceEntryPointUUID,omitempty" validate:"regexp=^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`

	// A product instance identifier displayed in the Redfish service root.
	ServiceIdentification *string `json:"ServiceIdentification,omitempty"`

	SharedNetworkPorts OdataV4IdRef `json:"SharedNetworkPorts,omitempty"`

	// The spare part number of the manager.
	SparePartNumber *string `json:"SparePartNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The time zone of the manager.
	TimeZoneName string `json:"TimeZoneName,omitempty"`

	USBPorts OdataV4IdRef `json:"USBPorts,omitempty"`

	UUID string `json:"UUID,omitempty" validate:"regexp=^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"`

	// The hardware version of this manager.
	Version *string `json:"Version,omitempty"`

	VirtualMedia OdataV4IdRef `json:"VirtualMedia,omitempty"`
}

// AssertManagerV1190ManagerRequired checks if the required fields are not zero-ed
func AssertManagerV1190ManagerRequired(obj ManagerV1190Manager) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertManagerV1190ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertSoftwareInventoryAdditionalVersionsRequired(obj.AdditionalFirmwareVersions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Certificates); err != nil {
		return err
	}
	if err := AssertManagerV1190CommandShellRequired(obj.CommandShell); err != nil {
		return err
	}
	if err := AssertManagerV1190DaylightSavingTimeRequired(obj.DaylightSavingTime); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.DedicatedNetworkPorts); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.EthernetInterfaces); err != nil {
		return err
	}
	if err := AssertManagerV1190GraphicalConsoleRequired(obj.GraphicalConsole); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.HostInterfaces); err != nil {
		return err
	}
	if err := AssertManagerV1190LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationRequired(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.LogServices); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.ManagerDiagnosticData); err != nil {
		return err
	}
	for _, el := range obj.Measurements {
		if err := AssertSoftwareInventoryMeasurementBlockRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.NetworkProtocol); err != nil {
		return err
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.RemoteAccountService); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.SecurityPolicy); err != nil {
		return err
	}
	if err := AssertManagerV1190SerialConsoleRequired(obj.SerialConsole); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.SerialInterfaces); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.SharedNetworkPorts); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.USBPorts); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.VirtualMedia); err != nil {
		return err
	}
	return nil
}

// AssertManagerV1190ManagerConstraints checks if the values respects the defined constraints
func AssertManagerV1190ManagerConstraints(obj ManagerV1190Manager) error {
	if err := AssertManagerV1190ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertSoftwareInventoryAdditionalVersionsConstraints(obj.AdditionalFirmwareVersions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Certificates); err != nil {
		return err
	}
	if err := AssertManagerV1190CommandShellConstraints(obj.CommandShell); err != nil {
		return err
	}
	if err := AssertManagerV1190DaylightSavingTimeConstraints(obj.DaylightSavingTime); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.DedicatedNetworkPorts); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.EthernetInterfaces); err != nil {
		return err
	}
	if err := AssertManagerV1190GraphicalConsoleConstraints(obj.GraphicalConsole); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.HostInterfaces); err != nil {
		return err
	}
	if err := AssertManagerV1190LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceLocationConstraints(obj.Location); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.LogServices); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.ManagerDiagnosticData); err != nil {
		return err
	}
	for _, el := range obj.Measurements {
		if err := AssertSoftwareInventoryMeasurementBlockConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.NetworkProtocol); err != nil {
		return err
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.RemoteAccountService); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.SecurityPolicy); err != nil {
		return err
	}
	if err := AssertManagerV1190SerialConsoleConstraints(obj.SerialConsole); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.SerialInterfaces); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.SharedNetworkPorts); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.USBPorts); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.VirtualMedia); err != nil {
		return err
	}
	return nil
}
