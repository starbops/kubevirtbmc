// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// AccountServiceV1150ExternalAccountProvider - The external account provider services that can provide accounts for this manager to use for authentication.
type AccountServiceV1150ExternalAccountProvider struct {
	AccountProviderType AccountServiceV1150AccountProviderTypes `json:"AccountProviderType,omitempty"`

	Authentication AccountServiceV1150Authentication `json:"Authentication,omitempty"`

	Certificates OdataV4IdRef `json:"Certificates,omitempty"`

	LDAPService AccountServiceV1150LdapService `json:"LDAPService,omitempty"`

	OAuth2Service AccountServiceV1150OAuth2Service `json:"OAuth2Service,omitempty"`

	// Indicates if the Password property is set.
	PasswordSet bool `json:"PasswordSet,omitempty"`

	// The authentication priority for the external account provider.
	Priority *int64 `json:"Priority,omitempty"`

	// The mapping rules to convert the external account providers account information to the local Redfish role.
	RemoteRoleMapping []AccountServiceV1150RoleMapping `json:"RemoteRoleMapping,omitempty"`

	// The number of times to retry connecting to an address in the ServiceAddresses property before attempting the next address in the array.
	Retries *int64 `json:"Retries,omitempty"`

	// The addresses of the user account providers to which this external account provider links.  The format of this field depends on the type of external account provider.
	ServiceAddresses []*string `json:"ServiceAddresses,omitempty"`

	// An indication of whether this service is enabled.
	ServiceEnabled *bool `json:"ServiceEnabled,omitempty"`

	TACACSplusService AccountServiceV1150TacacSplusService `json:"TACACSplusService,omitempty"`

	// The period of time, in seconds, this account service will wait for a response from an address of a user account provider before timing out.
	TimeoutSeconds *int64 `json:"TimeoutSeconds,omitempty"`
}

// AssertAccountServiceV1150ExternalAccountProviderRequired checks if the required fields are not zero-ed
func AssertAccountServiceV1150ExternalAccountProviderRequired(obj AccountServiceV1150ExternalAccountProvider) error {
	if err := AssertAccountServiceV1150AuthenticationRequired(obj.Authentication); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Certificates); err != nil {
		return err
	}
	if err := AssertAccountServiceV1150LdapServiceRequired(obj.LDAPService); err != nil {
		return err
	}
	if err := AssertAccountServiceV1150OAuth2ServiceRequired(obj.OAuth2Service); err != nil {
		return err
	}
	for _, el := range obj.RemoteRoleMapping {
		if err := AssertAccountServiceV1150RoleMappingRequired(el); err != nil {
			return err
		}
	}
	if err := AssertAccountServiceV1150TacacSplusServiceRequired(obj.TACACSplusService); err != nil {
		return err
	}
	return nil
}

// AssertAccountServiceV1150ExternalAccountProviderConstraints checks if the values respects the defined constraints
func AssertAccountServiceV1150ExternalAccountProviderConstraints(obj AccountServiceV1150ExternalAccountProvider) error {
	if err := AssertAccountServiceV1150AuthenticationConstraints(obj.Authentication); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Certificates); err != nil {
		return err
	}
	if err := AssertAccountServiceV1150LdapServiceConstraints(obj.LDAPService); err != nil {
		return err
	}
	if err := AssertAccountServiceV1150OAuth2ServiceConstraints(obj.OAuth2Service); err != nil {
		return err
	}
	if obj.Priority != nil && *obj.Priority < 0 {
		return &ParsingError{Param: "Priority", Err: errors.New(errMsgMinValueConstraint)}
	}
	for _, el := range obj.RemoteRoleMapping {
		if err := AssertAccountServiceV1150RoleMappingConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertAccountServiceV1150TacacSplusServiceConstraints(obj.TACACSplusService); err != nil {
		return err
	}
	return nil
}
