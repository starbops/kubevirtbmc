// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PortV1110ConnectedDeviceMode string

// List of PortV1110ConnectedDeviceMode
const (
	PORTV1110CONNECTEDDEVICEMODE_DISCONNECTED                    PortV1110ConnectedDeviceMode = "Disconnected"
	PORTV1110CONNECTEDDEVICEMODE_RCD                             PortV1110ConnectedDeviceMode = "RCD"
	PORTV1110CONNECTEDDEVICEMODE_CXL68_B_FLIT_AND_VH             PortV1110ConnectedDeviceMode = "CXL68BFlitAndVH"
	PORTV1110CONNECTEDDEVICEMODE_STANDARD256_B_FLIT              PortV1110ConnectedDeviceMode = "Standard256BFlit"
	PORTV1110CONNECTEDDEVICEMODE_CXL_LATENCY_OPTIMIZED256_B_FLIT PortV1110ConnectedDeviceMode = "CXLLatencyOptimized256BFlit"
	PORTV1110CONNECTEDDEVICEMODE_PBR                             PortV1110ConnectedDeviceMode = "PBR"
)

// AllowedPortV1110ConnectedDeviceModeEnumValues is all the allowed values of PortV1110ConnectedDeviceMode enum
var AllowedPortV1110ConnectedDeviceModeEnumValues = []PortV1110ConnectedDeviceMode{
	"Disconnected",
	"RCD",
	"CXL68BFlitAndVH",
	"Standard256BFlit",
	"CXLLatencyOptimized256BFlit",
	"PBR",
}

// validPortV1110ConnectedDeviceModeEnumValue provides a map of PortV1110ConnectedDeviceModes for fast verification of use input
var validPortV1110ConnectedDeviceModeEnumValues = map[PortV1110ConnectedDeviceMode]struct{}{
	"Disconnected":                {},
	"RCD":                         {},
	"CXL68BFlitAndVH":             {},
	"Standard256BFlit":            {},
	"CXLLatencyOptimized256BFlit": {},
	"PBR":                         {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortV1110ConnectedDeviceMode) IsValid() bool {
	_, ok := validPortV1110ConnectedDeviceModeEnumValues[v]
	return ok
}

// NewPortV1110ConnectedDeviceModeFromValue returns a pointer to a valid PortV1110ConnectedDeviceMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortV1110ConnectedDeviceModeFromValue(v string) (PortV1110ConnectedDeviceMode, error) {
	ev := PortV1110ConnectedDeviceMode(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PortV1110ConnectedDeviceMode: valid values are %v", v, AllowedPortV1110ConnectedDeviceModeEnumValues)
}

// AssertPortV1110ConnectedDeviceModeRequired checks if the required fields are not zero-ed
func AssertPortV1110ConnectedDeviceModeRequired(obj PortV1110ConnectedDeviceMode) error {
	return nil
}

// AssertPortV1110ConnectedDeviceModeConstraints checks if the values respects the defined constraints
func AssertPortV1110ConnectedDeviceModeConstraints(obj PortV1110ConnectedDeviceMode) error {
	return nil
}
