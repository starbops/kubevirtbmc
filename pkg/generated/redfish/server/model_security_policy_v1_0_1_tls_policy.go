// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// SecurityPolicyV101TlsPolicy - TLS policy settings.
type SecurityPolicyV101TlsPolicy struct {
	Allowed SecurityPolicyV101TlsParameterSet `json:"Allowed,omitempty"`

	Denied SecurityPolicyV101TlsParameterSet `json:"Denied,omitempty"`

	RevokedCertificates OdataV4IdRef `json:"RevokedCertificates,omitempty"`

	TrustedCertificates OdataV4IdRef `json:"TrustedCertificates,omitempty"`

	// An indication of whether the manager will verify the certificate of the remote TLS endpoint.
	VerifyCertificate *bool `json:"VerifyCertificate,omitempty"`
}

// AssertSecurityPolicyV101TlsPolicyRequired checks if the required fields are not zero-ed
func AssertSecurityPolicyV101TlsPolicyRequired(obj SecurityPolicyV101TlsPolicy) error {
	if err := AssertSecurityPolicyV101TlsParameterSetRequired(obj.Allowed); err != nil {
		return err
	}
	if err := AssertSecurityPolicyV101TlsParameterSetRequired(obj.Denied); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.RevokedCertificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.TrustedCertificates); err != nil {
		return err
	}
	return nil
}

// AssertSecurityPolicyV101TlsPolicyConstraints checks if the values respects the defined constraints
func AssertSecurityPolicyV101TlsPolicyConstraints(obj SecurityPolicyV101TlsPolicy) error {
	if err := AssertSecurityPolicyV101TlsParameterSetConstraints(obj.Allowed); err != nil {
		return err
	}
	if err := AssertSecurityPolicyV101TlsParameterSetConstraints(obj.Denied); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.RevokedCertificates); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.TrustedCertificates); err != nil {
		return err
	}
	return nil
}
