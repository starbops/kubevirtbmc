// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type AggregationSourceV140UserAuthenticationMethod string

// List of AggregationSourceV140UserAuthenticationMethod
const (
	AGGREGATIONSOURCEV140USERAUTHENTICATIONMETHOD_PUBLIC_KEY AggregationSourceV140UserAuthenticationMethod = "PublicKey"
	AGGREGATIONSOURCEV140USERAUTHENTICATIONMETHOD_PASSWORD   AggregationSourceV140UserAuthenticationMethod = "Password"
)

// AllowedAggregationSourceV140UserAuthenticationMethodEnumValues is all the allowed values of AggregationSourceV140UserAuthenticationMethod enum
var AllowedAggregationSourceV140UserAuthenticationMethodEnumValues = []AggregationSourceV140UserAuthenticationMethod{
	"PublicKey",
	"Password",
}

// validAggregationSourceV140UserAuthenticationMethodEnumValue provides a map of AggregationSourceV140UserAuthenticationMethods for fast verification of use input
var validAggregationSourceV140UserAuthenticationMethodEnumValues = map[AggregationSourceV140UserAuthenticationMethod]struct{}{
	"PublicKey": {},
	"Password":  {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AggregationSourceV140UserAuthenticationMethod) IsValid() bool {
	_, ok := validAggregationSourceV140UserAuthenticationMethodEnumValues[v]
	return ok
}

// NewAggregationSourceV140UserAuthenticationMethodFromValue returns a pointer to a valid AggregationSourceV140UserAuthenticationMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggregationSourceV140UserAuthenticationMethodFromValue(v string) (AggregationSourceV140UserAuthenticationMethod, error) {
	ev := AggregationSourceV140UserAuthenticationMethod(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for AggregationSourceV140UserAuthenticationMethod: valid values are %v", v, AllowedAggregationSourceV140UserAuthenticationMethodEnumValues)
}

// AssertAggregationSourceV140UserAuthenticationMethodRequired checks if the required fields are not zero-ed
func AssertAggregationSourceV140UserAuthenticationMethodRequired(obj AggregationSourceV140UserAuthenticationMethod) error {
	return nil
}

// AssertAggregationSourceV140UserAuthenticationMethodConstraints checks if the values respects the defined constraints
func AssertAggregationSourceV140UserAuthenticationMethodConstraints(obj AggregationSourceV140UserAuthenticationMethod) error {
	return nil
}
