// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PhysicalContextLogicalContext string

// List of PhysicalContextLogicalContext
const (
	PHYSICALCONTEXTLOGICALCONTEXT_CAPACITY    PhysicalContextLogicalContext = "Capacity"
	PHYSICALCONTEXTLOGICALCONTEXT_ENVIRONMENT PhysicalContextLogicalContext = "Environment"
	PHYSICALCONTEXTLOGICALCONTEXT_NETWORK     PhysicalContextLogicalContext = "Network"
	PHYSICALCONTEXTLOGICALCONTEXT_PERFORMANCE PhysicalContextLogicalContext = "Performance"
	PHYSICALCONTEXTLOGICALCONTEXT_SECURITY    PhysicalContextLogicalContext = "Security"
	PHYSICALCONTEXTLOGICALCONTEXT_STORAGE     PhysicalContextLogicalContext = "Storage"
)

// AllowedPhysicalContextLogicalContextEnumValues is all the allowed values of PhysicalContextLogicalContext enum
var AllowedPhysicalContextLogicalContextEnumValues = []PhysicalContextLogicalContext{
	"Capacity",
	"Environment",
	"Network",
	"Performance",
	"Security",
	"Storage",
}

// validPhysicalContextLogicalContextEnumValue provides a map of PhysicalContextLogicalContexts for fast verification of use input
var validPhysicalContextLogicalContextEnumValues = map[PhysicalContextLogicalContext]struct{}{
	"Capacity":    {},
	"Environment": {},
	"Network":     {},
	"Performance": {},
	"Security":    {},
	"Storage":     {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PhysicalContextLogicalContext) IsValid() bool {
	_, ok := validPhysicalContextLogicalContextEnumValues[v]
	return ok
}

// NewPhysicalContextLogicalContextFromValue returns a pointer to a valid PhysicalContextLogicalContext
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPhysicalContextLogicalContextFromValue(v string) (PhysicalContextLogicalContext, error) {
	ev := PhysicalContextLogicalContext(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PhysicalContextLogicalContext: valid values are %v", v, AllowedPhysicalContextLogicalContextEnumValues)
}

// AssertPhysicalContextLogicalContextRequired checks if the required fields are not zero-ed
func AssertPhysicalContextLogicalContextRequired(obj PhysicalContextLogicalContext) error {
	return nil
}

// AssertPhysicalContextLogicalContextConstraints checks if the values respects the defined constraints
func AssertPhysicalContextLogicalContextConstraints(obj PhysicalContextLogicalContext) error {
	return nil
}
