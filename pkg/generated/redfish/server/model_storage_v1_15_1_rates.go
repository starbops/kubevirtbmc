// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"errors"
)

// StorageV1151Rates - This type describes the various controller rates used for processes such as volume rebuild or consistency checks.
type StorageV1151Rates struct {

	// The percentage of controller resources used for performing a data consistency check on volumes.
	ConsistencyCheckRatePercent *int64 `json:"ConsistencyCheckRatePercent,omitempty"`

	// The percentage of controller resources used for rebuilding/repairing volumes.
	RebuildRatePercent *int64 `json:"RebuildRatePercent,omitempty"`

	// The percentage of controller resources used for transforming volumes from one configuration to another.
	TransformationRatePercent *int64 `json:"TransformationRatePercent,omitempty"`
}

// AssertStorageV1151RatesRequired checks if the required fields are not zero-ed
func AssertStorageV1151RatesRequired(obj StorageV1151Rates) error {
	return nil
}

// AssertStorageV1151RatesConstraints checks if the values respects the defined constraints
func AssertStorageV1151RatesConstraints(obj StorageV1151Rates) error {
	if obj.ConsistencyCheckRatePercent != nil && *obj.ConsistencyCheckRatePercent < 0 {
		return &ParsingError{Param: "ConsistencyCheckRatePercent", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.ConsistencyCheckRatePercent != nil && *obj.ConsistencyCheckRatePercent > 100 {
		return &ParsingError{Param: "ConsistencyCheckRatePercent", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.RebuildRatePercent != nil && *obj.RebuildRatePercent < 0 {
		return &ParsingError{Param: "RebuildRatePercent", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.RebuildRatePercent != nil && *obj.RebuildRatePercent > 100 {
		return &ParsingError{Param: "RebuildRatePercent", Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.TransformationRatePercent != nil && *obj.TransformationRatePercent < 0 {
		return &ParsingError{Param: "TransformationRatePercent", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.TransformationRatePercent != nil && *obj.TransformationRatePercent > 100 {
		return &ParsingError{Param: "TransformationRatePercent", Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
