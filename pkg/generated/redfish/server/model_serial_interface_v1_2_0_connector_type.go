// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type SerialInterfaceV120ConnectorType string

// List of SerialInterfaceV120ConnectorType
const (
	SERIALINTERFACEV120CONNECTORTYPE_RJ45        SerialInterfaceV120ConnectorType = "RJ45"
	SERIALINTERFACEV120CONNECTORTYPE_RJ11        SerialInterfaceV120ConnectorType = "RJ11"
	SERIALINTERFACEV120CONNECTORTYPE_DB9_FEMALE  SerialInterfaceV120ConnectorType = "DB9 Female"
	SERIALINTERFACEV120CONNECTORTYPE_DB9_MALE    SerialInterfaceV120ConnectorType = "DB9 Male"
	SERIALINTERFACEV120CONNECTORTYPE_DB25_FEMALE SerialInterfaceV120ConnectorType = "DB25 Female"
	SERIALINTERFACEV120CONNECTORTYPE_DB25_MALE   SerialInterfaceV120ConnectorType = "DB25 Male"
	SERIALINTERFACEV120CONNECTORTYPE_USB         SerialInterfaceV120ConnectorType = "USB"
	SERIALINTERFACEV120CONNECTORTYPE_M_USB       SerialInterfaceV120ConnectorType = "mUSB"
	SERIALINTERFACEV120CONNECTORTYPE_U_USB       SerialInterfaceV120ConnectorType = "uUSB"
)

// AllowedSerialInterfaceV120ConnectorTypeEnumValues is all the allowed values of SerialInterfaceV120ConnectorType enum
var AllowedSerialInterfaceV120ConnectorTypeEnumValues = []SerialInterfaceV120ConnectorType{
	"RJ45",
	"RJ11",
	"DB9 Female",
	"DB9 Male",
	"DB25 Female",
	"DB25 Male",
	"USB",
	"mUSB",
	"uUSB",
}

// validSerialInterfaceV120ConnectorTypeEnumValue provides a map of SerialInterfaceV120ConnectorTypes for fast verification of use input
var validSerialInterfaceV120ConnectorTypeEnumValues = map[SerialInterfaceV120ConnectorType]struct{}{
	"RJ45":        {},
	"RJ11":        {},
	"DB9 Female":  {},
	"DB9 Male":    {},
	"DB25 Female": {},
	"DB25 Male":   {},
	"USB":         {},
	"mUSB":        {},
	"uUSB":        {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SerialInterfaceV120ConnectorType) IsValid() bool {
	_, ok := validSerialInterfaceV120ConnectorTypeEnumValues[v]
	return ok
}

// NewSerialInterfaceV120ConnectorTypeFromValue returns a pointer to a valid SerialInterfaceV120ConnectorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSerialInterfaceV120ConnectorTypeFromValue(v string) (SerialInterfaceV120ConnectorType, error) {
	ev := SerialInterfaceV120ConnectorType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for SerialInterfaceV120ConnectorType: valid values are %v", v, AllowedSerialInterfaceV120ConnectorTypeEnumValues)
}

// AssertSerialInterfaceV120ConnectorTypeRequired checks if the required fields are not zero-ed
func AssertSerialInterfaceV120ConnectorTypeRequired(obj SerialInterfaceV120ConnectorType) error {
	return nil
}

// AssertSerialInterfaceV120ConnectorTypeConstraints checks if the values respects the defined constraints
func AssertSerialInterfaceV120ConnectorTypeConstraints(obj SerialInterfaceV120ConnectorType) error {
	return nil
}
