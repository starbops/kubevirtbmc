// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2024.3
 */

package server

// OperatingSystemV102OperatingSystem - The `OperatingSystem` schema represents the operating system and software running on a computer system.
type OperatingSystemV102OperatingSystem struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions OperatingSystemV102Actions `json:"Actions,omitempty"`

	Applications OdataV4IdRef `json:"Applications,omitempty"`

	// The container engines running in this operating system.
	ContainerEngines []OperatingSystemV102OperatingSystemContainerEnginesInner `json:"ContainerEngines,omitempty"`

	ContainerImages OdataV4IdRef `json:"ContainerImages,omitempty"`

	Containers OdataV4IdRef `json:"Containers,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Kernel *OperatingSystemV102Kernel `json:"Kernel,omitempty"`

	Links OperatingSystemV102Links `json:"Links,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	Type *OperatingSystemV102OperatingSystemTypes `json:"Type,omitempty"`

	// The wall-clock time this operating system has been running in seconds.
	UptimeSeconds *int64 `json:"UptimeSeconds,omitempty"`

	// The virtual machine engines running in this operating system.
	VirtualMachineEngines []OperatingSystemV102OperatingSystemVirtualMachineEnginesInner `json:"VirtualMachineEngines,omitempty"`
}

// AssertOperatingSystemV102OperatingSystemRequired checks if the required fields are not zero-ed
func AssertOperatingSystemV102OperatingSystemRequired(obj OperatingSystemV102OperatingSystem) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertOperatingSystemV102ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Applications); err != nil {
		return err
	}
	for _, el := range obj.ContainerEngines {
		if err := AssertOperatingSystemV102OperatingSystemContainerEnginesInnerRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.ContainerImages); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Containers); err != nil {
		return err
	}
	if obj.Kernel != nil {
		if err := AssertOperatingSystemV102KernelRequired(*obj.Kernel); err != nil {
			return err
		}
	}
	if err := AssertOperatingSystemV102LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.VirtualMachineEngines {
		if err := AssertOperatingSystemV102OperatingSystemVirtualMachineEnginesInnerRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertOperatingSystemV102OperatingSystemConstraints checks if the values respects the defined constraints
func AssertOperatingSystemV102OperatingSystemConstraints(obj OperatingSystemV102OperatingSystem) error {
	if err := AssertOperatingSystemV102ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Applications); err != nil {
		return err
	}
	for _, el := range obj.ContainerEngines {
		if err := AssertOperatingSystemV102OperatingSystemContainerEnginesInnerConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.ContainerImages); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Containers); err != nil {
		return err
	}
	if obj.Kernel != nil {
		if err := AssertOperatingSystemV102KernelConstraints(*obj.Kernel); err != nil {
			return err
		}
	}
	if err := AssertOperatingSystemV102LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.VirtualMachineEngines {
		if err := AssertOperatingSystemV102OperatingSystemVirtualMachineEnginesInnerConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
