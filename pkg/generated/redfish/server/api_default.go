// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2024.3
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service      DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) *DefaultAPIController {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"RedfishV1Get": Route{
			strings.ToUpper("Get"),
			"/redfish/v1",
			c.RedfishV1Get,
		},
		"RedfishV1MetadataGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/$metadata",
			c.RedfishV1MetadataGet,
		},
		"RedfishV1ManagersGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Managers",
			c.RedfishV1ManagersGet,
		},
		"RedfishV1ManagersManagerIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}",
			c.RedfishV1ManagersManagerIdGet,
		},
		"RedfishV1ManagersManagerIdPut": Route{
			strings.ToUpper("Put"),
			"/redfish/v1/Managers/{ManagerId}",
			c.RedfishV1ManagersManagerIdPut,
		},
		"RedfishV1ManagersManagerIdPatch": Route{
			strings.ToUpper("Patch"),
			"/redfish/v1/Managers/{ManagerId}",
			c.RedfishV1ManagersManagerIdPatch,
		},
		"RedfishV1ManagersManagerIdVirtualMediaGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/VirtualMedia",
			c.RedfishV1ManagersManagerIdVirtualMediaGet,
		},
		"RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Managers/{ManagerId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdGet,
		},
		"RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPut": Route{
			strings.ToUpper("Put"),
			"/redfish/v1/Managers/{ManagerId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPut,
		},
		"RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPatch": Route{
			strings.ToUpper("Patch"),
			"/redfish/v1/Managers/{ManagerId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPatch,
		},
		"RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/VirtualMedia/{VirtualMediaId}/Actions/VirtualMedia.EjectMedia",
			c.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost,
		},
		"RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/Managers/{ManagerId}/VirtualMedia/{VirtualMediaId}/Actions/VirtualMedia.InsertMedia",
			c.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost,
		},
		"RedfishV1SessionServiceGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/SessionService",
			c.RedfishV1SessionServiceGet,
		},
		"RedfishV1SessionServicePut": Route{
			strings.ToUpper("Put"),
			"/redfish/v1/SessionService",
			c.RedfishV1SessionServicePut,
		},
		"RedfishV1SessionServicePatch": Route{
			strings.ToUpper("Patch"),
			"/redfish/v1/SessionService",
			c.RedfishV1SessionServicePatch,
		},
		"RedfishV1SessionServiceSessionsGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/SessionService/Sessions",
			c.RedfishV1SessionServiceSessionsGet,
		},
		"RedfishV1SessionServiceSessionsPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/SessionService/Sessions",
			c.RedfishV1SessionServiceSessionsPost,
		},
		"RedfishV1SessionServiceSessionsSessionIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/SessionService/Sessions/{SessionId}",
			c.RedfishV1SessionServiceSessionsSessionIdGet,
		},
		"RedfishV1SessionServiceSessionsSessionIdDelete": Route{
			strings.ToUpper("Delete"),
			"/redfish/v1/SessionService/Sessions/{SessionId}",
			c.RedfishV1SessionServiceSessionsSessionIdDelete,
		},
		"RedfishV1SystemsGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Systems",
			c.RedfishV1SystemsGet,
		},
		"RedfishV1SystemsPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/Systems",
			c.RedfishV1SystemsPost,
		},
		"RedfishV1SystemsComputerSystemIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}",
			c.RedfishV1SystemsComputerSystemIdGet,
		},
		"RedfishV1SystemsComputerSystemIdPut": Route{
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}",
			c.RedfishV1SystemsComputerSystemIdPut,
		},
		"RedfishV1SystemsComputerSystemIdDelete": Route{
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}",
			c.RedfishV1SystemsComputerSystemIdDelete,
		},
		"RedfishV1SystemsComputerSystemIdPatch": Route{
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}",
			c.RedfishV1SystemsComputerSystemIdPatch,
		},
		"RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Actions/ComputerSystem.Reset",
			c.RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost,
		},
		"RedfishV1SystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/Actions/ComputerSystem.SetDefaultBootOrder",
			c.RedfishV1SystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost,
		},
		"RedfishV1SystemsComputerSystemIdBootOptionsGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/BootOptions",
			c.RedfishV1SystemsComputerSystemIdBootOptionsGet,
		},
		"RedfishV1SystemsComputerSystemIdBootOptionsPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/BootOptions",
			c.RedfishV1SystemsComputerSystemIdBootOptionsPost,
		},
		"RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdGet,
		},
		"RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPut": Route{
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPut,
		},
		"RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdDelete": Route{
			strings.ToUpper("Delete"),
			"/redfish/v1/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdDelete,
		},
		"RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPatch": Route{
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/BootOptions/{BootOptionId}",
			c.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPatch,
		},
		"RedfishV1SystemsComputerSystemIdVirtualMediaGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/VirtualMedia",
			c.RedfishV1SystemsComputerSystemIdVirtualMediaGet,
		},
		"RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdGet,
		},
		"RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPut": Route{
			strings.ToUpper("Put"),
			"/redfish/v1/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPut,
		},
		"RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch": Route{
			strings.ToUpper("Patch"),
			"/redfish/v1/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}",
			c.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch,
		},
		"RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}/Actions/VirtualMedia.EjectMedia",
			c.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost,
		},
		"RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost": Route{
			strings.ToUpper("Post"),
			"/redfish/v1/Systems/{ComputerSystemId}/VirtualMedia/{VirtualMediaId}/Actions/VirtualMedia.InsertMedia",
			c.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost,
		},
		"RedfishV1OdataGet": Route{
			strings.ToUpper("Get"),
			"/redfish/v1/odata",
			c.RedfishV1OdataGet,
		},
	}
}

// RedfishV1Get -
func (c *DefaultAPIController) RedfishV1Get(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1Get(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1MetadataGet -
func (c *DefaultAPIController) RedfishV1MetadataGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1MetadataGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ManagersGet -
func (c *DefaultAPIController) RedfishV1ManagersGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1ManagersGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ManagersManagerIdGet -
func (c *DefaultAPIController) RedfishV1ManagersManagerIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerIdParam := params["ManagerId"]
	if managerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ManagerId"}, nil)
		return
	}
	result, err := c.service.RedfishV1ManagersManagerIdGet(r.Context(), managerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ManagersManagerIdPut -
func (c *DefaultAPIController) RedfishV1ManagersManagerIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerIdParam := params["ManagerId"]
	if managerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ManagerId"}, nil)
		return
	}
	managerV1192ManagerParam := ManagerV1192Manager{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&managerV1192ManagerParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertManagerV1192ManagerRequired(managerV1192ManagerParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertManagerV1192ManagerConstraints(managerV1192ManagerParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1ManagersManagerIdPut(r.Context(), managerIdParam, managerV1192ManagerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ManagersManagerIdPatch -
func (c *DefaultAPIController) RedfishV1ManagersManagerIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerIdParam := params["ManagerId"]
	if managerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ManagerId"}, nil)
		return
	}
	managerV1192ManagerParam := ManagerV1192Manager{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&managerV1192ManagerParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertManagerV1192ManagerRequired(managerV1192ManagerParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertManagerV1192ManagerConstraints(managerV1192ManagerParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1ManagersManagerIdPatch(r.Context(), managerIdParam, managerV1192ManagerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ManagersManagerIdVirtualMediaGet -
// Deprecated
func (c *DefaultAPIController) RedfishV1ManagersManagerIdVirtualMediaGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerIdParam := params["ManagerId"]
	if managerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ManagerId"}, nil)
		return
	}
	result, err := c.service.RedfishV1ManagersManagerIdVirtualMediaGet(r.Context(), managerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdGet -
// Deprecated
func (c *DefaultAPIController) RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerIdParam := params["ManagerId"]
	if managerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ManagerId"}, nil)
		return
	}
	virtualMediaIdParam := params["VirtualMediaId"]
	if virtualMediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"VirtualMediaId"}, nil)
		return
	}
	result, err := c.service.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdGet(r.Context(), managerIdParam, virtualMediaIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPut -
// Deprecated
func (c *DefaultAPIController) RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerIdParam := params["ManagerId"]
	if managerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ManagerId"}, nil)
		return
	}
	virtualMediaIdParam := params["VirtualMediaId"]
	if virtualMediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"VirtualMediaId"}, nil)
		return
	}
	virtualMediaV164VirtualMediaParam := VirtualMediaV164VirtualMedia{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&virtualMediaV164VirtualMediaParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVirtualMediaV164VirtualMediaRequired(virtualMediaV164VirtualMediaParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVirtualMediaV164VirtualMediaConstraints(virtualMediaV164VirtualMediaParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPut(r.Context(), managerIdParam, virtualMediaIdParam, virtualMediaV164VirtualMediaParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPatch -
// Deprecated
func (c *DefaultAPIController) RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerIdParam := params["ManagerId"]
	if managerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ManagerId"}, nil)
		return
	}
	virtualMediaIdParam := params["VirtualMediaId"]
	if virtualMediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"VirtualMediaId"}, nil)
		return
	}
	virtualMediaV164VirtualMediaParam := VirtualMediaV164VirtualMedia{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&virtualMediaV164VirtualMediaParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVirtualMediaV164VirtualMediaRequired(virtualMediaV164VirtualMediaParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVirtualMediaV164VirtualMediaConstraints(virtualMediaV164VirtualMediaParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdPatch(r.Context(), managerIdParam, virtualMediaIdParam, virtualMediaV164VirtualMediaParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost -
// Deprecated
func (c *DefaultAPIController) RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerIdParam := params["ManagerId"]
	if managerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ManagerId"}, nil)
		return
	}
	virtualMediaIdParam := params["VirtualMediaId"]
	if virtualMediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"VirtualMediaId"}, nil)
		return
	}
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(r.Context(), managerIdParam, virtualMediaIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost -
// Deprecated
func (c *DefaultAPIController) RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	managerIdParam := params["ManagerId"]
	if managerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ManagerId"}, nil)
		return
	}
	virtualMediaIdParam := params["VirtualMediaId"]
	if virtualMediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"VirtualMediaId"}, nil)
		return
	}
	virtualMediaV164InsertMediaRequestBodyParam := VirtualMediaV164InsertMediaRequestBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&virtualMediaV164InsertMediaRequestBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVirtualMediaV164InsertMediaRequestBodyRequired(virtualMediaV164InsertMediaRequestBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVirtualMediaV164InsertMediaRequestBodyConstraints(virtualMediaV164InsertMediaRequestBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1ManagersManagerIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(r.Context(), managerIdParam, virtualMediaIdParam, virtualMediaV164InsertMediaRequestBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SessionServiceGet -
func (c *DefaultAPIController) RedfishV1SessionServiceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1SessionServiceGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SessionServicePut -
func (c *DefaultAPIController) RedfishV1SessionServicePut(w http.ResponseWriter, r *http.Request) {
	sessionServiceV119SessionServiceParam := SessionServiceV119SessionService{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sessionServiceV119SessionServiceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSessionServiceV119SessionServiceRequired(sessionServiceV119SessionServiceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSessionServiceV119SessionServiceConstraints(sessionServiceV119SessionServiceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SessionServicePut(r.Context(), sessionServiceV119SessionServiceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SessionServicePatch -
func (c *DefaultAPIController) RedfishV1SessionServicePatch(w http.ResponseWriter, r *http.Request) {
	sessionServiceV119SessionServiceParam := SessionServiceV119SessionService{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sessionServiceV119SessionServiceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSessionServiceV119SessionServiceRequired(sessionServiceV119SessionServiceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSessionServiceV119SessionServiceConstraints(sessionServiceV119SessionServiceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SessionServicePatch(r.Context(), sessionServiceV119SessionServiceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SessionServiceSessionsGet -
func (c *DefaultAPIController) RedfishV1SessionServiceSessionsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1SessionServiceSessionsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SessionServiceSessionsPost -
func (c *DefaultAPIController) RedfishV1SessionServiceSessionsPost(w http.ResponseWriter, r *http.Request) {
	sessionV172SessionParam := SessionV172Session{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sessionV172SessionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSessionV172SessionRequired(sessionV172SessionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSessionV172SessionConstraints(sessionV172SessionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SessionServiceSessionsPost(r.Context(), sessionV172SessionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SessionServiceSessionsSessionIdGet -
func (c *DefaultAPIController) RedfishV1SessionServiceSessionsSessionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionIdParam := params["SessionId"]
	if sessionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"SessionId"}, nil)
		return
	}
	result, err := c.service.RedfishV1SessionServiceSessionsSessionIdGet(r.Context(), sessionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SessionServiceSessionsSessionIdDelete -
func (c *DefaultAPIController) RedfishV1SessionServiceSessionsSessionIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionIdParam := params["SessionId"]
	if sessionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"SessionId"}, nil)
		return
	}
	result, err := c.service.RedfishV1SessionServiceSessionsSessionIdDelete(r.Context(), sessionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsGet -
func (c *DefaultAPIController) RedfishV1SystemsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1SystemsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsPost -
func (c *DefaultAPIController) RedfishV1SystemsPost(w http.ResponseWriter, r *http.Request) {
	computerSystemV1230ComputerSystemParam := ComputerSystemV1230ComputerSystem{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&computerSystemV1230ComputerSystemParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertComputerSystemV1230ComputerSystemRequired(computerSystemV1230ComputerSystemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertComputerSystemV1230ComputerSystemConstraints(computerSystemV1230ComputerSystemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsPost(r.Context(), computerSystemV1230ComputerSystemParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdGet -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdGet(r.Context(), computerSystemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdPut -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	computerSystemV1230ComputerSystemParam := ComputerSystemV1230ComputerSystem{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&computerSystemV1230ComputerSystemParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertComputerSystemV1230ComputerSystemRequired(computerSystemV1230ComputerSystemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertComputerSystemV1230ComputerSystemConstraints(computerSystemV1230ComputerSystemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdPut(r.Context(), computerSystemIdParam, computerSystemV1230ComputerSystemParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdDelete -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdDelete(r.Context(), computerSystemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdPatch -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	computerSystemV1230ComputerSystemParam := ComputerSystemV1230ComputerSystem{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&computerSystemV1230ComputerSystemParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertComputerSystemV1230ComputerSystemRequired(computerSystemV1230ComputerSystemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertComputerSystemV1230ComputerSystemConstraints(computerSystemV1230ComputerSystemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdPatch(r.Context(), computerSystemIdParam, computerSystemV1230ComputerSystemParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	computerSystemV1230ResetRequestBodyParam := ComputerSystemV1230ResetRequestBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&computerSystemV1230ResetRequestBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertComputerSystemV1230ResetRequestBodyRequired(computerSystemV1230ResetRequestBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertComputerSystemV1230ResetRequestBodyConstraints(computerSystemV1230ResetRequestBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdActionsComputerSystemResetPost(r.Context(), computerSystemIdParam, computerSystemV1230ResetRequestBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdActionsComputerSystemSetDefaultBootOrderPost(r.Context(), computerSystemIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdBootOptionsGet -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdBootOptionsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdBootOptionsGet(r.Context(), computerSystemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdBootOptionsPost -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdBootOptionsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	bootOptionV106BootOptionParam := BootOptionV106BootOption{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bootOptionV106BootOptionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBootOptionV106BootOptionRequired(bootOptionV106BootOptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBootOptionV106BootOptionConstraints(bootOptionV106BootOptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdBootOptionsPost(r.Context(), computerSystemIdParam, bootOptionV106BootOptionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdGet -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	bootOptionIdParam := params["BootOptionId"]
	if bootOptionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"BootOptionId"}, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdGet(r.Context(), computerSystemIdParam, bootOptionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPut -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	bootOptionIdParam := params["BootOptionId"]
	if bootOptionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"BootOptionId"}, nil)
		return
	}
	bootOptionV106BootOptionParam := BootOptionV106BootOption{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bootOptionV106BootOptionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBootOptionV106BootOptionRequired(bootOptionV106BootOptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBootOptionV106BootOptionConstraints(bootOptionV106BootOptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPut(r.Context(), computerSystemIdParam, bootOptionIdParam, bootOptionV106BootOptionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdDelete -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	bootOptionIdParam := params["BootOptionId"]
	if bootOptionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"BootOptionId"}, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdDelete(r.Context(), computerSystemIdParam, bootOptionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPatch -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	bootOptionIdParam := params["BootOptionId"]
	if bootOptionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"BootOptionId"}, nil)
		return
	}
	bootOptionV106BootOptionParam := BootOptionV106BootOption{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bootOptionV106BootOptionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBootOptionV106BootOptionRequired(bootOptionV106BootOptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBootOptionV106BootOptionConstraints(bootOptionV106BootOptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdBootOptionsBootOptionIdPatch(r.Context(), computerSystemIdParam, bootOptionIdParam, bootOptionV106BootOptionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdVirtualMediaGet -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdVirtualMediaGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdVirtualMediaGet(r.Context(), computerSystemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdGet -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	virtualMediaIdParam := params["VirtualMediaId"]
	if virtualMediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"VirtualMediaId"}, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdGet(r.Context(), computerSystemIdParam, virtualMediaIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPut -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	virtualMediaIdParam := params["VirtualMediaId"]
	if virtualMediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"VirtualMediaId"}, nil)
		return
	}
	virtualMediaV164VirtualMediaParam := VirtualMediaV164VirtualMedia{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&virtualMediaV164VirtualMediaParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVirtualMediaV164VirtualMediaRequired(virtualMediaV164VirtualMediaParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVirtualMediaV164VirtualMediaConstraints(virtualMediaV164VirtualMediaParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPut(r.Context(), computerSystemIdParam, virtualMediaIdParam, virtualMediaV164VirtualMediaParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	virtualMediaIdParam := params["VirtualMediaId"]
	if virtualMediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"VirtualMediaId"}, nil)
		return
	}
	virtualMediaV164VirtualMediaParam := VirtualMediaV164VirtualMedia{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&virtualMediaV164VirtualMediaParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVirtualMediaV164VirtualMediaRequired(virtualMediaV164VirtualMediaParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVirtualMediaV164VirtualMediaConstraints(virtualMediaV164VirtualMediaParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdPatch(r.Context(), computerSystemIdParam, virtualMediaIdParam, virtualMediaV164VirtualMediaParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	virtualMediaIdParam := params["VirtualMediaId"]
	if virtualMediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"VirtualMediaId"}, nil)
		return
	}
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaEjectMediaPost(r.Context(), computerSystemIdParam, virtualMediaIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost -
func (c *DefaultAPIController) RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	computerSystemIdParam := params["ComputerSystemId"]
	if computerSystemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ComputerSystemId"}, nil)
		return
	}
	virtualMediaIdParam := params["VirtualMediaId"]
	if virtualMediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"VirtualMediaId"}, nil)
		return
	}
	virtualMediaV164InsertMediaRequestBodyParam := VirtualMediaV164InsertMediaRequestBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&virtualMediaV164InsertMediaRequestBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVirtualMediaV164InsertMediaRequestBodyRequired(virtualMediaV164InsertMediaRequestBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVirtualMediaV164InsertMediaRequestBodyConstraints(virtualMediaV164InsertMediaRequestBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedfishV1SystemsComputerSystemIdVirtualMediaVirtualMediaIdActionsVirtualMediaInsertMediaPost(r.Context(), computerSystemIdParam, virtualMediaIdParam, virtualMediaV164InsertMediaRequestBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedfishV1OdataGet -
func (c *DefaultAPIController) RedfishV1OdataGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedfishV1OdataGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
