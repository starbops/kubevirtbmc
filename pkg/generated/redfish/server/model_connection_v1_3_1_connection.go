// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// ConnectionV131Connection - The Connection schema describes the access permissions that endpoints, or groups of endpoints, have with other resources in the service.
type ConnectionV131Connection struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions ConnectionV131Actions `json:"Actions,omitempty"`

	ConnectionKeys ConnectionV131ConnectionKey `json:"ConnectionKeys,omitempty"`

	ConnectionType ConnectionV131ConnectionType `json:"ConnectionType,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Links ConnectionV131Links `json:"Links,omitempty"`

	// The set of memory chunks and access capabilities specified for this connection.
	MemoryChunkInfo []ConnectionV131MemoryChunkInfo `json:"MemoryChunkInfo,omitempty"`

	// The set of memory regions and access capabilities specified for this connection.
	MemoryRegionInfo []ConnectionV131MemoryRegionInfo `json:"MemoryRegionInfo,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The set of volumes and access capabilities specified for this connection.
	VolumeInfo []ConnectionV131VolumeInfo `json:"VolumeInfo,omitempty"`
}

// AssertConnectionV131ConnectionRequired checks if the required fields are not zero-ed
func AssertConnectionV131ConnectionRequired(obj ConnectionV131Connection) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertConnectionV131ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertConnectionV131ConnectionKeyRequired(obj.ConnectionKeys); err != nil {
		return err
	}
	if err := AssertConnectionV131LinksRequired(obj.Links); err != nil {
		return err
	}
	for _, el := range obj.MemoryChunkInfo {
		if err := AssertConnectionV131MemoryChunkInfoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MemoryRegionInfo {
		if err := AssertConnectionV131MemoryRegionInfoRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.VolumeInfo {
		if err := AssertConnectionV131VolumeInfoRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertConnectionV131ConnectionConstraints checks if the values respects the defined constraints
func AssertConnectionV131ConnectionConstraints(obj ConnectionV131Connection) error {
	if err := AssertConnectionV131ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertConnectionV131ConnectionKeyConstraints(obj.ConnectionKeys); err != nil {
		return err
	}
	if err := AssertConnectionV131LinksConstraints(obj.Links); err != nil {
		return err
	}
	for _, el := range obj.MemoryChunkInfo {
		if err := AssertConnectionV131MemoryChunkInfoConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MemoryRegionInfo {
		if err := AssertConnectionV131MemoryRegionInfoConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	for _, el := range obj.VolumeInfo {
		if err := AssertConnectionV131VolumeInfoConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
