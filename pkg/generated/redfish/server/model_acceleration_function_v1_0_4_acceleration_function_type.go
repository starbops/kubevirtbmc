// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type AccelerationFunctionV104AccelerationFunctionType string

// List of AccelerationFunctionV104AccelerationFunctionType
const (
	ACCELERATIONFUNCTIONV104ACCELERATIONFUNCTIONTYPE_ENCRYPTION        AccelerationFunctionV104AccelerationFunctionType = "Encryption"
	ACCELERATIONFUNCTIONV104ACCELERATIONFUNCTIONTYPE_COMPRESSION       AccelerationFunctionV104AccelerationFunctionType = "Compression"
	ACCELERATIONFUNCTIONV104ACCELERATIONFUNCTIONTYPE_PACKET_INSPECTION AccelerationFunctionV104AccelerationFunctionType = "PacketInspection"
	ACCELERATIONFUNCTIONV104ACCELERATIONFUNCTIONTYPE_PACKET_SWITCH     AccelerationFunctionV104AccelerationFunctionType = "PacketSwitch"
	ACCELERATIONFUNCTIONV104ACCELERATIONFUNCTIONTYPE_SCHEDULER         AccelerationFunctionV104AccelerationFunctionType = "Scheduler"
	ACCELERATIONFUNCTIONV104ACCELERATIONFUNCTIONTYPE_AUDIO_PROCESSING  AccelerationFunctionV104AccelerationFunctionType = "AudioProcessing"
	ACCELERATIONFUNCTIONV104ACCELERATIONFUNCTIONTYPE_VIDEO_PROCESSING  AccelerationFunctionV104AccelerationFunctionType = "VideoProcessing"
	ACCELERATIONFUNCTIONV104ACCELERATIONFUNCTIONTYPE_OEM               AccelerationFunctionV104AccelerationFunctionType = "OEM"
)

// AllowedAccelerationFunctionV104AccelerationFunctionTypeEnumValues is all the allowed values of AccelerationFunctionV104AccelerationFunctionType enum
var AllowedAccelerationFunctionV104AccelerationFunctionTypeEnumValues = []AccelerationFunctionV104AccelerationFunctionType{
	"Encryption",
	"Compression",
	"PacketInspection",
	"PacketSwitch",
	"Scheduler",
	"AudioProcessing",
	"VideoProcessing",
	"OEM",
}

// validAccelerationFunctionV104AccelerationFunctionTypeEnumValue provides a map of AccelerationFunctionV104AccelerationFunctionTypes for fast verification of use input
var validAccelerationFunctionV104AccelerationFunctionTypeEnumValues = map[AccelerationFunctionV104AccelerationFunctionType]struct{}{
	"Encryption":       {},
	"Compression":      {},
	"PacketInspection": {},
	"PacketSwitch":     {},
	"Scheduler":        {},
	"AudioProcessing":  {},
	"VideoProcessing":  {},
	"OEM":              {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccelerationFunctionV104AccelerationFunctionType) IsValid() bool {
	_, ok := validAccelerationFunctionV104AccelerationFunctionTypeEnumValues[v]
	return ok
}

// NewAccelerationFunctionV104AccelerationFunctionTypeFromValue returns a pointer to a valid AccelerationFunctionV104AccelerationFunctionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccelerationFunctionV104AccelerationFunctionTypeFromValue(v string) (AccelerationFunctionV104AccelerationFunctionType, error) {
	ev := AccelerationFunctionV104AccelerationFunctionType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for AccelerationFunctionV104AccelerationFunctionType: valid values are %v", v, AllowedAccelerationFunctionV104AccelerationFunctionTypeEnumValues)
}

// AssertAccelerationFunctionV104AccelerationFunctionTypeRequired checks if the required fields are not zero-ed
func AssertAccelerationFunctionV104AccelerationFunctionTypeRequired(obj AccelerationFunctionV104AccelerationFunctionType) error {
	return nil
}

// AssertAccelerationFunctionV104AccelerationFunctionTypeConstraints checks if the values respects the defined constraints
func AssertAccelerationFunctionV104AccelerationFunctionTypeConstraints(obj AccelerationFunctionV104AccelerationFunctionType) error {
	return nil
}
