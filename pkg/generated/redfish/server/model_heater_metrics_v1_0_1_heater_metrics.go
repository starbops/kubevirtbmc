// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// HeaterMetricsV101HeaterMetrics - The HeaterMetrics schema contains definitions for the metrics of a heater.
type HeaterMetricsV101HeaterMetrics struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions HeaterMetricsV101Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PowerWatts SensorSensorPowerExcerpt `json:"PowerWatts,omitempty"`

	// The total number of seconds the heater was active while the device it heats was powered off.
	PrePowerOnHeatingTimeSeconds *int64 `json:"PrePowerOnHeatingTimeSeconds,omitempty"`

	// The total number of seconds the heater was active while the device it heats was powered on.
	RuntimeHeatingTimeSeconds *int64 `json:"RuntimeHeatingTimeSeconds,omitempty"`

	// The temperatures (in degree Celsius units) from all related sensors for this device.
	TemperatureReadingsCelsius []SensorSensorArrayExcerpt `json:"TemperatureReadingsCelsius,omitempty"`

	// The number of items in a collection.
	TemperatureReadingsCelsiusodataCount int64 `json:"TemperatureReadingsCelsius@odata.count,omitempty"`
}

// AssertHeaterMetricsV101HeaterMetricsRequired checks if the required fields are not zero-ed
func AssertHeaterMetricsV101HeaterMetricsRequired(obj HeaterMetricsV101HeaterMetrics) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertHeaterMetricsV101ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertSensorSensorPowerExcerptRequired(obj.PowerWatts); err != nil {
		return err
	}
	for _, el := range obj.TemperatureReadingsCelsius {
		if err := AssertSensorSensorArrayExcerptRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertHeaterMetricsV101HeaterMetricsConstraints checks if the values respects the defined constraints
func AssertHeaterMetricsV101HeaterMetricsConstraints(obj HeaterMetricsV101HeaterMetrics) error {
	if err := AssertHeaterMetricsV101ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertSensorSensorPowerExcerptConstraints(obj.PowerWatts); err != nil {
		return err
	}
	for _, el := range obj.TemperatureReadingsCelsius {
		if err := AssertSensorSensorArrayExcerptConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
