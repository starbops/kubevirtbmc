// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type LogServiceV160TransferProtocolType string

// List of LogServiceV160TransferProtocolType
const (
	LOGSERVICEV160TRANSFERPROTOCOLTYPE_CIFS  LogServiceV160TransferProtocolType = "CIFS"
	LOGSERVICEV160TRANSFERPROTOCOLTYPE_FTP   LogServiceV160TransferProtocolType = "FTP"
	LOGSERVICEV160TRANSFERPROTOCOLTYPE_SFTP  LogServiceV160TransferProtocolType = "SFTP"
	LOGSERVICEV160TRANSFERPROTOCOLTYPE_HTTP  LogServiceV160TransferProtocolType = "HTTP"
	LOGSERVICEV160TRANSFERPROTOCOLTYPE_HTTPS LogServiceV160TransferProtocolType = "HTTPS"
	LOGSERVICEV160TRANSFERPROTOCOLTYPE_NFS   LogServiceV160TransferProtocolType = "NFS"
	LOGSERVICEV160TRANSFERPROTOCOLTYPE_SCP   LogServiceV160TransferProtocolType = "SCP"
	LOGSERVICEV160TRANSFERPROTOCOLTYPE_TFTP  LogServiceV160TransferProtocolType = "TFTP"
	LOGSERVICEV160TRANSFERPROTOCOLTYPE_OEM   LogServiceV160TransferProtocolType = "OEM"
)

// AllowedLogServiceV160TransferProtocolTypeEnumValues is all the allowed values of LogServiceV160TransferProtocolType enum
var AllowedLogServiceV160TransferProtocolTypeEnumValues = []LogServiceV160TransferProtocolType{
	"CIFS",
	"FTP",
	"SFTP",
	"HTTP",
	"HTTPS",
	"NFS",
	"SCP",
	"TFTP",
	"OEM",
}

// validLogServiceV160TransferProtocolTypeEnumValue provides a map of LogServiceV160TransferProtocolTypes for fast verification of use input
var validLogServiceV160TransferProtocolTypeEnumValues = map[LogServiceV160TransferProtocolType]struct{}{
	"CIFS":  {},
	"FTP":   {},
	"SFTP":  {},
	"HTTP":  {},
	"HTTPS": {},
	"NFS":   {},
	"SCP":   {},
	"TFTP":  {},
	"OEM":   {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogServiceV160TransferProtocolType) IsValid() bool {
	_, ok := validLogServiceV160TransferProtocolTypeEnumValues[v]
	return ok
}

// NewLogServiceV160TransferProtocolTypeFromValue returns a pointer to a valid LogServiceV160TransferProtocolType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogServiceV160TransferProtocolTypeFromValue(v string) (LogServiceV160TransferProtocolType, error) {
	ev := LogServiceV160TransferProtocolType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for LogServiceV160TransferProtocolType: valid values are %v", v, AllowedLogServiceV160TransferProtocolTypeEnumValues)
}

// AssertLogServiceV160TransferProtocolTypeRequired checks if the required fields are not zero-ed
func AssertLogServiceV160TransferProtocolTypeRequired(obj LogServiceV160TransferProtocolType) error {
	return nil
}

// AssertLogServiceV160TransferProtocolTypeConstraints checks if the values respects the defined constraints
func AssertLogServiceV160TransferProtocolTypeConstraints(obj LogServiceV160TransferProtocolType) error {
	return nil
}
