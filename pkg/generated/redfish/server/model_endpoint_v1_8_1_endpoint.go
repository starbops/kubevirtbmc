// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// EndpointV181Endpoint - The Endpoint schema contains the properties of an endpoint resource that represents the properties of an entity that sends or receives protocol-defined messages over a transport.
type EndpointV181Endpoint struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions EndpointV181Actions `json:"Actions,omitempty"`

	// All the entities connected to this endpoint.
	ConnectedEntities []EndpointV181ConnectedEntity `json:"ConnectedEntities,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	EndpointProtocol ProtocolProtocol `json:"EndpointProtocol,omitempty"`

	// The amount of memory in bytes that the host should allocate to connect to this endpoint.
	HostReservationMemoryBytes *int64 `json:"HostReservationMemoryBytes,omitempty"`

	// An array of details for each IP transport supported by this endpoint.  The array structure can model multiple IP addresses for this endpoint.
	IPTransportDetails []EndpointV181IpTransportDetails `json:"IPTransportDetails,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// Identifiers for this endpoint.
	Identifiers []ResourceIdentifier `json:"Identifiers,omitempty"`

	Links EndpointV181Links `json:"Links,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PciId EndpointV181PciId `json:"PciId,omitempty"`

	// Redundancy information for the lower-level endpoints supporting this endpoint.
	Redundancy []RedundancyRedundancy `json:"Redundancy,omitempty"`

	// The number of items in a collection.
	RedundancyodataCount int64 `json:"Redundancy@odata.count,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertEndpointV181EndpointRequired checks if the required fields are not zero-ed
func AssertEndpointV181EndpointRequired(obj EndpointV181Endpoint) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertEndpointV181ActionsRequired(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.ConnectedEntities {
		if err := AssertEndpointV181ConnectedEntityRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.IPTransportDetails {
		if err := AssertEndpointV181IpTransportDetailsRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Identifiers {
		if err := AssertResourceIdentifierRequired(el); err != nil {
			return err
		}
	}
	if err := AssertEndpointV181LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertEndpointV181PciIdRequired(obj.PciId); err != nil {
		return err
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertEndpointV181EndpointConstraints checks if the values respects the defined constraints
func AssertEndpointV181EndpointConstraints(obj EndpointV181Endpoint) error {
	if err := AssertEndpointV181ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.ConnectedEntities {
		if err := AssertEndpointV181ConnectedEntityConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.IPTransportDetails {
		if err := AssertEndpointV181IpTransportDetailsConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Identifiers {
		if err := AssertResourceIdentifierConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertEndpointV181LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertEndpointV181PciIdConstraints(obj.PciId); err != nil {
		return err
	}
	for _, el := range obj.Redundancy {
		if err := AssertRedundancyRedundancyConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
