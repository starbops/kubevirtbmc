// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// KeyV140NvMeoFSecureHashType : The NVMe secure hash algorithms that a key is allowed to use.
type KeyV140NvMeoFSecureHashType string

// List of KeyV140NvMeoFSecureHashType
const (
	KEYV140NVMEOFSECUREHASHTYPE_SHA256 KeyV140NvMeoFSecureHashType = "SHA256"
	KEYV140NVMEOFSECUREHASHTYPE_SHA384 KeyV140NvMeoFSecureHashType = "SHA384"
	KEYV140NVMEOFSECUREHASHTYPE_SHA512 KeyV140NvMeoFSecureHashType = "SHA512"
)

// AllowedKeyV140NvMeoFSecureHashTypeEnumValues is all the allowed values of KeyV140NvMeoFSecureHashType enum
var AllowedKeyV140NvMeoFSecureHashTypeEnumValues = []KeyV140NvMeoFSecureHashType{
	"SHA256",
	"SHA384",
	"SHA512",
}

// validKeyV140NvMeoFSecureHashTypeEnumValue provides a map of KeyV140NvMeoFSecureHashTypes for fast verification of use input
var validKeyV140NvMeoFSecureHashTypeEnumValues = map[KeyV140NvMeoFSecureHashType]struct{}{
	"SHA256": {},
	"SHA384": {},
	"SHA512": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyV140NvMeoFSecureHashType) IsValid() bool {
	_, ok := validKeyV140NvMeoFSecureHashTypeEnumValues[v]
	return ok
}

// NewKeyV140NvMeoFSecureHashTypeFromValue returns a pointer to a valid KeyV140NvMeoFSecureHashType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyV140NvMeoFSecureHashTypeFromValue(v string) (KeyV140NvMeoFSecureHashType, error) {
	ev := KeyV140NvMeoFSecureHashType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for KeyV140NvMeoFSecureHashType: valid values are %v", v, AllowedKeyV140NvMeoFSecureHashTypeEnumValues)
}

// AssertKeyV140NvMeoFSecureHashTypeRequired checks if the required fields are not zero-ed
func AssertKeyV140NvMeoFSecureHashTypeRequired(obj KeyV140NvMeoFSecureHashType) error {
	return nil
}

// AssertKeyV140NvMeoFSecureHashTypeConstraints checks if the values respects the defined constraints
func AssertKeyV140NvMeoFSecureHashTypeConstraints(obj KeyV140NvMeoFSecureHashType) error {
	return nil
}
