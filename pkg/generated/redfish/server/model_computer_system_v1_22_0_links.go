// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// ComputerSystemV1220Links - The links to other resources that are related to this resource.
type ComputerSystemV1220Links struct {

	// An array of links to the chassis that contains this system.
	Chassis []OdataV4IdRef `json:"Chassis,omitempty"`

	// The number of items in a collection.
	ChassisodataCount int64 `json:"Chassis@odata.count,omitempty"`

	// An array of links to ComputerSystems that are realized, in whole or in part, from this ComputerSystem.
	ConsumingComputerSystems []OdataV4IdRef `json:"ConsumingComputerSystems,omitempty"`

	// The number of items in a collection.
	ConsumingComputerSystemsodataCount int64 `json:"ConsumingComputerSystems@odata.count,omitempty"`

	// An array of links to resources or objects that cool this computer system.  Normally, the link is for either a chassis or a specific set of fans.
	CooledBy []OdataV4IdRef `json:"CooledBy,omitempty"`

	// The number of items in a collection.
	CooledByodataCount int64 `json:"CooledBy@odata.count,omitempty"`

	// An array of links to the endpoints that connect to this system.
	Endpoints []OdataV4IdRef `json:"Endpoints,omitempty"`

	// The number of items in a collection.
	EndpointsodataCount int64 `json:"Endpoints@odata.count,omitempty"`

	HostingComputerSystem OdataV4IdRef `json:"HostingComputerSystem,omitempty"`

	// An array of links to the managers responsible for this system.
	ManagedBy []OdataV4IdRef `json:"ManagedBy,omitempty"`

	// The number of items in a collection.
	ManagedByodataCount int64 `json:"ManagedBy@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The network device functions to which this system performs offload computation, such as with a SmartNIC.
	OffloadedNetworkDeviceFunctions []OdataV4IdRef `json:"OffloadedNetworkDeviceFunctions,omitempty"`

	// The number of items in a collection.
	OffloadedNetworkDeviceFunctionsodataCount int64 `json:"OffloadedNetworkDeviceFunctions@odata.count,omitempty"`

	// An array of links to resources or objects that power this computer system.  Normally, the link is for either a chassis or a specific set of power supplies.
	PoweredBy []OdataV4IdRef `json:"PoweredBy,omitempty"`

	// The number of items in a collection.
	PoweredByodataCount int64 `json:"PoweredBy@odata.count,omitempty"`

	// An array of links to the resource blocks that are used in this computer system.
	ResourceBlocks []OdataV4IdRef `json:"ResourceBlocks,omitempty"`

	// The number of items in a collection.
	ResourceBlocksodataCount int64 `json:"ResourceBlocks@odata.count,omitempty"`

	// An array of links to ComputerSystems that contribute, in whole or in part, to the implementation of this ComputerSystem.
	SupplyingComputerSystems []OdataV4IdRef `json:"SupplyingComputerSystems,omitempty"`

	// The number of items in a collection.
	SupplyingComputerSystemsodataCount int64 `json:"SupplyingComputerSystems@odata.count,omitempty"`

	// An array of links to the trusted components for this system.
	TrustedComponents []OdataV4IdRef `json:"TrustedComponents,omitempty"`

	// The number of items in a collection.
	TrustedComponentsodataCount int64 `json:"TrustedComponents@odata.count,omitempty"`

	// An array of links to the virtual machines this system is hosting.
	VirtualMachines []OdataV4IdRef `json:"VirtualMachines,omitempty"`

	// The number of items in a collection.
	VirtualMachinesodataCount int64 `json:"VirtualMachines@odata.count,omitempty"`
}

// AssertComputerSystemV1220LinksRequired checks if the required fields are not zero-ed
func AssertComputerSystemV1220LinksRequired(obj ComputerSystemV1220Links) error {
	for _, el := range obj.Chassis {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ConsumingComputerSystems {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CooledBy {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.HostingComputerSystem); err != nil {
		return err
	}
	for _, el := range obj.ManagedBy {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.OffloadedNetworkDeviceFunctions {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PoweredBy {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ResourceBlocks {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SupplyingComputerSystems {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TrustedComponents {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.VirtualMachines {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertComputerSystemV1220LinksConstraints checks if the values respects the defined constraints
func AssertComputerSystemV1220LinksConstraints(obj ComputerSystemV1220Links) error {
	for _, el := range obj.Chassis {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ConsumingComputerSystems {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CooledBy {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Endpoints {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.HostingComputerSystem); err != nil {
		return err
	}
	for _, el := range obj.ManagedBy {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.OffloadedNetworkDeviceFunctions {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.PoweredBy {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ResourceBlocks {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SupplyingComputerSystems {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TrustedComponents {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.VirtualMachines {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
