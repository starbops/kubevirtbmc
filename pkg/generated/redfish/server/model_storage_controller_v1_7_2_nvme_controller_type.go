// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type StorageControllerV172NvmeControllerType string

// List of StorageControllerV172NvmeControllerType
const (
	STORAGECONTROLLERV172NVMECONTROLLERTYPE_ADMIN     StorageControllerV172NvmeControllerType = "Admin"
	STORAGECONTROLLERV172NVMECONTROLLERTYPE_DISCOVERY StorageControllerV172NvmeControllerType = "Discovery"
	STORAGECONTROLLERV172NVMECONTROLLERTYPE_IO        StorageControllerV172NvmeControllerType = "IO"
)

// AllowedStorageControllerV172NvmeControllerTypeEnumValues is all the allowed values of StorageControllerV172NvmeControllerType enum
var AllowedStorageControllerV172NvmeControllerTypeEnumValues = []StorageControllerV172NvmeControllerType{
	"Admin",
	"Discovery",
	"IO",
}

// validStorageControllerV172NvmeControllerTypeEnumValue provides a map of StorageControllerV172NvmeControllerTypes for fast verification of use input
var validStorageControllerV172NvmeControllerTypeEnumValues = map[StorageControllerV172NvmeControllerType]struct{}{
	"Admin":     {},
	"Discovery": {},
	"IO":        {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StorageControllerV172NvmeControllerType) IsValid() bool {
	_, ok := validStorageControllerV172NvmeControllerTypeEnumValues[v]
	return ok
}

// NewStorageControllerV172NvmeControllerTypeFromValue returns a pointer to a valid StorageControllerV172NvmeControllerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStorageControllerV172NvmeControllerTypeFromValue(v string) (StorageControllerV172NvmeControllerType, error) {
	ev := StorageControllerV172NvmeControllerType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for StorageControllerV172NvmeControllerType: valid values are %v", v, AllowedStorageControllerV172NvmeControllerTypeEnumValues)
}

// AssertStorageControllerV172NvmeControllerTypeRequired checks if the required fields are not zero-ed
func AssertStorageControllerV172NvmeControllerTypeRequired(obj StorageControllerV172NvmeControllerType) error {
	return nil
}

// AssertStorageControllerV172NvmeControllerTypeConstraints checks if the values respects the defined constraints
func AssertStorageControllerV172NvmeControllerTypeConstraints(obj StorageControllerV172NvmeControllerType) error {
	return nil
}
