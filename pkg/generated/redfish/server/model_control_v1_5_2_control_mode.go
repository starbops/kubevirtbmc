// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ControlV152ControlMode string

// List of ControlV152ControlMode
const (
	CONTROLV152CONTROLMODE_AUTOMATIC ControlV152ControlMode = "Automatic"
	CONTROLV152CONTROLMODE_OVERRIDE  ControlV152ControlMode = "Override"
	CONTROLV152CONTROLMODE_MANUAL    ControlV152ControlMode = "Manual"
	CONTROLV152CONTROLMODE_DISABLED  ControlV152ControlMode = "Disabled"
)

// AllowedControlV152ControlModeEnumValues is all the allowed values of ControlV152ControlMode enum
var AllowedControlV152ControlModeEnumValues = []ControlV152ControlMode{
	"Automatic",
	"Override",
	"Manual",
	"Disabled",
}

// validControlV152ControlModeEnumValue provides a map of ControlV152ControlModes for fast verification of use input
var validControlV152ControlModeEnumValues = map[ControlV152ControlMode]struct{}{
	"Automatic": {},
	"Override":  {},
	"Manual":    {},
	"Disabled":  {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ControlV152ControlMode) IsValid() bool {
	_, ok := validControlV152ControlModeEnumValues[v]
	return ok
}

// NewControlV152ControlModeFromValue returns a pointer to a valid ControlV152ControlMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewControlV152ControlModeFromValue(v string) (ControlV152ControlMode, error) {
	ev := ControlV152ControlMode(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ControlV152ControlMode: valid values are %v", v, AllowedControlV152ControlModeEnumValues)
}

// AssertControlV152ControlModeRequired checks if the required fields are not zero-ed
func AssertControlV152ControlModeRequired(obj ControlV152ControlMode) error {
	return nil
}

// AssertControlV152ControlModeConstraints checks if the values respects the defined constraints
func AssertControlV152ControlModeConstraints(obj ControlV152ControlMode) error {
	return nil
}
