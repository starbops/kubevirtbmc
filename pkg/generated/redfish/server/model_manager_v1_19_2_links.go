// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2024.3
 */

package server

// ManagerV1192Links - The links to other resources that are related to this resource.
type ManagerV1192Links struct {
	ActiveSoftwareImage OdataV4IdRef `json:"ActiveSoftwareImage,omitempty"`

	// The array of links to the managers responsible for managing this manager.
	ManagedBy []OdataV4IdRef `json:"ManagedBy,omitempty"`

	// The number of items in a collection.
	ManagedByodataCount int64 `json:"ManagedBy@odata.count,omitempty"`

	// An array of links to the chassis this manager controls.
	ManagerForChassis []OdataV4IdRef `json:"ManagerForChassis,omitempty"`

	// The number of items in a collection.
	ManagerForChassisodataCount int64 `json:"ManagerForChassis@odata.count,omitempty"`

	// An array of links to the managers that are managed by this manager.
	ManagerForManagers []OdataV4IdRef `json:"ManagerForManagers,omitempty"`

	// The number of items in a collection.
	ManagerForManagersodataCount int64 `json:"ManagerForManagers@odata.count,omitempty"`

	// An array of links to the systems that this manager controls.
	ManagerForServers []OdataV4IdRef `json:"ManagerForServers,omitempty"`

	// The number of items in a collection.
	ManagerForServersodataCount int64 `json:"ManagerForServers@odata.count,omitempty"`

	// An array of links to the switches that this manager controls.
	ManagerForSwitches []OdataV4IdRef `json:"ManagerForSwitches,omitempty"`

	// The number of items in a collection.
	ManagerForSwitchesodataCount int64 `json:"ManagerForSwitches@odata.count,omitempty"`

	ManagerInChassis OdataV4IdRef `json:"ManagerInChassis,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	SelectedNetworkPort *OdataV4IdRef `json:"SelectedNetworkPort,omitempty"`

	// The images that are associated with this manager.
	SoftwareImages []OdataV4IdRef `json:"SoftwareImages,omitempty"`

	// The number of items in a collection.
	SoftwareImagesodataCount int64 `json:"SoftwareImages@odata.count,omitempty"`
}

// AssertManagerV1192LinksRequired checks if the required fields are not zero-ed
func AssertManagerV1192LinksRequired(obj ManagerV1192Links) error {
	if err := AssertOdataV4IdRefRequired(obj.ActiveSoftwareImage); err != nil {
		return err
	}
	for _, el := range obj.ManagedBy {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ManagerForChassis {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ManagerForManagers {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ManagerForServers {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ManagerForSwitches {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.ManagerInChassis); err != nil {
		return err
	}
	if obj.SelectedNetworkPort != nil {
		if err := AssertOdataV4IdRefRequired(*obj.SelectedNetworkPort); err != nil {
			return err
		}
	}
	for _, el := range obj.SoftwareImages {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertManagerV1192LinksConstraints checks if the values respects the defined constraints
func AssertManagerV1192LinksConstraints(obj ManagerV1192Links) error {
	if err := AssertOdataV4IdRefConstraints(obj.ActiveSoftwareImage); err != nil {
		return err
	}
	for _, el := range obj.ManagedBy {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ManagerForChassis {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ManagerForManagers {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ManagerForServers {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ManagerForSwitches {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.ManagerInChassis); err != nil {
		return err
	}
	if obj.SelectedNetworkPort != nil {
		if err := AssertOdataV4IdRefConstraints(*obj.SelectedNetworkPort); err != nil {
			return err
		}
	}
	for _, el := range obj.SoftwareImages {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
