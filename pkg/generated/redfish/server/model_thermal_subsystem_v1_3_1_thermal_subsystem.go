// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// ThermalSubsystemV131ThermalSubsystem - This ThermalSubsystem schema contains the definition for the thermal subsystem of a chassis.
type ThermalSubsystemV131ThermalSubsystem struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions ThermalSubsystemV131Actions `json:"Actions,omitempty"`

	// The redundancy information for the coolant connectors in this subsystem.
	CoolantConnectorRedundancy []RedundancyRedundantGroup `json:"CoolantConnectorRedundancy,omitempty"`

	CoolantConnectors OdataV4IdRef `json:"CoolantConnectors,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The redundancy information for the groups of fans in this subsystem.
	FanRedundancy []RedundancyRedundantGroup `json:"FanRedundancy,omitempty"`

	Fans OdataV4IdRef `json:"Fans,omitempty"`

	Heaters OdataV4IdRef `json:"Heaters,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	LeakDetection OdataV4IdRef `json:"LeakDetection,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	Pumps OdataV4IdRef `json:"Pumps,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	ThermalMetrics OdataV4IdRef `json:"ThermalMetrics,omitempty"`
}

// AssertThermalSubsystemV131ThermalSubsystemRequired checks if the required fields are not zero-ed
func AssertThermalSubsystemV131ThermalSubsystemRequired(obj ThermalSubsystemV131ThermalSubsystem) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertThermalSubsystemV131ActionsRequired(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.CoolantConnectorRedundancy {
		if err := AssertRedundancyRedundantGroupRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.CoolantConnectors); err != nil {
		return err
	}
	for _, el := range obj.FanRedundancy {
		if err := AssertRedundancyRedundantGroupRequired(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefRequired(obj.Fans); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Heaters); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.LeakDetection); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Pumps); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.ThermalMetrics); err != nil {
		return err
	}
	return nil
}

// AssertThermalSubsystemV131ThermalSubsystemConstraints checks if the values respects the defined constraints
func AssertThermalSubsystemV131ThermalSubsystemConstraints(obj ThermalSubsystemV131ThermalSubsystem) error {
	if err := AssertThermalSubsystemV131ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	for _, el := range obj.CoolantConnectorRedundancy {
		if err := AssertRedundancyRedundantGroupConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.CoolantConnectors); err != nil {
		return err
	}
	for _, el := range obj.FanRedundancy {
		if err := AssertRedundancyRedundantGroupConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertOdataV4IdRefConstraints(obj.Fans); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Heaters); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.LeakDetection); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Pumps); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.ThermalMetrics); err != nil {
		return err
	}
	return nil
}
