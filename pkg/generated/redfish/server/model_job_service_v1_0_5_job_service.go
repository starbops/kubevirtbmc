// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"time"
)

// JobServiceV105JobService - The JobService schema contains properties for scheduling and execution of operations, represents the properties for the job service itself, and has links to jobs managed by the job service.
type JobServiceV105JobService struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions JobServiceV105Actions `json:"Actions,omitempty"`

	// The current date and time setting for the job service.
	DateTime *time.Time `json:"DateTime,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	Jobs OdataV4IdRef `json:"Jobs,omitempty"`

	Log OdataV4IdRef `json:"Log,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	ServiceCapabilities JobServiceV105JobServiceCapabilities `json:"ServiceCapabilities,omitempty"`

	// An indication of whether this service is enabled.
	ServiceEnabled *bool `json:"ServiceEnabled,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertJobServiceV105JobServiceRequired checks if the required fields are not zero-ed
func AssertJobServiceV105JobServiceRequired(obj JobServiceV105JobService) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertJobServiceV105ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Jobs); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefRequired(obj.Log); err != nil {
		return err
	}
	if err := AssertJobServiceV105JobServiceCapabilitiesRequired(obj.ServiceCapabilities); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertJobServiceV105JobServiceConstraints checks if the values respects the defined constraints
func AssertJobServiceV105JobServiceConstraints(obj JobServiceV105JobService) error {
	if err := AssertJobServiceV105ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Jobs); err != nil {
		return err
	}
	if err := AssertOdataV4IdRefConstraints(obj.Log); err != nil {
		return err
	}
	if err := AssertJobServiceV105JobServiceCapabilitiesConstraints(obj.ServiceCapabilities); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
