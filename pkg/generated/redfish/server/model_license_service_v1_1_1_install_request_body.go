// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// LicenseServiceV111InstallRequestBody - This action installs one or more licenses from a remote file.
type LicenseServiceV111InstallRequestBody struct {

	// An array of links to the devices to be authorized by the license.
	AuthorizedDevices []OdataV4IdRef `json:"AuthorizedDevices,omitempty"`

	// The URI of the license file to install.
	LicenseFileURI string `json:"LicenseFileURI"`

	// The password to access the URI specified by the LicenseFileURI parameter.
	Password string `json:"Password,omitempty"`

	// An array of links to the managers where the license will be installed.
	TargetServices []OdataV4IdRef `json:"TargetServices,omitempty"`

	TransferProtocol LicenseServiceV111TransferProtocolType `json:"TransferProtocol,omitempty"`

	// The user name to access the URI specified by the LicenseFileURI parameter.
	Username string `json:"Username,omitempty"`
}

// AssertLicenseServiceV111InstallRequestBodyRequired checks if the required fields are not zero-ed
func AssertLicenseServiceV111InstallRequestBodyRequired(obj LicenseServiceV111InstallRequestBody) error {
	elements := map[string]interface{}{
		"LicenseFileURI": obj.LicenseFileURI,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.AuthorizedDevices {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TargetServices {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertLicenseServiceV111InstallRequestBodyConstraints checks if the values respects the defined constraints
func AssertLicenseServiceV111InstallRequestBodyConstraints(obj LicenseServiceV111InstallRequestBody) error {
	for _, el := range obj.AuthorizedDevices {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TargetServices {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
