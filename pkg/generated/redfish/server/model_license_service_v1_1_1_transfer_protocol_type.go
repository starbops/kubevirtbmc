// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type LicenseServiceV111TransferProtocolType string

// List of LicenseServiceV111TransferProtocolType
const (
	LICENSESERVICEV111TRANSFERPROTOCOLTYPE_CIFS  LicenseServiceV111TransferProtocolType = "CIFS"
	LICENSESERVICEV111TRANSFERPROTOCOLTYPE_FTP   LicenseServiceV111TransferProtocolType = "FTP"
	LICENSESERVICEV111TRANSFERPROTOCOLTYPE_SFTP  LicenseServiceV111TransferProtocolType = "SFTP"
	LICENSESERVICEV111TRANSFERPROTOCOLTYPE_HTTP  LicenseServiceV111TransferProtocolType = "HTTP"
	LICENSESERVICEV111TRANSFERPROTOCOLTYPE_HTTPS LicenseServiceV111TransferProtocolType = "HTTPS"
	LICENSESERVICEV111TRANSFERPROTOCOLTYPE_SCP   LicenseServiceV111TransferProtocolType = "SCP"
	LICENSESERVICEV111TRANSFERPROTOCOLTYPE_TFTP  LicenseServiceV111TransferProtocolType = "TFTP"
	LICENSESERVICEV111TRANSFERPROTOCOLTYPE_OEM   LicenseServiceV111TransferProtocolType = "OEM"
	LICENSESERVICEV111TRANSFERPROTOCOLTYPE_NFS   LicenseServiceV111TransferProtocolType = "NFS"
)

// AllowedLicenseServiceV111TransferProtocolTypeEnumValues is all the allowed values of LicenseServiceV111TransferProtocolType enum
var AllowedLicenseServiceV111TransferProtocolTypeEnumValues = []LicenseServiceV111TransferProtocolType{
	"CIFS",
	"FTP",
	"SFTP",
	"HTTP",
	"HTTPS",
	"SCP",
	"TFTP",
	"OEM",
	"NFS",
}

// validLicenseServiceV111TransferProtocolTypeEnumValue provides a map of LicenseServiceV111TransferProtocolTypes for fast verification of use input
var validLicenseServiceV111TransferProtocolTypeEnumValues = map[LicenseServiceV111TransferProtocolType]struct{}{
	"CIFS":  {},
	"FTP":   {},
	"SFTP":  {},
	"HTTP":  {},
	"HTTPS": {},
	"SCP":   {},
	"TFTP":  {},
	"OEM":   {},
	"NFS":   {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LicenseServiceV111TransferProtocolType) IsValid() bool {
	_, ok := validLicenseServiceV111TransferProtocolTypeEnumValues[v]
	return ok
}

// NewLicenseServiceV111TransferProtocolTypeFromValue returns a pointer to a valid LicenseServiceV111TransferProtocolType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLicenseServiceV111TransferProtocolTypeFromValue(v string) (LicenseServiceV111TransferProtocolType, error) {
	ev := LicenseServiceV111TransferProtocolType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for LicenseServiceV111TransferProtocolType: valid values are %v", v, AllowedLicenseServiceV111TransferProtocolTypeEnumValues)
}

// AssertLicenseServiceV111TransferProtocolTypeRequired checks if the required fields are not zero-ed
func AssertLicenseServiceV111TransferProtocolTypeRequired(obj LicenseServiceV111TransferProtocolType) error {
	return nil
}

// AssertLicenseServiceV111TransferProtocolTypeConstraints checks if the values respects the defined constraints
func AssertLicenseServiceV111TransferProtocolTypeConstraints(obj LicenseServiceV111TransferProtocolType) error {
	return nil
}
