// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

// StorageReplicaInfoV140UndiscoveredElement : Values of UndiscoveredElement specify whether the source, the target, or both elements involved in a copy operation are undiscovered. An element is considered undiscovered if its object model is not known to the service performing the copy operation.
type StorageReplicaInfoV140UndiscoveredElement string

// List of StorageReplicaInfoV140UndiscoveredElement
const (
	STORAGEREPLICAINFOV140UNDISCOVEREDELEMENT_SOURCE_ELEMENT  StorageReplicaInfoV140UndiscoveredElement = "SourceElement"
	STORAGEREPLICAINFOV140UNDISCOVEREDELEMENT_REPLICA_ELEMENT StorageReplicaInfoV140UndiscoveredElement = "ReplicaElement"
)

// AllowedStorageReplicaInfoV140UndiscoveredElementEnumValues is all the allowed values of StorageReplicaInfoV140UndiscoveredElement enum
var AllowedStorageReplicaInfoV140UndiscoveredElementEnumValues = []StorageReplicaInfoV140UndiscoveredElement{
	"SourceElement",
	"ReplicaElement",
}

// validStorageReplicaInfoV140UndiscoveredElementEnumValue provides a map of StorageReplicaInfoV140UndiscoveredElements for fast verification of use input
var validStorageReplicaInfoV140UndiscoveredElementEnumValues = map[StorageReplicaInfoV140UndiscoveredElement]struct{}{
	"SourceElement":  {},
	"ReplicaElement": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StorageReplicaInfoV140UndiscoveredElement) IsValid() bool {
	_, ok := validStorageReplicaInfoV140UndiscoveredElementEnumValues[v]
	return ok
}

// NewStorageReplicaInfoV140UndiscoveredElementFromValue returns a pointer to a valid StorageReplicaInfoV140UndiscoveredElement
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStorageReplicaInfoV140UndiscoveredElementFromValue(v string) (StorageReplicaInfoV140UndiscoveredElement, error) {
	ev := StorageReplicaInfoV140UndiscoveredElement(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for StorageReplicaInfoV140UndiscoveredElement: valid values are %v", v, AllowedStorageReplicaInfoV140UndiscoveredElementEnumValues)
}

// AssertStorageReplicaInfoV140UndiscoveredElementRequired checks if the required fields are not zero-ed
func AssertStorageReplicaInfoV140UndiscoveredElementRequired(obj StorageReplicaInfoV140UndiscoveredElement) error {
	return nil
}

// AssertStorageReplicaInfoV140UndiscoveredElementConstraints checks if the values respects the defined constraints
func AssertStorageReplicaInfoV140UndiscoveredElementConstraints(obj StorageReplicaInfoV140UndiscoveredElement) error {
	return nil
}
