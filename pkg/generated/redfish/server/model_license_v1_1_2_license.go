// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"time"
)

// LicenseV112License - The License schema describes a license for a feature.
type LicenseV112License struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions LicenseV112Actions `json:"Actions,omitempty"`

	AuthorizationScope LicenseV112AuthorizationScope `json:"AuthorizationScope,omitempty"`

	Contact LicenseV112ContactInfo `json:"Contact,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// The URI from which to download the license file.
	DownloadURI string `json:"DownloadURI,omitempty"`

	// The entitlement identifier for this license.
	EntitlementId *string `json:"EntitlementId,omitempty"`

	// The date and time when the license expires.
	ExpirationDate *time.Time `json:"ExpirationDate,omitempty"`

	// The grace days of this license.
	GracePeriodDays *int64 `json:"GracePeriodDays,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	// The date and time when the license was installed.
	InstallDate *time.Time `json:"InstallDate,omitempty"`

	// The URI at which more information about this license can be obtained.
	LicenseInfoURI *string `json:"LicenseInfoURI,omitempty"`

	LicenseOrigin LicenseV112LicenseOrigin `json:"LicenseOrigin,omitempty"`

	// The Base64-encoded string of the license.
	LicenseString *string `json:"LicenseString,omitempty"`

	LicenseType LicenseV112LicenseType `json:"LicenseType,omitempty"`

	Links LicenseV112Links `json:"Links,omitempty"`

	// The manufacturer or producer of this license.
	Manufacturer *string `json:"Manufacturer,omitempty"`

	// The maximum number of devices authorized by the license.
	MaxAuthorizedDevices *int64 `json:"MaxAuthorizedDevices,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The part number for this license.
	PartNumber *string `json:"PartNumber,omitempty"`

	// The remaining usage duration before the license expires.
	RemainingDuration *string `json:"RemainingDuration,omitempty" validate:"regexp=^P(\\\\d+D)?(T(\\\\d+H)?(\\\\d+M)?(\\\\d+(.\\\\d+)?S)?)?$"`

	// The remaining usage count before the license expires.
	RemainingUseCount *int64 `json:"RemainingUseCount,omitempty"`

	// An indication of whether the license is removable.
	Removable *bool `json:"Removable,omitempty"`

	// The SKU for this license.
	SKU *string `json:"SKU,omitempty"`

	// The serial number for this license.
	SerialNumber *string `json:"SerialNumber,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`
}

// AssertLicenseV112LicenseRequired checks if the required fields are not zero-ed
func AssertLicenseV112LicenseRequired(obj LicenseV112License) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertLicenseV112ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertLicenseV112ContactInfoRequired(obj.Contact); err != nil {
		return err
	}
	if err := AssertLicenseV112LinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	return nil
}

// AssertLicenseV112LicenseConstraints checks if the values respects the defined constraints
func AssertLicenseV112LicenseConstraints(obj LicenseV112License) error {
	if err := AssertLicenseV112ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertLicenseV112ContactInfoConstraints(obj.Contact); err != nil {
		return err
	}
	if err := AssertLicenseV112LinksConstraints(obj.Links); err != nil {
		return err
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	return nil
}
