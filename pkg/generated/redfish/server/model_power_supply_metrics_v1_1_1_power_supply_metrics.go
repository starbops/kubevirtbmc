// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// PowerSupplyMetricsV111PowerSupplyMetrics - The PowerSupplyMetrics schema contains definitions for the metrics of a power supply.
type PowerSupplyMetricsV111PowerSupplyMetrics struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	Actions PowerSupplyMetricsV111Actions `json:"Actions,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	EnergykWh SensorSensorEnergykWhExcerpt `json:"EnergykWh,omitempty"`

	FanSpeedPercent SensorSensorFanExcerpt `json:"FanSpeedPercent,omitempty"`

	// Fan speeds (percent).
	FanSpeedsPercent []SensorSensorFanArrayExcerpt `json:"FanSpeedsPercent,omitempty"`

	// The number of items in a collection.
	FanSpeedsPercentodataCount int64 `json:"FanSpeedsPercent@odata.count,omitempty"`

	FrequencyHz SensorSensorExcerpt `json:"FrequencyHz,omitempty"`

	// The unique identifier for this resource within the collection of similar resources.
	Id string `json:"Id"`

	InputCurrentAmps SensorSensorCurrentExcerpt `json:"InputCurrentAmps,omitempty"`

	InputPowerWatts SensorSensorPowerExcerpt `json:"InputPowerWatts,omitempty"`

	InputVoltage SensorSensorVoltageExcerpt `json:"InputVoltage,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	OutputPowerWatts SensorSensorPowerExcerpt `json:"OutputPowerWatts,omitempty"`

	// The output currents (A) for this power supply.
	RailCurrentAmps []SensorSensorCurrentExcerpt `json:"RailCurrentAmps,omitempty"`

	// The number of items in a collection.
	RailCurrentAmpsodataCount int64 `json:"RailCurrentAmps@odata.count,omitempty"`

	// The output power readings (W) for this power supply.
	RailPowerWatts []SensorSensorPowerExcerpt `json:"RailPowerWatts,omitempty"`

	// The number of items in a collection.
	RailPowerWattsodataCount int64 `json:"RailPowerWatts@odata.count,omitempty"`

	// The output voltages (V) for this power supply.
	RailVoltage []SensorSensorVoltageExcerpt `json:"RailVoltage,omitempty"`

	// The number of items in a collection.
	RailVoltageodataCount int64 `json:"RailVoltage@odata.count,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	TemperatureCelsius SensorSensorExcerpt `json:"TemperatureCelsius,omitempty"`
}

// AssertPowerSupplyMetricsV111PowerSupplyMetricsRequired checks if the required fields are not zero-ed
func AssertPowerSupplyMetricsV111PowerSupplyMetricsRequired(obj PowerSupplyMetricsV111PowerSupplyMetrics) error {
	elements := map[string]interface{}{
		"@odata.id":   obj.OdataId,
		"@odata.type": obj.OdataType,
		"Id":          obj.Id,
		"Name":        obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPowerSupplyMetricsV111ActionsRequired(obj.Actions); err != nil {
		return err
	}
	if err := AssertSensorSensorEnergykWhExcerptRequired(obj.EnergykWh); err != nil {
		return err
	}
	if err := AssertSensorSensorFanExcerptRequired(obj.FanSpeedPercent); err != nil {
		return err
	}
	for _, el := range obj.FanSpeedsPercent {
		if err := AssertSensorSensorFanArrayExcerptRequired(el); err != nil {
			return err
		}
	}
	if err := AssertSensorSensorExcerptRequired(obj.FrequencyHz); err != nil {
		return err
	}
	if err := AssertSensorSensorCurrentExcerptRequired(obj.InputCurrentAmps); err != nil {
		return err
	}
	if err := AssertSensorSensorPowerExcerptRequired(obj.InputPowerWatts); err != nil {
		return err
	}
	if err := AssertSensorSensorVoltageExcerptRequired(obj.InputVoltage); err != nil {
		return err
	}
	if err := AssertSensorSensorPowerExcerptRequired(obj.OutputPowerWatts); err != nil {
		return err
	}
	for _, el := range obj.RailCurrentAmps {
		if err := AssertSensorSensorCurrentExcerptRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RailPowerWatts {
		if err := AssertSensorSensorPowerExcerptRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RailVoltage {
		if err := AssertSensorSensorVoltageExcerptRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusRequired(obj.Status); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptRequired(obj.TemperatureCelsius); err != nil {
		return err
	}
	return nil
}

// AssertPowerSupplyMetricsV111PowerSupplyMetricsConstraints checks if the values respects the defined constraints
func AssertPowerSupplyMetricsV111PowerSupplyMetricsConstraints(obj PowerSupplyMetricsV111PowerSupplyMetrics) error {
	if err := AssertPowerSupplyMetricsV111ActionsConstraints(obj.Actions); err != nil {
		return err
	}
	if err := AssertSensorSensorEnergykWhExcerptConstraints(obj.EnergykWh); err != nil {
		return err
	}
	if err := AssertSensorSensorFanExcerptConstraints(obj.FanSpeedPercent); err != nil {
		return err
	}
	for _, el := range obj.FanSpeedsPercent {
		if err := AssertSensorSensorFanArrayExcerptConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertSensorSensorExcerptConstraints(obj.FrequencyHz); err != nil {
		return err
	}
	if err := AssertSensorSensorCurrentExcerptConstraints(obj.InputCurrentAmps); err != nil {
		return err
	}
	if err := AssertSensorSensorPowerExcerptConstraints(obj.InputPowerWatts); err != nil {
		return err
	}
	if err := AssertSensorSensorVoltageExcerptConstraints(obj.InputVoltage); err != nil {
		return err
	}
	if err := AssertSensorSensorPowerExcerptConstraints(obj.OutputPowerWatts); err != nil {
		return err
	}
	for _, el := range obj.RailCurrentAmps {
		if err := AssertSensorSensorCurrentExcerptConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RailPowerWatts {
		if err := AssertSensorSensorPowerExcerptConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RailVoltage {
		if err := AssertSensorSensorVoltageExcerptConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertResourceStatusConstraints(obj.Status); err != nil {
		return err
	}
	if err := AssertSensorSensorExcerptConstraints(obj.TemperatureCelsius); err != nil {
		return err
	}
	return nil
}
