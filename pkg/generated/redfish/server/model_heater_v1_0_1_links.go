// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

// HeaterV101Links - The links to other resources that are related to this resource.
type HeaterV101Links struct {

	// An array of links to the managers heated by this heater.
	Managers []OdataV4IdRef `json:"Managers,omitempty"`

	// The number of items in a collection.
	ManagersodataCount int64 `json:"Managers@odata.count,omitempty"`

	// An array of links to the memory devices heated by this heater.
	Memory []OdataV4IdRef `json:"Memory,omitempty"`

	// The number of items in a collection.
	MemoryodataCount int64 `json:"Memory@odata.count,omitempty"`

	// An array of links to the network adapters heated by this heater.
	NetworkAdapters []OdataV4IdRef `json:"NetworkAdapters,omitempty"`

	// The number of items in a collection.
	NetworkAdaptersodataCount int64 `json:"NetworkAdapters@odata.count,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// An array of links to the processors heated by this heater.
	Processors []OdataV4IdRef `json:"Processors,omitempty"`

	// The number of items in a collection.
	ProcessorsodataCount int64 `json:"Processors@odata.count,omitempty"`

	// An array of links to the storage controllers heated by this heater.
	StorageControllers []OdataV4IdRef `json:"StorageControllers,omitempty"`

	// The number of items in a collection.
	StorageControllersodataCount int64 `json:"StorageControllers@odata.count,omitempty"`
}

// AssertHeaterV101LinksRequired checks if the required fields are not zero-ed
func AssertHeaterV101LinksRequired(obj HeaterV101Links) error {
	for _, el := range obj.Managers {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Memory {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NetworkAdapters {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Processors {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.StorageControllers {
		if err := AssertOdataV4IdRefRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertHeaterV101LinksConstraints checks if the values respects the defined constraints
func AssertHeaterV101LinksConstraints(obj HeaterV101Links) error {
	for _, el := range obj.Managers {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Memory {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.NetworkAdapters {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Processors {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.StorageControllers {
		if err := AssertOdataV4IdRefConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
