// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type ResourceV1200DurableNameFormat string

// List of ResourceV1200DurableNameFormat
const (
	RESOURCEV1200DURABLENAMEFORMAT_NAA         ResourceV1200DurableNameFormat = "NAA"
	RESOURCEV1200DURABLENAMEFORMAT_I_QN        ResourceV1200DurableNameFormat = "iQN"
	RESOURCEV1200DURABLENAMEFORMAT_FC_WWN      ResourceV1200DurableNameFormat = "FC_WWN"
	RESOURCEV1200DURABLENAMEFORMAT_UUID        ResourceV1200DurableNameFormat = "UUID"
	RESOURCEV1200DURABLENAMEFORMAT_EUI         ResourceV1200DurableNameFormat = "EUI"
	RESOURCEV1200DURABLENAMEFORMAT_NQN         ResourceV1200DurableNameFormat = "NQN"
	RESOURCEV1200DURABLENAMEFORMAT_NSID        ResourceV1200DurableNameFormat = "NSID"
	RESOURCEV1200DURABLENAMEFORMAT_NGUID       ResourceV1200DurableNameFormat = "NGUID"
	RESOURCEV1200DURABLENAMEFORMAT_MAC_ADDRESS ResourceV1200DurableNameFormat = "MACAddress"
	RESOURCEV1200DURABLENAMEFORMAT_GCXLID      ResourceV1200DurableNameFormat = "GCXLID"
)

// AllowedResourceV1200DurableNameFormatEnumValues is all the allowed values of ResourceV1200DurableNameFormat enum
var AllowedResourceV1200DurableNameFormatEnumValues = []ResourceV1200DurableNameFormat{
	"NAA",
	"iQN",
	"FC_WWN",
	"UUID",
	"EUI",
	"NQN",
	"NSID",
	"NGUID",
	"MACAddress",
	"GCXLID",
}

// validResourceV1200DurableNameFormatEnumValue provides a map of ResourceV1200DurableNameFormats for fast verification of use input
var validResourceV1200DurableNameFormatEnumValues = map[ResourceV1200DurableNameFormat]struct{}{
	"NAA":        {},
	"iQN":        {},
	"FC_WWN":     {},
	"UUID":       {},
	"EUI":        {},
	"NQN":        {},
	"NSID":       {},
	"NGUID":      {},
	"MACAddress": {},
	"GCXLID":     {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceV1200DurableNameFormat) IsValid() bool {
	_, ok := validResourceV1200DurableNameFormatEnumValues[v]
	return ok
}

// NewResourceV1200DurableNameFormatFromValue returns a pointer to a valid ResourceV1200DurableNameFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceV1200DurableNameFormatFromValue(v string) (ResourceV1200DurableNameFormat, error) {
	ev := ResourceV1200DurableNameFormat(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ResourceV1200DurableNameFormat: valid values are %v", v, AllowedResourceV1200DurableNameFormatEnumValues)
}

// AssertResourceV1200DurableNameFormatRequired checks if the required fields are not zero-ed
func AssertResourceV1200DurableNameFormatRequired(obj ResourceV1200DurableNameFormat) error {
	return nil
}

// AssertResourceV1200DurableNameFormatConstraints checks if the values respects the defined constraints
func AssertResourceV1200DurableNameFormatConstraints(obj ResourceV1200DurableNameFormat) error {
	return nil
}
