// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redfish
 *
 * This contains the definition of a Redfish service.
 *
 * API version: 2023.3
 */

package server

import (
	"fmt"
)

type PrivilegesPrivilegeType string

// List of PrivilegesPrivilegeType
const (
	PRIVILEGESPRIVILEGETYPE_LOGIN                                PrivilegesPrivilegeType = "Login"
	PRIVILEGESPRIVILEGETYPE_CONFIGURE_MANAGER                    PrivilegesPrivilegeType = "ConfigureManager"
	PRIVILEGESPRIVILEGETYPE_CONFIGURE_USERS                      PrivilegesPrivilegeType = "ConfigureUsers"
	PRIVILEGESPRIVILEGETYPE_CONFIGURE_SELF                       PrivilegesPrivilegeType = "ConfigureSelf"
	PRIVILEGESPRIVILEGETYPE_CONFIGURE_COMPONENTS                 PrivilegesPrivilegeType = "ConfigureComponents"
	PRIVILEGESPRIVILEGETYPE_NO_AUTH                              PrivilegesPrivilegeType = "NoAuth"
	PRIVILEGESPRIVILEGETYPE_CONFIGURE_COMPOSITION_INFRASTRUCTURE PrivilegesPrivilegeType = "ConfigureCompositionInfrastructure"
	PRIVILEGESPRIVILEGETYPE_ADMINISTRATE_SYSTEMS                 PrivilegesPrivilegeType = "AdministrateSystems"
	PRIVILEGESPRIVILEGETYPE_OPERATE_SYSTEMS                      PrivilegesPrivilegeType = "OperateSystems"
	PRIVILEGESPRIVILEGETYPE_ADMINISTRATE_STORAGE                 PrivilegesPrivilegeType = "AdministrateStorage"
	PRIVILEGESPRIVILEGETYPE_OPERATE_STORAGE_BACKUP               PrivilegesPrivilegeType = "OperateStorageBackup"
)

// AllowedPrivilegesPrivilegeTypeEnumValues is all the allowed values of PrivilegesPrivilegeType enum
var AllowedPrivilegesPrivilegeTypeEnumValues = []PrivilegesPrivilegeType{
	"Login",
	"ConfigureManager",
	"ConfigureUsers",
	"ConfigureSelf",
	"ConfigureComponents",
	"NoAuth",
	"ConfigureCompositionInfrastructure",
	"AdministrateSystems",
	"OperateSystems",
	"AdministrateStorage",
	"OperateStorageBackup",
}

// validPrivilegesPrivilegeTypeEnumValue provides a map of PrivilegesPrivilegeTypes for fast verification of use input
var validPrivilegesPrivilegeTypeEnumValues = map[PrivilegesPrivilegeType]struct{}{
	"Login":                              {},
	"ConfigureManager":                   {},
	"ConfigureUsers":                     {},
	"ConfigureSelf":                      {},
	"ConfigureComponents":                {},
	"NoAuth":                             {},
	"ConfigureCompositionInfrastructure": {},
	"AdministrateSystems":                {},
	"OperateSystems":                     {},
	"AdministrateStorage":                {},
	"OperateStorageBackup":               {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrivilegesPrivilegeType) IsValid() bool {
	_, ok := validPrivilegesPrivilegeTypeEnumValues[v]
	return ok
}

// NewPrivilegesPrivilegeTypeFromValue returns a pointer to a valid PrivilegesPrivilegeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrivilegesPrivilegeTypeFromValue(v string) (PrivilegesPrivilegeType, error) {
	ev := PrivilegesPrivilegeType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PrivilegesPrivilegeType: valid values are %v", v, AllowedPrivilegesPrivilegeTypeEnumValues)
}

// AssertPrivilegesPrivilegeTypeRequired checks if the required fields are not zero-ed
func AssertPrivilegesPrivilegeTypeRequired(obj PrivilegesPrivilegeType) error {
	return nil
}

// AssertPrivilegesPrivilegeTypeConstraints checks if the values respects the defined constraints
func AssertPrivilegesPrivilegeTypeConstraints(obj PrivilegesPrivilegeType) error {
	return nil
}
